/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "src/gen-cpp2/module_types.h"
#include "src/gen-cpp2/module_types.tcc"

#include <algorithm>
#include <folly/Indestructible.h>

#include "src/gen-cpp2/module_data.h"

namespace some { namespace valid { namespace ns {

const _MyEnumA_EnumMapFactory::ValuesToNamesMapType _MyEnumA_VALUES_TO_NAMES = _MyEnumA_EnumMapFactory::makeValuesToNamesMap();
const _MyEnumA_EnumMapFactory::NamesToValuesMapType _MyEnumA_NAMES_TO_VALUES = _MyEnumA_EnumMapFactory::makeNamesToValuesMap();

}}} // some::valid::ns
namespace std {

} // std
namespace apache { namespace thrift {

template <> const std::size_t TEnumTraits< ::some::valid::ns::MyEnumA>::size = 3;
template <> const folly::Range<const  ::some::valid::ns::MyEnumA*> TEnumTraits< ::some::valid::ns::MyEnumA>::values = folly::range( ::some::valid::ns::_MyEnumAEnumDataStorage::values);
template <> const folly::Range<const folly::StringPiece*> TEnumTraits< ::some::valid::ns::MyEnumA>::names = folly::range( ::some::valid::ns::_MyEnumAEnumDataStorage::names);
template <> const char* TEnumTraits< ::some::valid::ns::MyEnumA>::findName( ::some::valid::ns::MyEnumA value) {
  static auto const map = folly::Indestructible< ::some::valid::ns::_MyEnumA_EnumMapFactory::ValuesToNamesMapType>{ ::some::valid::ns::_MyEnumA_EnumMapFactory::makeValuesToNamesMap()};
  return findName(*map, value);
}

template <> bool TEnumTraits< ::some::valid::ns::MyEnumA>::findValue(const char* name,  ::some::valid::ns::MyEnumA* outValue) {
  static auto const map = folly::Indestructible< ::some::valid::ns::_MyEnumA_EnumMapFactory::NamesToValuesMapType>{ ::some::valid::ns::_MyEnumA_EnumMapFactory::makeNamesToValuesMap()};
  return findValue(*map, name, outValue);
}

}} // apache::thrift
namespace some { namespace valid { namespace ns {

const _AnnotatedEnum_EnumMapFactory::ValuesToNamesMapType _AnnotatedEnum_VALUES_TO_NAMES = _AnnotatedEnum_EnumMapFactory::makeValuesToNamesMap();
const _AnnotatedEnum_EnumMapFactory::NamesToValuesMapType _AnnotatedEnum_NAMES_TO_VALUES = _AnnotatedEnum_EnumMapFactory::makeNamesToValuesMap();

}}} // some::valid::ns
namespace std {

} // std
namespace apache { namespace thrift {

template <> const std::size_t TEnumTraits< ::some::valid::ns::AnnotatedEnum>::size = 3;
template <> const folly::Range<const  ::some::valid::ns::AnnotatedEnum*> TEnumTraits< ::some::valid::ns::AnnotatedEnum>::values = folly::range( ::some::valid::ns::_AnnotatedEnumEnumDataStorage::values);
template <> const folly::Range<const folly::StringPiece*> TEnumTraits< ::some::valid::ns::AnnotatedEnum>::names = folly::range( ::some::valid::ns::_AnnotatedEnumEnumDataStorage::names);
template <> const char* TEnumTraits< ::some::valid::ns::AnnotatedEnum>::findName( ::some::valid::ns::AnnotatedEnum value) {
  static auto const map = folly::Indestructible< ::some::valid::ns::_AnnotatedEnum_EnumMapFactory::ValuesToNamesMapType>{ ::some::valid::ns::_AnnotatedEnum_EnumMapFactory::makeValuesToNamesMap()};
  return findName(*map, value);
}

template <> bool TEnumTraits< ::some::valid::ns::AnnotatedEnum>::findValue(const char* name,  ::some::valid::ns::AnnotatedEnum* outValue) {
  static auto const map = folly::Indestructible< ::some::valid::ns::_AnnotatedEnum_EnumMapFactory::NamesToValuesMapType>{ ::some::valid::ns::_AnnotatedEnum_EnumMapFactory::makeNamesToValuesMap()};
  return findValue(*map, name, outValue);
}

}} // apache::thrift
namespace some { namespace valid { namespace ns {

const _AnnotatedEnum2_EnumMapFactory::ValuesToNamesMapType _AnnotatedEnum2_VALUES_TO_NAMES = _AnnotatedEnum2_EnumMapFactory::makeValuesToNamesMap();
const _AnnotatedEnum2_EnumMapFactory::NamesToValuesMapType _AnnotatedEnum2_NAMES_TO_VALUES = _AnnotatedEnum2_EnumMapFactory::makeNamesToValuesMap();

}}} // some::valid::ns
namespace std {

} // std
namespace apache { namespace thrift {

template <> const std::size_t TEnumTraits< ::some::valid::ns::AnnotatedEnum2>::size = 3;
template <> const folly::Range<const  ::some::valid::ns::AnnotatedEnum2*> TEnumTraits< ::some::valid::ns::AnnotatedEnum2>::values = folly::range( ::some::valid::ns::_AnnotatedEnum2EnumDataStorage::values);
template <> const folly::Range<const folly::StringPiece*> TEnumTraits< ::some::valid::ns::AnnotatedEnum2>::names = folly::range( ::some::valid::ns::_AnnotatedEnum2EnumDataStorage::names);
template <> const char* TEnumTraits< ::some::valid::ns::AnnotatedEnum2>::findName( ::some::valid::ns::AnnotatedEnum2 value) {
  static auto const map = folly::Indestructible< ::some::valid::ns::_AnnotatedEnum2_EnumMapFactory::ValuesToNamesMapType>{ ::some::valid::ns::_AnnotatedEnum2_EnumMapFactory::makeValuesToNamesMap()};
  return findName(*map, value);
}

template <> bool TEnumTraits< ::some::valid::ns::AnnotatedEnum2>::findValue(const char* name,  ::some::valid::ns::AnnotatedEnum2* outValue) {
  static auto const map = folly::Indestructible< ::some::valid::ns::_AnnotatedEnum2_EnumMapFactory::NamesToValuesMapType>{ ::some::valid::ns::_AnnotatedEnum2_EnumMapFactory::makeNamesToValuesMap()};
  return findValue(*map, name, outValue);
}

}} // apache::thrift
namespace some { namespace valid { namespace ns {

const _MyEnumB_EnumMapFactory::ValuesToNamesMapType _MyEnumB_VALUES_TO_NAMES = _MyEnumB_EnumMapFactory::makeValuesToNamesMap();
const _MyEnumB_EnumMapFactory::NamesToValuesMapType _MyEnumB_NAMES_TO_VALUES = _MyEnumB_EnumMapFactory::makeNamesToValuesMap();

}}} // some::valid::ns
namespace std {

} // std
namespace apache { namespace thrift {

template <> const std::size_t TEnumTraits< ::some::valid::ns::MyEnumB>::size = 1;
template <> const folly::Range<const  ::some::valid::ns::MyEnumB*> TEnumTraits< ::some::valid::ns::MyEnumB>::values = folly::range( ::some::valid::ns::_MyEnumBEnumDataStorage::values);
template <> const folly::Range<const folly::StringPiece*> TEnumTraits< ::some::valid::ns::MyEnumB>::names = folly::range( ::some::valid::ns::_MyEnumBEnumDataStorage::names);
template <> const char* TEnumTraits< ::some::valid::ns::MyEnumB>::findName( ::some::valid::ns::MyEnumB value) {
  static auto const map = folly::Indestructible< ::some::valid::ns::_MyEnumB_EnumMapFactory::ValuesToNamesMapType>{ ::some::valid::ns::_MyEnumB_EnumMapFactory::makeValuesToNamesMap()};
  return findName(*map, value);
}

template <> bool TEnumTraits< ::some::valid::ns::MyEnumB>::findValue(const char* name,  ::some::valid::ns::MyEnumB* outValue) {
  static auto const map = folly::Indestructible< ::some::valid::ns::_MyEnumB_EnumMapFactory::NamesToValuesMapType>{ ::some::valid::ns::_MyEnumB_EnumMapFactory::makeNamesToValuesMap()};
  return findValue(*map, name, outValue);
}

}} // apache::thrift
namespace some { namespace valid { namespace ns {

void Empty::__clear() {
  // clear all fields
}

bool Empty::operator==(const Empty& /* rhs */) const {
  return true;
}

void Empty::translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
}

void swap(Empty& a, Empty& b) {
  using ::std::swap;
  (void)a;
  (void)b;
}

template uint32_t Empty::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t Empty::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Empty::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Empty::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Empty::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t Empty::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Empty::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Empty::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Empty::read<>(apache::thrift::SimpleJSONProtocolReader*);
template uint32_t Empty::write<>(apache::thrift::SimpleJSONProtocolWriter*) const;
template uint32_t Empty::serializedSize<>(apache::thrift::SimpleJSONProtocolWriter const*) const;
template uint32_t Empty::serializedSizeZC<>(apache::thrift::SimpleJSONProtocolWriter const*) const;

}}} // some::valid::ns
namespace some { namespace valid { namespace ns {

void ASimpleStruct::__clear() {
  // clear all fields
  boolField = 0;
  __isset.__clear();
}

bool ASimpleStruct::operator==(const ASimpleStruct& rhs) const {
  if (!((boolField == rhs.boolField))) {
    return false;
  }
  return true;
}

void ASimpleStruct::translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
  else if (_fname == "boolField") {
    fid = 1;
    _ftype = apache::thrift::protocol::T_I64;
  }
}

void swap(ASimpleStruct& a, ASimpleStruct& b) {
  using ::std::swap;
  swap(a.boolField, b.boolField);
  swap(a.__isset, b.__isset);
}

template uint32_t ASimpleStruct::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t ASimpleStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t ASimpleStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t ASimpleStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t ASimpleStruct::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t ASimpleStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t ASimpleStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t ASimpleStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t ASimpleStruct::read<>(apache::thrift::SimpleJSONProtocolReader*);
template uint32_t ASimpleStruct::write<>(apache::thrift::SimpleJSONProtocolWriter*) const;
template uint32_t ASimpleStruct::serializedSize<>(apache::thrift::SimpleJSONProtocolWriter const*) const;
template uint32_t ASimpleStruct::serializedSizeZC<>(apache::thrift::SimpleJSONProtocolWriter const*) const;

}}} // some::valid::ns
namespace some { namespace valid { namespace ns {

void MyStruct::__clear() {
  // clear all fields
  MyBoolField = 0;
  MyIntField = 12LL;
  MyStringField = apache::thrift::StringTraits< std::string>::fromStringLiteral("test");
  MyStringField2 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  MyBinaryField = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  MyBinaryField2 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  MyBinaryField3 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  MyBinaryListField4.clear();
  MyMapEnumAndInt.clear();
  __isset.__clear();
}

bool MyStruct::operator==(const MyStruct& rhs) const {
  if (!((MyBoolField == rhs.MyBoolField))) {
    return false;
  }
  if (!((MyIntField == rhs.MyIntField))) {
    return false;
  }
  if (!((MyStringField == rhs.MyStringField))) {
    return false;
  }
  if (!((MyStringField2 == rhs.MyStringField2))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(MyBinaryField, rhs.MyBinaryField))) {
    return false;
  }
  if (__isset.MyBinaryField2 != rhs.__isset.MyBinaryField2) {
    return false;
  }
  else if (__isset.MyBinaryField2 && !(apache::thrift::StringTraits<std::string>::isEqual(MyBinaryField2, rhs.MyBinaryField2))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(MyBinaryField3, rhs.MyBinaryField3))) {
    return false;
  }
  if (!((MyBinaryListField4 == rhs.MyBinaryListField4))) {
    return false;
  }
  if (!((MyMapEnumAndInt == rhs.MyMapEnumAndInt))) {
    return false;
  }
  return true;
}

const std::vector<std::string>& MyStruct::get_MyBinaryListField4() const& {
  return MyBinaryListField4;
}

std::vector<std::string> MyStruct::get_MyBinaryListField4() && {
  return std::move(MyBinaryListField4);
}

const std::map< ::some::valid::ns::MyEnumA, std::string>& MyStruct::get_MyMapEnumAndInt() const& {
  return MyMapEnumAndInt;
}

std::map< ::some::valid::ns::MyEnumA, std::string> MyStruct::get_MyMapEnumAndInt() && {
  return std::move(MyMapEnumAndInt);
}

void MyStruct::translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
  else if (_fname == "MyBoolField") {
    fid = 1;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "MyIntField") {
    fid = 2;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "MyStringField") {
    fid = 3;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "MyStringField2") {
    fid = 4;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "MyBinaryField") {
    fid = 5;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "MyBinaryField2") {
    fid = 6;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "MyBinaryField3") {
    fid = 7;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "MyBinaryListField4") {
    fid = 8;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "MyMapEnumAndInt") {
    fid = 9;
    _ftype = apache::thrift::protocol::T_MAP;
  }
}

void swap(MyStruct& a, MyStruct& b) {
  using ::std::swap;
  swap(a.MyBoolField, b.MyBoolField);
  swap(a.MyIntField, b.MyIntField);
  swap(a.MyStringField, b.MyStringField);
  swap(a.MyStringField2, b.MyStringField2);
  swap(a.MyBinaryField, b.MyBinaryField);
  swap(a.MyBinaryField2, b.MyBinaryField2);
  swap(a.MyBinaryField3, b.MyBinaryField3);
  swap(a.MyBinaryListField4, b.MyBinaryListField4);
  swap(a.MyMapEnumAndInt, b.MyMapEnumAndInt);
  swap(a.__isset, b.__isset);
}

template uint32_t MyStruct::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t MyStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t MyStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t MyStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t MyStruct::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t MyStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t MyStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t MyStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t MyStruct::read<>(apache::thrift::SimpleJSONProtocolReader*);
template uint32_t MyStruct::write<>(apache::thrift::SimpleJSONProtocolWriter*) const;
template uint32_t MyStruct::serializedSize<>(apache::thrift::SimpleJSONProtocolWriter const*) const;
template uint32_t MyStruct::serializedSizeZC<>(apache::thrift::SimpleJSONProtocolWriter const*) const;

}}} // some::valid::ns
namespace some { namespace valid { namespace ns {

void SimpleUnion::__clear() {
  // clear all fields
  if (type_ == Type::__EMPTY__) { return; }
  switch(type_) {
    case Type::intValue:
    {
      destruct(value_.intValue);
      break;
    }
    case Type::stringValue:
    {
      destruct(value_.stringValue);
      break;
    }
    default:
    {
      assert(false);
      break;
    }
  }
  type_ = Type::__EMPTY__;
}

bool SimpleUnion::operator==(const SimpleUnion& rhs) const {
  if (type_ != rhs.type_) { return false; }
  switch(type_) {
    case Type::intValue:
    {
      return value_.intValue == rhs.value_.intValue;
    }
    case Type::stringValue:
    {
      return value_.stringValue == rhs.value_.stringValue;
    }
    default:
    {
      return true;
    }
  }
}
void SimpleUnion::translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
  else if (_fname == "intValue") {
    fid = 7;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "stringValue") {
    fid = 2;
    _ftype = apache::thrift::protocol::T_STRING;
  }
}

void swap(SimpleUnion& a, SimpleUnion& b) {
  SimpleUnion temp(std::move(a));
  a = std::move(b);
  b = std::move(temp);
}

template uint32_t SimpleUnion::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t SimpleUnion::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t SimpleUnion::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t SimpleUnion::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t SimpleUnion::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t SimpleUnion::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t SimpleUnion::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t SimpleUnion::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t SimpleUnion::read<>(apache::thrift::SimpleJSONProtocolReader*);
template uint32_t SimpleUnion::write<>(apache::thrift::SimpleJSONProtocolWriter*) const;
template uint32_t SimpleUnion::serializedSize<>(apache::thrift::SimpleJSONProtocolWriter const*) const;
template uint32_t SimpleUnion::serializedSizeZC<>(apache::thrift::SimpleJSONProtocolWriter const*) const;

}}} // some::valid::ns
namespace some { namespace valid { namespace ns {

void ComplexUnion::__clear() {
  // clear all fields
  if (type_ == Type::__EMPTY__) { return; }
  switch(type_) {
    case Type::intValue:
    {
      destruct(value_.intValue);
      break;
    }
    case Type::req_intValue:
    {
      destruct(value_.req_intValue);
      break;
    }
    case Type::opt_intValue:
    {
      destruct(value_.opt_intValue);
      break;
    }
    case Type::stringValue:
    {
      destruct(value_.stringValue);
      break;
    }
    case Type::req_stringValue:
    {
      destruct(value_.req_stringValue);
      break;
    }
    case Type::opt_stringValue:
    {
      destruct(value_.opt_stringValue);
      break;
    }
    case Type::intValue2:
    {
      destruct(value_.intValue2);
      break;
    }
    case Type::intValue3:
    {
      destruct(value_.intValue3);
      break;
    }
    case Type::doubelValue:
    {
      destruct(value_.doubelValue);
      break;
    }
    case Type::boolValue:
    {
      destruct(value_.boolValue);
      break;
    }
    case Type::union_list:
    {
      destruct(value_.union_list);
      break;
    }
    case Type::union_set:
    {
      destruct(value_.union_set);
      break;
    }
    case Type::union_map:
    {
      destruct(value_.union_map);
      break;
    }
    case Type::req_union_map:
    {
      destruct(value_.req_union_map);
      break;
    }
    case Type::opt_union_map:
    {
      destruct(value_.opt_union_map);
      break;
    }
    case Type::enum_field:
    {
      destruct(value_.enum_field);
      break;
    }
    case Type::enum_container:
    {
      destruct(value_.enum_container);
      break;
    }
    case Type::a_struct:
    {
      destruct(value_.a_struct);
      break;
    }
    case Type::a_set_struct:
    {
      destruct(value_.a_set_struct);
      break;
    }
    case Type::a_union:
    {
      destruct(value_.a_union);
      break;
    }
    case Type::req_a_union:
    {
      destruct(value_.req_a_union);
      break;
    }
    case Type::opt_a_union:
    {
      destruct(value_.opt_a_union);
      break;
    }
    case Type::a_union_list:
    {
      destruct(value_.a_union_list);
      break;
    }
    case Type::a_union_typedef:
    {
      destruct(value_.a_union_typedef);
      break;
    }
    case Type::a_union_typedef_list:
    {
      destruct(value_.a_union_typedef_list);
      break;
    }
    case Type::MyBinaryField:
    {
      destruct(value_.MyBinaryField);
      break;
    }
    case Type::MyBinaryField2:
    {
      destruct(value_.MyBinaryField2);
      break;
    }
    case Type::MyBinaryField3:
    {
      destruct(value_.MyBinaryField3);
      break;
    }
    case Type::MyBinaryListField4:
    {
      destruct(value_.MyBinaryListField4);
      break;
    }
    case Type::ref_field:
    {
      destruct(value_.ref_field);
      break;
    }
    case Type::ref_field2:
    {
      destruct(value_.ref_field2);
      break;
    }
    case Type::excp_field:
    {
      destruct(value_.excp_field);
      break;
    }
    default:
    {
      assert(false);
      break;
    }
  }
  type_ = Type::__EMPTY__;
}

bool ComplexUnion::operator==(const ComplexUnion& rhs) const {
  if (type_ != rhs.type_) { return false; }
  switch(type_) {
    case Type::intValue:
    {
      return value_.intValue == rhs.value_.intValue;
    }
    case Type::req_intValue:
    {
      return value_.req_intValue == rhs.value_.req_intValue;
    }
    case Type::opt_intValue:
    {
      return value_.opt_intValue == rhs.value_.opt_intValue;
    }
    case Type::stringValue:
    {
      return value_.stringValue == rhs.value_.stringValue;
    }
    case Type::req_stringValue:
    {
      return value_.req_stringValue == rhs.value_.req_stringValue;
    }
    case Type::opt_stringValue:
    {
      return value_.opt_stringValue == rhs.value_.opt_stringValue;
    }
    case Type::intValue2:
    {
      return value_.intValue2 == rhs.value_.intValue2;
    }
    case Type::intValue3:
    {
      return value_.intValue3 == rhs.value_.intValue3;
    }
    case Type::doubelValue:
    {
      return value_.doubelValue == rhs.value_.doubelValue;
    }
    case Type::boolValue:
    {
      return value_.boolValue == rhs.value_.boolValue;
    }
    case Type::union_list:
    {
      return value_.union_list == rhs.value_.union_list;
    }
    case Type::union_set:
    {
      return value_.union_set == rhs.value_.union_set;
    }
    case Type::union_map:
    {
      return value_.union_map == rhs.value_.union_map;
    }
    case Type::req_union_map:
    {
      return value_.req_union_map == rhs.value_.req_union_map;
    }
    case Type::opt_union_map:
    {
      return value_.opt_union_map == rhs.value_.opt_union_map;
    }
    case Type::enum_field:
    {
      return value_.enum_field == rhs.value_.enum_field;
    }
    case Type::enum_container:
    {
      return value_.enum_container == rhs.value_.enum_container;
    }
    case Type::a_struct:
    {
      return value_.a_struct == rhs.value_.a_struct;
    }
    case Type::a_set_struct:
    {
      return value_.a_set_struct == rhs.value_.a_set_struct;
    }
    case Type::a_union:
    {
      return value_.a_union == rhs.value_.a_union;
    }
    case Type::req_a_union:
    {
      return value_.req_a_union == rhs.value_.req_a_union;
    }
    case Type::opt_a_union:
    {
      return value_.opt_a_union == rhs.value_.opt_a_union;
    }
    case Type::a_union_list:
    {
      return value_.a_union_list == rhs.value_.a_union_list;
    }
    case Type::a_union_typedef:
    {
      return value_.a_union_typedef == rhs.value_.a_union_typedef;
    }
    case Type::a_union_typedef_list:
    {
      return value_.a_union_typedef_list == rhs.value_.a_union_typedef_list;
    }
    case Type::MyBinaryField:
    {
      return value_.MyBinaryField == rhs.value_.MyBinaryField;
    }
    case Type::MyBinaryField2:
    {
      return value_.MyBinaryField2 == rhs.value_.MyBinaryField2;
    }
    case Type::MyBinaryField3:
    {
      return value_.MyBinaryField3 == rhs.value_.MyBinaryField3;
    }
    case Type::MyBinaryListField4:
    {
      return value_.MyBinaryListField4 == rhs.value_.MyBinaryListField4;
    }
    case Type::ref_field:
    {
      return *value_.ref_field == *rhs.value_.ref_field;
    }
    case Type::ref_field2:
    {
      return *value_.ref_field2 == *rhs.value_.ref_field2;
    }
    case Type::excp_field:
    {
      return value_.excp_field == rhs.value_.excp_field;
    }
    default:
    {
      return true;
    }
  }
}

std::unique_ptr< ::some::valid::ns::MyStruct>& ComplexUnion::set_ref_field( ::some::valid::ns::MyStruct const &t) {
  __clear();
  type_ = Type::ref_field;
  ::new (std::addressof(value_.ref_field)) std::unique_ptr< ::some::valid::ns::MyStruct>(new std::unique_ptr< ::some::valid::ns::MyStruct>::element_type(t));
  return value_.ref_field;
}

std::unique_ptr< ::some::valid::ns::MyStruct>& ComplexUnion::set_ref_field( ::some::valid::ns::MyStruct&& t) {
  __clear();
  type_ = Type::ref_field;
  ::new (std::addressof(value_.ref_field)) std::unique_ptr< ::some::valid::ns::MyStruct>(new std::unique_ptr< ::some::valid::ns::MyStruct>::element_type(std::move(t)));
  return value_.ref_field;
}

std::shared_ptr<const  ::some::valid::ns::MyStruct>& ComplexUnion::set_ref_field2( ::some::valid::ns::MyStruct const &t) {
  __clear();
  type_ = Type::ref_field2;
  ::new (std::addressof(value_.ref_field2)) std::shared_ptr<const  ::some::valid::ns::MyStruct>(new std::shared_ptr<const  ::some::valid::ns::MyStruct>::element_type(t));
  return value_.ref_field2;
}

std::shared_ptr<const  ::some::valid::ns::MyStruct>& ComplexUnion::set_ref_field2( ::some::valid::ns::MyStruct&& t) {
  __clear();
  type_ = Type::ref_field2;
  ::new (std::addressof(value_.ref_field2)) std::shared_ptr<const  ::some::valid::ns::MyStruct>(new std::shared_ptr<const  ::some::valid::ns::MyStruct>::element_type(std::move(t)));
  return value_.ref_field2;
}
void ComplexUnion::translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
  else if (_fname == "intValue") {
    fid = 1;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "req_intValue") {
    fid = 101;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "opt_intValue") {
    fid = 201;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "stringValue") {
    fid = 3;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "req_stringValue") {
    fid = 103;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "opt_stringValue") {
    fid = 203;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "intValue2") {
    fid = 4;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "intValue3") {
    fid = 6;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "doubelValue") {
    fid = 7;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "boolValue") {
    fid = 8;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "union_list") {
    fid = 9;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "union_set") {
    fid = 10;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "union_map") {
    fid = 11;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "req_union_map") {
    fid = 111;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "opt_union_map") {
    fid = 211;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "enum_field") {
    fid = 12;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "enum_container") {
    fid = 13;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "a_struct") {
    fid = 14;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "a_set_struct") {
    fid = 15;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "a_union") {
    fid = 16;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "req_a_union") {
    fid = 116;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "opt_a_union") {
    fid = 216;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "a_union_list") {
    fid = 17;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "a_union_typedef") {
    fid = 18;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "a_union_typedef_list") {
    fid = 19;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "MyBinaryField") {
    fid = 20;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "MyBinaryField2") {
    fid = 21;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "MyBinaryField3") {
    fid = 22;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "MyBinaryListField4") {
    fid = 23;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "ref_field") {
    fid = 24;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "ref_field2") {
    fid = 25;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "excp_field") {
    fid = 26;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
}

void swap(ComplexUnion& a, ComplexUnion& b) {
  ComplexUnion temp(std::move(a));
  a = std::move(b);
  b = std::move(temp);
}

template uint32_t ComplexUnion::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t ComplexUnion::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t ComplexUnion::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t ComplexUnion::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t ComplexUnion::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t ComplexUnion::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t ComplexUnion::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t ComplexUnion::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t ComplexUnion::read<>(apache::thrift::SimpleJSONProtocolReader*);
template uint32_t ComplexUnion::write<>(apache::thrift::SimpleJSONProtocolWriter*) const;
template uint32_t ComplexUnion::serializedSize<>(apache::thrift::SimpleJSONProtocolWriter const*) const;
template uint32_t ComplexUnion::serializedSizeZC<>(apache::thrift::SimpleJSONProtocolWriter const*) const;

}}} // some::valid::ns
namespace some { namespace valid { namespace ns {

void AnException::__clear() {
  // clear all fields
  code = 0;
  req_code = 0;
  message2 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  req_message = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  exception_list.clear();
  exception_set.clear();
  exception_map.clear();
  req_exception_map.clear();
  enum_field = static_cast< ::some::valid::ns::MyEnumA>(0);
  enum_container.clear();
  ::apache::thrift::Cpp2Ops<  ::some::valid::ns::MyStruct>::clear(&a_struct);
  a_set_struct.clear();
  a_union_list.clear();
  union_typedef.clear();
  a_union_typedef_list.clear();
  __isset.__clear();
}

bool AnException::operator==(const AnException& rhs) const {
  if (!((code == rhs.code))) {
    return false;
  }
  if (!((req_code == rhs.req_code))) {
    return false;
  }
  if (!((message2 == rhs.message2))) {
    return false;
  }
  if (!((req_message == rhs.req_message))) {
    return false;
  }
  if (!((exception_list == rhs.exception_list))) {
    return false;
  }
  if (!((exception_set == rhs.exception_set))) {
    return false;
  }
  if (!((exception_map == rhs.exception_map))) {
    return false;
  }
  if (!((req_exception_map == rhs.req_exception_map))) {
    return false;
  }
  if (!((enum_field == rhs.enum_field))) {
    return false;
  }
  if (!((enum_container == rhs.enum_container))) {
    return false;
  }
  if (!((a_struct == rhs.a_struct))) {
    return false;
  }
  if (!((a_set_struct == rhs.a_set_struct))) {
    return false;
  }
  if (!((a_union_list == rhs.a_union_list))) {
    return false;
  }
  if (!((union_typedef == rhs.union_typedef))) {
    return false;
  }
  if (!((a_union_typedef_list == rhs.a_union_typedef_list))) {
    return false;
  }
  return true;
}

const std::vector<int32_t>& AnException::get_exception_list() const& {
  return exception_list;
}

std::vector<int32_t> AnException::get_exception_list() && {
  return std::move(exception_list);
}

const std::set<int64_t>& AnException::get_exception_set() const& {
  return exception_set;
}

std::set<int64_t> AnException::get_exception_set() && {
  return std::move(exception_set);
}

const std::map<std::string, int32_t>& AnException::get_exception_map() const& {
  return exception_map;
}

std::map<std::string, int32_t> AnException::get_exception_map() && {
  return std::move(exception_map);
}

const std::map<std::string, int32_t>& AnException::get_req_exception_map() const& {
  return req_exception_map;
}

std::map<std::string, int32_t> AnException::get_req_exception_map() && {
  return std::move(req_exception_map);
}

const std::vector< ::some::valid::ns::MyEnumA>& AnException::get_enum_container() const& {
  return enum_container;
}

std::vector< ::some::valid::ns::MyEnumA> AnException::get_enum_container() && {
  return std::move(enum_container);
}

const  ::some::valid::ns::MyStruct& AnException::get_a_struct() const& {
  return a_struct;
}

 ::some::valid::ns::MyStruct AnException::get_a_struct() && {
  return std::move(a_struct);
}

const std::set< ::some::valid::ns::MyStruct>& AnException::get_a_set_struct() const& {
  return a_set_struct;
}

std::set< ::some::valid::ns::MyStruct> AnException::get_a_set_struct() && {
  return std::move(a_set_struct);
}

const std::vector< ::some::valid::ns::SimpleUnion>& AnException::get_a_union_list() const& {
  return a_union_list;
}

std::vector< ::some::valid::ns::SimpleUnion> AnException::get_a_union_list() && {
  return std::move(a_union_list);
}

const  ::some::valid::ns::unionTypeDef& AnException::get_union_typedef() const& {
  return union_typedef;
}

 ::some::valid::ns::unionTypeDef AnException::get_union_typedef() && {
  return std::move(union_typedef);
}

const std::vector< ::some::valid::ns::unionTypeDef>& AnException::get_a_union_typedef_list() const& {
  return a_union_typedef_list;
}

std::vector< ::some::valid::ns::unionTypeDef> AnException::get_a_union_typedef_list() && {
  return std::move(a_union_typedef_list);
}

void AnException::translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
  else if (_fname == "code") {
    fid = 1;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "req_code") {
    fid = 101;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "message2") {
    fid = 2;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "req_message") {
    fid = 102;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "exception_list") {
    fid = 3;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "exception_set") {
    fid = 4;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "exception_map") {
    fid = 5;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "req_exception_map") {
    fid = 105;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "enum_field") {
    fid = 6;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "enum_container") {
    fid = 7;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "a_struct") {
    fid = 8;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "a_set_struct") {
    fid = 9;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "a_union_list") {
    fid = 10;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "union_typedef") {
    fid = 11;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "a_union_typedef_list") {
    fid = 19;
    _ftype = apache::thrift::protocol::T_LIST;
  }
}

void swap(AnException& a, AnException& b) {
  using ::std::swap;
  swap(a.code, b.code);
  swap(a.req_code, b.req_code);
  swap(a.message2, b.message2);
  swap(a.req_message, b.req_message);
  swap(a.exception_list, b.exception_list);
  swap(a.exception_set, b.exception_set);
  swap(a.exception_map, b.exception_map);
  swap(a.req_exception_map, b.req_exception_map);
  swap(a.enum_field, b.enum_field);
  swap(a.enum_container, b.enum_container);
  swap(a.a_struct, b.a_struct);
  swap(a.a_set_struct, b.a_set_struct);
  swap(a.a_union_list, b.a_union_list);
  swap(a.union_typedef, b.union_typedef);
  swap(a.a_union_typedef_list, b.a_union_typedef_list);
  swap(a.__isset, b.__isset);
}

template uint32_t AnException::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t AnException::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t AnException::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t AnException::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t AnException::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t AnException::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t AnException::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t AnException::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t AnException::read<>(apache::thrift::SimpleJSONProtocolReader*);
template uint32_t AnException::write<>(apache::thrift::SimpleJSONProtocolWriter*) const;
template uint32_t AnException::serializedSize<>(apache::thrift::SimpleJSONProtocolWriter const*) const;
template uint32_t AnException::serializedSizeZC<>(apache::thrift::SimpleJSONProtocolWriter const*) const;

}}} // some::valid::ns
namespace some { namespace valid { namespace ns {

void AnotherException::__clear() {
  // clear all fields
  code = 0;
  req_code = 0;
  message = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  __isset.__clear();
}

bool AnotherException::operator==(const AnotherException& rhs) const {
  if (!((code == rhs.code))) {
    return false;
  }
  if (!((req_code == rhs.req_code))) {
    return false;
  }
  if (!((message == rhs.message))) {
    return false;
  }
  return true;
}

void AnotherException::translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
  else if (_fname == "code") {
    fid = 1;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "req_code") {
    fid = 101;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "message") {
    fid = 2;
    _ftype = apache::thrift::protocol::T_STRING;
  }
}

void swap(AnotherException& a, AnotherException& b) {
  using ::std::swap;
  swap(a.code, b.code);
  swap(a.req_code, b.req_code);
  swap(a.message, b.message);
  swap(a.__isset, b.__isset);
}

template uint32_t AnotherException::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t AnotherException::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t AnotherException::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t AnotherException::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t AnotherException::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t AnotherException::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t AnotherException::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t AnotherException::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t AnotherException::read<>(apache::thrift::SimpleJSONProtocolReader*);
template uint32_t AnotherException::write<>(apache::thrift::SimpleJSONProtocolWriter*) const;
template uint32_t AnotherException::serializedSize<>(apache::thrift::SimpleJSONProtocolWriter const*) const;
template uint32_t AnotherException::serializedSizeZC<>(apache::thrift::SimpleJSONProtocolWriter const*) const;

}}} // some::valid::ns
namespace some { namespace valid { namespace ns {

void containerStruct::__clear() {
  // clear all fields
  fieldA = 0;
  req_fieldA = 0;
  opt_fieldA = 0;
  fieldB.clear();
  req_fieldB.clear();
  opt_fieldB.clear();
  fieldC.clear();
  req_fieldC.clear();
  opt_fieldC.clear();
  fieldD = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  fieldE = apache::thrift::StringTraits< std::string>::fromStringLiteral("somestring");
  req_fieldE = apache::thrift::StringTraits< std::string>::fromStringLiteral("somestring");
  opt_fieldE = apache::thrift::StringTraits< std::string>::fromStringLiteral("somestring");
  fieldF.clear();
  fieldG.clear();
  fieldH.clear();
  fieldI = true;
  fieldJ.clear();
  fieldK.clear();
  fieldL.clear();
  fieldM.clear();
  fieldN = 0;
  fieldO.clear();
  fieldP.clear();
  fieldQ = static_cast< ::some::valid::ns::MyEnumA>(0);
  fieldR =  ::some::valid::ns::MyEnumA::fieldB;
  req_fieldR =  ::some::valid::ns::MyEnumA::fieldB;
  opt_fieldR =  ::some::valid::ns::MyEnumA::fieldB;
  fieldS =  ::some::valid::ns::MyEnumA::fieldB;
  fieldT.clear();
  fieldU.clear();
  ::apache::thrift::Cpp2Ops<  ::some::valid::ns::MyStruct>::clear(&fieldV);
  ::apache::thrift::Cpp2Ops<  ::some::valid::ns::MyStruct>::clear(&req_fieldV);
  ::apache::thrift::Cpp2Ops<  ::some::valid::ns::MyStruct>::clear(&opt_fieldV);
  fieldW.clear();
  ::apache::thrift::Cpp2Ops<  ::some::valid::ns::ComplexUnion>::clear(&fieldX);
  ::apache::thrift::Cpp2Ops<  ::some::valid::ns::ComplexUnion>::clear(&req_fieldX);
  ::apache::thrift::Cpp2Ops<  ::some::valid::ns::ComplexUnion>::clear(&opt_fieldX);
  fieldY.clear();
  fieldZ.clear();
  fieldAA.clear();
  fieldAB.clear();
  fieldAC =  ::some::valid::ns::MyEnumB::AField;
  fieldAD = static_cast< ::a::different::ns::AnEnum>(0);
  fieldAE.clear();
  __isset.__clear();
}

bool containerStruct::operator==(const containerStruct& rhs) const {
  if (!((fieldA == rhs.fieldA))) {
    return false;
  }
  if (!((req_fieldA == rhs.req_fieldA))) {
    return false;
  }
  if (__isset.opt_fieldA != rhs.__isset.opt_fieldA) {
    return false;
  }
  else if (__isset.opt_fieldA && !((opt_fieldA == rhs.opt_fieldA))) {
    return false;
  }
  if (!((fieldB == rhs.fieldB))) {
    return false;
  }
  if (!((req_fieldB == rhs.req_fieldB))) {
    return false;
  }
  if (__isset.opt_fieldB != rhs.__isset.opt_fieldB) {
    return false;
  }
  else if (__isset.opt_fieldB && !((opt_fieldB == rhs.opt_fieldB))) {
    return false;
  }
  if (!((fieldC == rhs.fieldC))) {
    return false;
  }
  if (!((req_fieldC == rhs.req_fieldC))) {
    return false;
  }
  if (__isset.opt_fieldC != rhs.__isset.opt_fieldC) {
    return false;
  }
  else if (__isset.opt_fieldC && !((opt_fieldC == rhs.opt_fieldC))) {
    return false;
  }
  if (!((fieldD == rhs.fieldD))) {
    return false;
  }
  if (!((fieldE == rhs.fieldE))) {
    return false;
  }
  if (!((req_fieldE == rhs.req_fieldE))) {
    return false;
  }
  if (__isset.opt_fieldE != rhs.__isset.opt_fieldE) {
    return false;
  }
  else if (__isset.opt_fieldE && !((opt_fieldE == rhs.opt_fieldE))) {
    return false;
  }
  if (!((fieldF == rhs.fieldF))) {
    return false;
  }
  if (!((fieldG == rhs.fieldG))) {
    return false;
  }
  if (!((fieldH == rhs.fieldH))) {
    return false;
  }
  if (!((fieldI == rhs.fieldI))) {
    return false;
  }
  if (!((fieldJ == rhs.fieldJ))) {
    return false;
  }
  if (!((fieldK == rhs.fieldK))) {
    return false;
  }
  if (!((fieldL == rhs.fieldL))) {
    return false;
  }
  if (!((fieldM == rhs.fieldM))) {
    return false;
  }
  if (!((fieldN == rhs.fieldN))) {
    return false;
  }
  if (!((fieldO == rhs.fieldO))) {
    return false;
  }
  if (!((fieldP == rhs.fieldP))) {
    return false;
  }
  if (!((fieldQ == rhs.fieldQ))) {
    return false;
  }
  if (!((fieldR == rhs.fieldR))) {
    return false;
  }
  if (!((req_fieldR == rhs.req_fieldR))) {
    return false;
  }
  if (__isset.opt_fieldR != rhs.__isset.opt_fieldR) {
    return false;
  }
  else if (__isset.opt_fieldR && !((opt_fieldR == rhs.opt_fieldR))) {
    return false;
  }
  if (!((fieldS == rhs.fieldS))) {
    return false;
  }
  if (!((fieldT == rhs.fieldT))) {
    return false;
  }
  if (!((fieldU == rhs.fieldU))) {
    return false;
  }
  if (!((fieldV == rhs.fieldV))) {
    return false;
  }
  if (!((req_fieldV == rhs.req_fieldV))) {
    return false;
  }
  if (__isset.opt_fieldV != rhs.__isset.opt_fieldV) {
    return false;
  }
  else if (__isset.opt_fieldV && !((opt_fieldV == rhs.opt_fieldV))) {
    return false;
  }
  if (!((fieldW == rhs.fieldW))) {
    return false;
  }
  if (!((fieldX == rhs.fieldX))) {
    return false;
  }
  if (!((req_fieldX == rhs.req_fieldX))) {
    return false;
  }
  if (__isset.opt_fieldX != rhs.__isset.opt_fieldX) {
    return false;
  }
  else if (__isset.opt_fieldX && !((opt_fieldX == rhs.opt_fieldX))) {
    return false;
  }
  if (!((fieldY == rhs.fieldY))) {
    return false;
  }
  if (!((fieldZ == rhs.fieldZ))) {
    return false;
  }
  if (!((fieldAA == rhs.fieldAA))) {
    return false;
  }
  if (!((fieldAB == rhs.fieldAB))) {
    return false;
  }
  if (!((fieldAC == rhs.fieldAC))) {
    return false;
  }
  if (!((fieldAD == rhs.fieldAD))) {
    return false;
  }
  if (!((fieldAE == rhs.fieldAE))) {
    return false;
  }
  return true;
}

const std::map<std::string, bool>& containerStruct::get_fieldB() const& {
  return fieldB;
}

std::map<std::string, bool> containerStruct::get_fieldB() && {
  return std::move(fieldB);
}

const std::map<std::string, bool>& containerStruct::get_req_fieldB() const& {
  return req_fieldB;
}

std::map<std::string, bool> containerStruct::get_req_fieldB() && {
  return std::move(req_fieldB);
}

const std::map<std::string, bool>* containerStruct::get_opt_fieldB() const& {
  return __isset.opt_fieldB ? std::addressof(opt_fieldB) : nullptr;
}

std::map<std::string, bool>* containerStruct::get_opt_fieldB() & {
  return __isset.opt_fieldB ? std::addressof(opt_fieldB) : nullptr;
}

const std::set<int32_t>& containerStruct::get_fieldC() const& {
  return fieldC;
}

std::set<int32_t> containerStruct::get_fieldC() && {
  return std::move(fieldC);
}

const std::set<int32_t>& containerStruct::get_req_fieldC() const& {
  return req_fieldC;
}

std::set<int32_t> containerStruct::get_req_fieldC() && {
  return std::move(req_fieldC);
}

const std::set<int32_t>* containerStruct::get_opt_fieldC() const& {
  return __isset.opt_fieldC ? std::addressof(opt_fieldC) : nullptr;
}

std::set<int32_t>* containerStruct::get_opt_fieldC() & {
  return __isset.opt_fieldC ? std::addressof(opt_fieldC) : nullptr;
}

const std::vector<std::vector<int32_t>>& containerStruct::get_fieldF() const& {
  return fieldF;
}

std::vector<std::vector<int32_t>> containerStruct::get_fieldF() && {
  return std::move(fieldF);
}

const std::map<std::string, std::map<std::string, std::map<std::string, int32_t>>>& containerStruct::get_fieldG() const& {
  return fieldG;
}

std::map<std::string, std::map<std::string, std::map<std::string, int32_t>>> containerStruct::get_fieldG() && {
  return std::move(fieldG);
}

const std::vector<std::set<int32_t>>& containerStruct::get_fieldH() const& {
  return fieldH;
}

std::vector<std::set<int32_t>> containerStruct::get_fieldH() && {
  return std::move(fieldH);
}

const std::map<std::string, std::vector<int32_t>>& containerStruct::get_fieldJ() const& {
  return fieldJ;
}

std::map<std::string, std::vector<int32_t>> containerStruct::get_fieldJ() && {
  return std::move(fieldJ);
}

const std::vector<std::vector<std::vector<std::vector<int32_t>>>>& containerStruct::get_fieldK() const& {
  return fieldK;
}

std::vector<std::vector<std::vector<std::vector<int32_t>>>> containerStruct::get_fieldK() && {
  return std::move(fieldK);
}

const std::set<std::set<std::set<bool>>>& containerStruct::get_fieldL() const& {
  return fieldL;
}

std::set<std::set<std::set<bool>>> containerStruct::get_fieldL() && {
  return std::move(fieldL);
}

const std::map<std::set<std::vector<int32_t>>, std::map<std::vector<std::set<std::string>>, std::string>>& containerStruct::get_fieldM() const& {
  return fieldM;
}

std::map<std::set<std::vector<int32_t>>, std::map<std::vector<std::set<std::string>>, std::string>> containerStruct::get_fieldM() && {
  return std::move(fieldM);
}

const  ::some::valid::ns::complexStructTypeDef& containerStruct::get_fieldO() const& {
  return fieldO;
}

 ::some::valid::ns::complexStructTypeDef containerStruct::get_fieldO() && {
  return std::move(fieldO);
}

const std::vector< ::some::valid::ns::mostComplexTypeDef>& containerStruct::get_fieldP() const& {
  return fieldP;
}

std::vector< ::some::valid::ns::mostComplexTypeDef> containerStruct::get_fieldP() && {
  return std::move(fieldP);
}

const std::vector< ::some::valid::ns::MyEnumA>& containerStruct::get_fieldT() const& {
  return fieldT;
}

std::vector< ::some::valid::ns::MyEnumA> containerStruct::get_fieldT() && {
  return std::move(fieldT);
}

const std::vector< ::some::valid::ns::MyEnumA>& containerStruct::get_fieldU() const& {
  return fieldU;
}

std::vector< ::some::valid::ns::MyEnumA> containerStruct::get_fieldU() && {
  return std::move(fieldU);
}

const  ::some::valid::ns::MyStruct& containerStruct::get_fieldV() const& {
  return fieldV;
}

 ::some::valid::ns::MyStruct containerStruct::get_fieldV() && {
  return std::move(fieldV);
}

const  ::some::valid::ns::MyStruct& containerStruct::get_req_fieldV() const& {
  return req_fieldV;
}

 ::some::valid::ns::MyStruct containerStruct::get_req_fieldV() && {
  return std::move(req_fieldV);
}

const  ::some::valid::ns::MyStruct* containerStruct::get_opt_fieldV() const& {
  return __isset.opt_fieldV ? std::addressof(opt_fieldV) : nullptr;
}

 ::some::valid::ns::MyStruct* containerStruct::get_opt_fieldV() & {
  return __isset.opt_fieldV ? std::addressof(opt_fieldV) : nullptr;
}

const std::set< ::some::valid::ns::MyStruct>& containerStruct::get_fieldW() const& {
  return fieldW;
}

std::set< ::some::valid::ns::MyStruct> containerStruct::get_fieldW() && {
  return std::move(fieldW);
}

const  ::some::valid::ns::ComplexUnion& containerStruct::get_fieldX() const& {
  return fieldX;
}

 ::some::valid::ns::ComplexUnion containerStruct::get_fieldX() && {
  return std::move(fieldX);
}

const  ::some::valid::ns::ComplexUnion& containerStruct::get_req_fieldX() const& {
  return req_fieldX;
}

 ::some::valid::ns::ComplexUnion containerStruct::get_req_fieldX() && {
  return std::move(req_fieldX);
}

const  ::some::valid::ns::ComplexUnion* containerStruct::get_opt_fieldX() const& {
  return __isset.opt_fieldX ? std::addressof(opt_fieldX) : nullptr;
}

 ::some::valid::ns::ComplexUnion* containerStruct::get_opt_fieldX() & {
  return __isset.opt_fieldX ? std::addressof(opt_fieldX) : nullptr;
}

const std::vector< ::some::valid::ns::ComplexUnion>& containerStruct::get_fieldY() const& {
  return fieldY;
}

std::vector< ::some::valid::ns::ComplexUnion> containerStruct::get_fieldY() && {
  return std::move(fieldY);
}

const  ::some::valid::ns::unionTypeDef& containerStruct::get_fieldZ() const& {
  return fieldZ;
}

 ::some::valid::ns::unionTypeDef containerStruct::get_fieldZ() && {
  return std::move(fieldZ);
}

const std::vector< ::some::valid::ns::unionTypeDef>& containerStruct::get_fieldAA() const& {
  return fieldAA;
}

std::vector< ::some::valid::ns::unionTypeDef> containerStruct::get_fieldAA() && {
  return std::move(fieldAA);
}

const std::map< ::some::valid::ns::IndirectionB,  ::some::valid::ns::IndirectionC>& containerStruct::get_fieldAB() const& {
  return fieldAB;
}

std::map< ::some::valid::ns::IndirectionB,  ::some::valid::ns::IndirectionC> containerStruct::get_fieldAB() && {
  return std::move(fieldAB);
}

const std::map<std::string, int32_t>& containerStruct::get_fieldAE() const& {
  return fieldAE;
}

std::map<std::string, int32_t> containerStruct::get_fieldAE() && {
  return std::move(fieldAE);
}

void containerStruct::translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
  else if (_fname == "fieldA") {
    fid = 1;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "req_fieldA") {
    fid = 101;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "opt_fieldA") {
    fid = 201;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "fieldB") {
    fid = 2;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "req_fieldB") {
    fid = 102;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "opt_fieldB") {
    fid = 202;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "fieldC") {
    fid = 3;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "req_fieldC") {
    fid = 103;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "opt_fieldC") {
    fid = 203;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "fieldD") {
    fid = 4;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "fieldE") {
    fid = 5;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "req_fieldE") {
    fid = 105;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "opt_fieldE") {
    fid = 205;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "fieldF") {
    fid = 6;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "fieldG") {
    fid = 7;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "fieldH") {
    fid = 8;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "fieldI") {
    fid = 9;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "fieldJ") {
    fid = 10;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "fieldK") {
    fid = 11;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "fieldL") {
    fid = 12;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "fieldM") {
    fid = 13;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "fieldN") {
    fid = 14;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "fieldO") {
    fid = 15;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "fieldP") {
    fid = 16;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "fieldQ") {
    fid = 17;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "fieldR") {
    fid = 18;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "req_fieldR") {
    fid = 118;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "opt_fieldR") {
    fid = 218;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "fieldS") {
    fid = 19;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "fieldT") {
    fid = 21;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "fieldU") {
    fid = 22;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "fieldV") {
    fid = 23;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "req_fieldV") {
    fid = 123;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "opt_fieldV") {
    fid = 223;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "fieldW") {
    fid = 24;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "fieldX") {
    fid = 25;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "req_fieldX") {
    fid = 125;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "opt_fieldX") {
    fid = 225;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "fieldY") {
    fid = 26;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "fieldZ") {
    fid = 27;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "fieldAA") {
    fid = 28;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "fieldAB") {
    fid = 29;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "fieldAC") {
    fid = 30;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "fieldAD") {
    fid = 31;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "fieldAE") {
    fid = 32;
    _ftype = apache::thrift::protocol::T_MAP;
  }
}

void swap(containerStruct& a, containerStruct& b) {
  using ::std::swap;
  swap(a.fieldA, b.fieldA);
  swap(a.req_fieldA, b.req_fieldA);
  swap(a.opt_fieldA, b.opt_fieldA);
  swap(a.fieldB, b.fieldB);
  swap(a.req_fieldB, b.req_fieldB);
  swap(a.opt_fieldB, b.opt_fieldB);
  swap(a.fieldC, b.fieldC);
  swap(a.req_fieldC, b.req_fieldC);
  swap(a.opt_fieldC, b.opt_fieldC);
  swap(a.fieldD, b.fieldD);
  swap(a.fieldE, b.fieldE);
  swap(a.req_fieldE, b.req_fieldE);
  swap(a.opt_fieldE, b.opt_fieldE);
  swap(a.fieldF, b.fieldF);
  swap(a.fieldG, b.fieldG);
  swap(a.fieldH, b.fieldH);
  swap(a.fieldI, b.fieldI);
  swap(a.fieldJ, b.fieldJ);
  swap(a.fieldK, b.fieldK);
  swap(a.fieldL, b.fieldL);
  swap(a.fieldM, b.fieldM);
  swap(a.fieldN, b.fieldN);
  swap(a.fieldO, b.fieldO);
  swap(a.fieldP, b.fieldP);
  swap(a.fieldQ, b.fieldQ);
  swap(a.fieldR, b.fieldR);
  swap(a.req_fieldR, b.req_fieldR);
  swap(a.opt_fieldR, b.opt_fieldR);
  swap(a.fieldS, b.fieldS);
  swap(a.fieldT, b.fieldT);
  swap(a.fieldU, b.fieldU);
  swap(a.fieldV, b.fieldV);
  swap(a.req_fieldV, b.req_fieldV);
  swap(a.opt_fieldV, b.opt_fieldV);
  swap(a.fieldW, b.fieldW);
  swap(a.fieldX, b.fieldX);
  swap(a.req_fieldX, b.req_fieldX);
  swap(a.opt_fieldX, b.opt_fieldX);
  swap(a.fieldY, b.fieldY);
  swap(a.fieldZ, b.fieldZ);
  swap(a.fieldAA, b.fieldAA);
  swap(a.fieldAB, b.fieldAB);
  swap(a.fieldAC, b.fieldAC);
  swap(a.fieldAD, b.fieldAD);
  swap(a.fieldAE, b.fieldAE);
  swap(a.__isset, b.__isset);
}

template uint32_t containerStruct::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t containerStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t containerStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t containerStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t containerStruct::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t containerStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t containerStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t containerStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t containerStruct::read<>(apache::thrift::SimpleJSONProtocolReader*);
template uint32_t containerStruct::write<>(apache::thrift::SimpleJSONProtocolWriter*) const;
template uint32_t containerStruct::serializedSize<>(apache::thrift::SimpleJSONProtocolWriter const*) const;
template uint32_t containerStruct::serializedSizeZC<>(apache::thrift::SimpleJSONProtocolWriter const*) const;

}}} // some::valid::ns
namespace some { namespace valid { namespace ns {

MyIncludedStruct::MyIncludedStruct(const MyIncludedStruct& src) {
  MyIncludedInt = src.MyIncludedInt;
  __isset.MyIncludedInt = src.__isset.MyIncludedInt;
  MyIncludedStruct = src.MyIncludedStruct;
  __isset.MyIncludedStruct = src.__isset.MyIncludedStruct;
  if (src.ARefField) ARefField.reset(new  ::some::valid::ns::AStruct(*src.ARefField));
  ARequiredField = src.ARequiredField;
}

MyIncludedStruct& MyIncludedStruct::operator=(const MyIncludedStruct& src) {
  MyIncludedStruct tmp(src);
  swap(*this, tmp);
  return *this;
}

void MyIncludedStruct::__clear() {
  // clear all fields
  MyIncludedInt = 42LL;
  ::apache::thrift::Cpp2Ops<  ::some::valid::ns::AStruct>::clear(&MyIncludedStruct);
  if (ARefField) ::apache::thrift::Cpp2Ops<  ::some::valid::ns::AStruct>::clear(ARefField.get());
  ::apache::thrift::Cpp2Ops<  ::some::valid::ns::AStruct>::clear(&ARequiredField);
  __isset.__clear();
}

bool MyIncludedStruct::operator==(const MyIncludedStruct& rhs) const {
  if (!((MyIncludedInt == rhs.MyIncludedInt))) {
    return false;
  }
  if (!((MyIncludedStruct == rhs.MyIncludedStruct))) {
    return false;
  }
  if (!(((ARefField && rhs.ARefField && *ARefField == *rhs.ARefField) ||(!ARefField && !rhs.ARefField)))) {
    return false;
  }
  if (!((ARequiredField == rhs.ARequiredField))) {
    return false;
  }
  return true;
}

const  ::some::valid::ns::AStruct& MyIncludedStruct::get_MyIncludedStruct() const& {
  return MyIncludedStruct;
}

 ::some::valid::ns::AStruct MyIncludedStruct::get_MyIncludedStruct() && {
  return std::move(MyIncludedStruct);
}

const  ::some::valid::ns::AStruct& MyIncludedStruct::get_ARequiredField() const& {
  return ARequiredField;
}

 ::some::valid::ns::AStruct MyIncludedStruct::get_ARequiredField() && {
  return std::move(ARequiredField);
}

void MyIncludedStruct::translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
  else if (_fname == "MyIncludedInt") {
    fid = 1;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "MyIncludedStruct") {
    fid = 2;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "ARefField") {
    fid = 3;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "ARequiredField") {
    fid = 4;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
}

void swap(MyIncludedStruct& a, MyIncludedStruct& b) {
  using ::std::swap;
  swap(a.MyIncludedInt, b.MyIncludedInt);
  swap(a.MyIncludedStruct, b.MyIncludedStruct);
  swap(a.ARefField, b.ARefField);
  swap(a.ARequiredField, b.ARequiredField);
  swap(a.__isset, b.__isset);
}

template uint32_t MyIncludedStruct::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t MyIncludedStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t MyIncludedStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t MyIncludedStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t MyIncludedStruct::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t MyIncludedStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t MyIncludedStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t MyIncludedStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t MyIncludedStruct::read<>(apache::thrift::SimpleJSONProtocolReader*);
template uint32_t MyIncludedStruct::write<>(apache::thrift::SimpleJSONProtocolWriter*) const;
template uint32_t MyIncludedStruct::serializedSize<>(apache::thrift::SimpleJSONProtocolWriter const*) const;
template uint32_t MyIncludedStruct::serializedSizeZC<>(apache::thrift::SimpleJSONProtocolWriter const*) const;

}}} // some::valid::ns
namespace some { namespace valid { namespace ns {

void AnnotatedStruct::__clear() {
  // clear all fields
  ::apache::thrift::Cpp2Ops<  ::some::valid::ns::containerStruct>::clear(&no_annotation);
  if (cpp_unique_ref) ::apache::thrift::Cpp2Ops<  ::some::valid::ns::containerStruct>::clear(cpp_unique_ref.get());
  if (cpp2_unique_ref) ::apache::thrift::Cpp2Ops<  ::some::valid::ns::containerStruct>::clear(cpp2_unique_ref.get());
  container_with_ref.reset(new typename decltype(container_with_ref)::element_type());
  if (req_cpp_unique_ref) ::apache::thrift::Cpp2Ops<  ::some::valid::ns::containerStruct>::clear(req_cpp_unique_ref.get());
  if (req_cpp2_unique_ref) ::apache::thrift::Cpp2Ops<  ::some::valid::ns::containerStruct>::clear(req_cpp2_unique_ref.get());
  req_container_with_ref.reset(new typename decltype(req_container_with_ref)::element_type());
  if (opt_cpp_unique_ref) ::apache::thrift::Cpp2Ops<  ::some::valid::ns::containerStruct>::clear(opt_cpp_unique_ref.get());
  if (opt_cpp2_unique_ref) ::apache::thrift::Cpp2Ops<  ::some::valid::ns::containerStruct>::clear(opt_cpp2_unique_ref.get());
  opt_container_with_ref.reset(new typename decltype(opt_container_with_ref)::element_type());
  if (ref_type_unique) ::apache::thrift::Cpp2Ops<  ::some::valid::ns::containerStruct>::clear(ref_type_unique.get());
  if (ref_type_shared) ::apache::thrift::Cpp2Ops<  ::some::valid::ns::containerStruct>::clear(ref_type_shared.get());
  ref_type_const.reset(new typename decltype(ref_type_const)::element_type());
  if (req_ref_type_shared) ::apache::thrift::Cpp2Ops<  ::some::valid::ns::containerStruct>::clear(req_ref_type_shared.get());
  req_ref_type_const.reset();
  req_ref_type_unique.reset(new typename decltype(req_ref_type_unique)::element_type());
  opt_ref_type_const.reset();
  if (opt_ref_type_unique) ::apache::thrift::Cpp2Ops<  ::some::valid::ns::containerStruct>::clear(opt_ref_type_unique.get());
  opt_ref_type_shared.reset(new typename decltype(opt_ref_type_shared)::element_type());
  base_type = 0;
  list_type.clear();
  set_type.clear();
  map_type.clear();
  map_struct_type.clear();
  iobuf_type = apache::thrift::StringTraits< folly::IOBuf>::fromStringLiteral("");
  iobuf_ptr = apache::thrift::StringTraits< std::unique_ptr<folly::IOBuf>>::fromStringLiteral("");
  list_i32_template.clear();
  list_string_template.clear();
  set_template.clear();
  map_template.clear();
  typedef_list_template.clear();
  typedef_deque_template.clear();
  typedef_set_template.clear();
  typedef_map_template.clear();
  indirection_a.value = 0;
  indirection_b.clear();
  indirection_c.clear();
  iobuf_type_val = apache::thrift::StringTraits< folly::IOBuf>::fromStringLiteral("value");
  iobuf_ptr_val = apache::thrift::StringTraits< std::unique_ptr<folly::IOBuf>>::fromStringLiteral("value2");
  ::apache::thrift::Cpp2Ops<  ::some::valid::ns::containerStruct>::clear(&struct_struct);
  __isset.__clear();
}

bool AnnotatedStruct::operator==(const AnnotatedStruct& rhs) const {
  if (!((no_annotation == rhs.no_annotation))) {
    return false;
  }
  if (!(((cpp_unique_ref && rhs.cpp_unique_ref && *cpp_unique_ref == *rhs.cpp_unique_ref) ||(!cpp_unique_ref && !rhs.cpp_unique_ref)))) {
    return false;
  }
  if (!(((cpp2_unique_ref && rhs.cpp2_unique_ref && *cpp2_unique_ref == *rhs.cpp2_unique_ref) ||(!cpp2_unique_ref && !rhs.cpp2_unique_ref)))) {
    return false;
  }
  if (!(((container_with_ref && rhs.container_with_ref && *container_with_ref == *rhs.container_with_ref) ||(!container_with_ref && !rhs.container_with_ref)))) {
    return false;
  }
  if (!(((req_cpp_unique_ref && rhs.req_cpp_unique_ref && *req_cpp_unique_ref == *rhs.req_cpp_unique_ref) ||(!req_cpp_unique_ref && !rhs.req_cpp_unique_ref)))) {
    return false;
  }
  if (!(((req_cpp2_unique_ref && rhs.req_cpp2_unique_ref && *req_cpp2_unique_ref == *rhs.req_cpp2_unique_ref) ||(!req_cpp2_unique_ref && !rhs.req_cpp2_unique_ref)))) {
    return false;
  }
  if (!(((req_container_with_ref && rhs.req_container_with_ref && *req_container_with_ref == *rhs.req_container_with_ref) ||(!req_container_with_ref && !rhs.req_container_with_ref)))) {
    return false;
  }
  if (!(((opt_cpp_unique_ref && rhs.opt_cpp_unique_ref && *opt_cpp_unique_ref == *rhs.opt_cpp_unique_ref) ||(!opt_cpp_unique_ref && !rhs.opt_cpp_unique_ref)))) {
    return false;
  }
  if (!(((opt_cpp2_unique_ref && rhs.opt_cpp2_unique_ref && *opt_cpp2_unique_ref == *rhs.opt_cpp2_unique_ref) ||(!opt_cpp2_unique_ref && !rhs.opt_cpp2_unique_ref)))) {
    return false;
  }
  if (!(((opt_container_with_ref && rhs.opt_container_with_ref && *opt_container_with_ref == *rhs.opt_container_with_ref) ||(!opt_container_with_ref && !rhs.opt_container_with_ref)))) {
    return false;
  }
  if (!(((ref_type_unique && rhs.ref_type_unique && *ref_type_unique == *rhs.ref_type_unique) ||(!ref_type_unique && !rhs.ref_type_unique)))) {
    return false;
  }
  if (!(((ref_type_shared && rhs.ref_type_shared && *ref_type_shared == *rhs.ref_type_shared) ||(!ref_type_shared && !rhs.ref_type_shared)))) {
    return false;
  }
  if (!(((ref_type_const && rhs.ref_type_const && *ref_type_const == *rhs.ref_type_const) ||(!ref_type_const && !rhs.ref_type_const)))) {
    return false;
  }
  if (!(((req_ref_type_shared && rhs.req_ref_type_shared && *req_ref_type_shared == *rhs.req_ref_type_shared) ||(!req_ref_type_shared && !rhs.req_ref_type_shared)))) {
    return false;
  }
  if (!(((req_ref_type_const && rhs.req_ref_type_const && *req_ref_type_const == *rhs.req_ref_type_const) ||(!req_ref_type_const && !rhs.req_ref_type_const)))) {
    return false;
  }
  if (!(((req_ref_type_unique && rhs.req_ref_type_unique && *req_ref_type_unique == *rhs.req_ref_type_unique) ||(!req_ref_type_unique && !rhs.req_ref_type_unique)))) {
    return false;
  }
  if (!(((opt_ref_type_const && rhs.opt_ref_type_const && *opt_ref_type_const == *rhs.opt_ref_type_const) ||(!opt_ref_type_const && !rhs.opt_ref_type_const)))) {
    return false;
  }
  if (!(((opt_ref_type_unique && rhs.opt_ref_type_unique && *opt_ref_type_unique == *rhs.opt_ref_type_unique) ||(!opt_ref_type_unique && !rhs.opt_ref_type_unique)))) {
    return false;
  }
  if (!(((opt_ref_type_shared && rhs.opt_ref_type_shared && *opt_ref_type_shared == *rhs.opt_ref_type_shared) ||(!opt_ref_type_shared && !rhs.opt_ref_type_shared)))) {
    return false;
  }
  if (!((base_type == rhs.base_type))) {
    return false;
  }
  if (!((list_type == rhs.list_type))) {
    return false;
  }
  if (!((set_type == rhs.set_type))) {
    return false;
  }
  if (!((map_type == rhs.map_type))) {
    return false;
  }
  if (!((map_struct_type == rhs.map_struct_type))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<folly::IOBuf>::isEqual(iobuf_type, rhs.iobuf_type))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::unique_ptr<folly::IOBuf>>::isEqual(iobuf_ptr, rhs.iobuf_ptr))) {
    return false;
  }
  if (!((list_i32_template == rhs.list_i32_template))) {
    return false;
  }
  if (!((list_string_template == rhs.list_string_template))) {
    return false;
  }
  if (!((set_template == rhs.set_template))) {
    return false;
  }
  if (!((map_template == rhs.map_template))) {
    return false;
  }
  if (!((typedef_list_template == rhs.typedef_list_template))) {
    return false;
  }
  if (!((typedef_deque_template == rhs.typedef_deque_template))) {
    return false;
  }
  if (!((typedef_set_template == rhs.typedef_set_template))) {
    return false;
  }
  if (!((typedef_map_template == rhs.typedef_map_template))) {
    return false;
  }
  if (!((indirection_a == rhs.indirection_a))) {
    return false;
  }
  if (!((indirection_b == rhs.indirection_b))) {
    return false;
  }
  if (!((indirection_c == rhs.indirection_c))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<folly::IOBuf>::isEqual(iobuf_type_val, rhs.iobuf_type_val))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::unique_ptr<folly::IOBuf>>::isEqual(iobuf_ptr_val, rhs.iobuf_ptr_val))) {
    return false;
  }
  if (!((struct_struct == rhs.struct_struct))) {
    return false;
  }
  return true;
}

const  ::some::valid::ns::containerStruct& AnnotatedStruct::get_no_annotation() const& {
  return no_annotation;
}

 ::some::valid::ns::containerStruct AnnotatedStruct::get_no_annotation() && {
  return std::move(no_annotation);
}

const  ::some::valid::ns::FollySmallVectorI64& AnnotatedStruct::get_list_type() const& {
  return list_type;
}

 ::some::valid::ns::FollySmallVectorI64 AnnotatedStruct::get_list_type() && {
  return std::move(list_type);
}

const  ::some::valid::ns::SortedVectorSetString& AnnotatedStruct::get_set_type() const& {
  return set_type;
}

 ::some::valid::ns::SortedVectorSetString AnnotatedStruct::get_set_type() && {
  return std::move(set_type);
}

const  ::some::valid::ns::FakeMap& AnnotatedStruct::get_map_type() const& {
  return map_type;
}

 ::some::valid::ns::FakeMap AnnotatedStruct::get_map_type() && {
  return std::move(map_type);
}

const  ::some::valid::ns::UnorderedMapStruct& AnnotatedStruct::get_map_struct_type() const& {
  return map_struct_type;
}

 ::some::valid::ns::UnorderedMapStruct AnnotatedStruct::get_map_struct_type() && {
  return std::move(map_struct_type);
}

const std::list<int32_t>& AnnotatedStruct::get_list_i32_template() const& {
  return list_i32_template;
}

std::list<int32_t> AnnotatedStruct::get_list_i32_template() && {
  return std::move(list_i32_template);
}

const std::deque<std::string>& AnnotatedStruct::get_list_string_template() const& {
  return list_string_template;
}

std::deque<std::string> AnnotatedStruct::get_list_string_template() && {
  return std::move(list_string_template);
}

const folly::sorted_vector_set<std::string>& AnnotatedStruct::get_set_template() const& {
  return set_template;
}

folly::sorted_vector_set<std::string> AnnotatedStruct::get_set_template() && {
  return std::move(set_template);
}

const folly::sorted_vector_map<int64_t, std::string>& AnnotatedStruct::get_map_template() const& {
  return map_template;
}

folly::sorted_vector_map<int64_t, std::string> AnnotatedStruct::get_map_template() && {
  return std::move(map_template);
}

const  ::some::valid::ns::std_list& AnnotatedStruct::get_typedef_list_template() const& {
  return typedef_list_template;
}

 ::some::valid::ns::std_list AnnotatedStruct::get_typedef_list_template() && {
  return std::move(typedef_list_template);
}

const  ::some::valid::ns::std_deque& AnnotatedStruct::get_typedef_deque_template() const& {
  return typedef_deque_template;
}

 ::some::valid::ns::std_deque AnnotatedStruct::get_typedef_deque_template() && {
  return std::move(typedef_deque_template);
}

const  ::some::valid::ns::folly_set& AnnotatedStruct::get_typedef_set_template() const& {
  return typedef_set_template;
}

 ::some::valid::ns::folly_set AnnotatedStruct::get_typedef_set_template() && {
  return std::move(typedef_set_template);
}

const  ::some::valid::ns::folly_map& AnnotatedStruct::get_typedef_map_template() const& {
  return typedef_map_template;
}

 ::some::valid::ns::folly_map AnnotatedStruct::get_typedef_map_template() && {
  return std::move(typedef_map_template);
}

const std::vector< ::some::valid::ns::IndirectionB>& AnnotatedStruct::get_indirection_b() const& {
  return indirection_b;
}

std::vector< ::some::valid::ns::IndirectionB> AnnotatedStruct::get_indirection_b() && {
  return std::move(indirection_b);
}

const std::set< ::some::valid::ns::IndirectionC>& AnnotatedStruct::get_indirection_c() const& {
  return indirection_c;
}

std::set< ::some::valid::ns::IndirectionC> AnnotatedStruct::get_indirection_c() && {
  return std::move(indirection_c);
}

const  ::some::valid::ns::containerStruct& AnnotatedStruct::get_struct_struct() const& {
  return struct_struct;
}

 ::some::valid::ns::containerStruct AnnotatedStruct::get_struct_struct() && {
  return std::move(struct_struct);
}

void AnnotatedStruct::translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
  else if (_fname == "no_annotation") {
    fid = 1;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "cpp_unique_ref") {
    fid = 2;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "cpp2_unique_ref") {
    fid = 3;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "container_with_ref") {
    fid = 4;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "req_cpp_unique_ref") {
    fid = 5;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "req_cpp2_unique_ref") {
    fid = 6;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "req_container_with_ref") {
    fid = 7;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "opt_cpp_unique_ref") {
    fid = 8;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "opt_cpp2_unique_ref") {
    fid = 9;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "opt_container_with_ref") {
    fid = 10;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "ref_type_unique") {
    fid = 11;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "ref_type_shared") {
    fid = 12;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "ref_type_const") {
    fid = 13;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "req_ref_type_shared") {
    fid = 14;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "req_ref_type_const") {
    fid = 15;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "req_ref_type_unique") {
    fid = 16;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "opt_ref_type_const") {
    fid = 17;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "opt_ref_type_unique") {
    fid = 18;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "opt_ref_type_shared") {
    fid = 19;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "base_type") {
    fid = 20;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "list_type") {
    fid = 21;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "set_type") {
    fid = 22;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "map_type") {
    fid = 23;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "map_struct_type") {
    fid = 24;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "iobuf_type") {
    fid = 25;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "iobuf_ptr") {
    fid = 26;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "list_i32_template") {
    fid = 27;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "list_string_template") {
    fid = 28;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "set_template") {
    fid = 29;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "map_template") {
    fid = 30;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "typedef_list_template") {
    fid = 31;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "typedef_deque_template") {
    fid = 32;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "typedef_set_template") {
    fid = 33;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "typedef_map_template") {
    fid = 34;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "indirection_a") {
    fid = 35;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "indirection_b") {
    fid = 36;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "indirection_c") {
    fid = 37;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "iobuf_type_val") {
    fid = 38;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "iobuf_ptr_val") {
    fid = 39;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "struct_struct") {
    fid = 40;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
}

void swap(AnnotatedStruct& a, AnnotatedStruct& b) {
  using ::std::swap;
  swap(a.no_annotation, b.no_annotation);
  swap(a.cpp_unique_ref, b.cpp_unique_ref);
  swap(a.cpp2_unique_ref, b.cpp2_unique_ref);
  swap(a.container_with_ref, b.container_with_ref);
  swap(a.req_cpp_unique_ref, b.req_cpp_unique_ref);
  swap(a.req_cpp2_unique_ref, b.req_cpp2_unique_ref);
  swap(a.req_container_with_ref, b.req_container_with_ref);
  swap(a.opt_cpp_unique_ref, b.opt_cpp_unique_ref);
  swap(a.opt_cpp2_unique_ref, b.opt_cpp2_unique_ref);
  swap(a.opt_container_with_ref, b.opt_container_with_ref);
  swap(a.ref_type_unique, b.ref_type_unique);
  swap(a.ref_type_shared, b.ref_type_shared);
  swap(a.ref_type_const, b.ref_type_const);
  swap(a.req_ref_type_shared, b.req_ref_type_shared);
  swap(a.req_ref_type_const, b.req_ref_type_const);
  swap(a.req_ref_type_unique, b.req_ref_type_unique);
  swap(a.opt_ref_type_const, b.opt_ref_type_const);
  swap(a.opt_ref_type_unique, b.opt_ref_type_unique);
  swap(a.opt_ref_type_shared, b.opt_ref_type_shared);
  swap(a.base_type, b.base_type);
  swap(a.list_type, b.list_type);
  swap(a.set_type, b.set_type);
  swap(a.map_type, b.map_type);
  swap(a.map_struct_type, b.map_struct_type);
  swap(a.iobuf_type, b.iobuf_type);
  swap(a.iobuf_ptr, b.iobuf_ptr);
  swap(a.list_i32_template, b.list_i32_template);
  swap(a.list_string_template, b.list_string_template);
  swap(a.set_template, b.set_template);
  swap(a.map_template, b.map_template);
  swap(a.typedef_list_template, b.typedef_list_template);
  swap(a.typedef_deque_template, b.typedef_deque_template);
  swap(a.typedef_set_template, b.typedef_set_template);
  swap(a.typedef_map_template, b.typedef_map_template);
  swap(a.indirection_a, b.indirection_a);
  swap(a.indirection_b, b.indirection_b);
  swap(a.indirection_c, b.indirection_c);
  swap(a.iobuf_type_val, b.iobuf_type_val);
  swap(a.iobuf_ptr_val, b.iobuf_ptr_val);
  swap(a.struct_struct, b.struct_struct);
  swap(a.__isset, b.__isset);
}

template uint32_t AnnotatedStruct::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t AnnotatedStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t AnnotatedStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t AnnotatedStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t AnnotatedStruct::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t AnnotatedStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t AnnotatedStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t AnnotatedStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t AnnotatedStruct::read<>(apache::thrift::SimpleJSONProtocolReader*);
template uint32_t AnnotatedStruct::write<>(apache::thrift::SimpleJSONProtocolWriter*) const;
template uint32_t AnnotatedStruct::serializedSize<>(apache::thrift::SimpleJSONProtocolWriter const*) const;
template uint32_t AnnotatedStruct::serializedSizeZC<>(apache::thrift::SimpleJSONProtocolWriter const*) const;

}}} // some::valid::ns

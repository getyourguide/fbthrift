/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#pragma once

#include <folly/io/Cursor.h>
#include <folly/io/IOBuf.h>
#include <thrift/lib/cpp/TApplicationException.h>
#include <thrift/lib/cpp2/GeneratedHeaderHelper.h>
#include <thrift/lib/cpp2/Thrift.h>
#include <thrift/lib/cpp2/protocol/Protocol.h>

#include "includes_types.h"
#include <folly/small_vector.h>

// BEGIN declare_enums
namespace some { namespace valid { namespace ns {

enum class MyEnumA {
  fieldA = 1,
  fieldB = 2,
  fieldC = 4
};

using _MyEnumA_EnumMapFactory = apache::thrift::detail::TEnumMapFactory<MyEnumA, MyEnumA>;
extern const _MyEnumA_EnumMapFactory::ValuesToNamesMapType _MyEnumA_VALUES_TO_NAMES;
extern const _MyEnumA_EnumMapFactory::NamesToValuesMapType _MyEnumA_NAMES_TO_VALUES;



enum class AnnotatedEnum : std::uint32_t {
  FIELDA = 2,
  FIELDB = 4,
  FIELDC = 9
};

using _AnnotatedEnum_EnumMapFactory = apache::thrift::detail::TEnumMapFactory<AnnotatedEnum, AnnotatedEnum>;
extern const _AnnotatedEnum_EnumMapFactory::ValuesToNamesMapType _AnnotatedEnum_VALUES_TO_NAMES;
extern const _AnnotatedEnum_EnumMapFactory::NamesToValuesMapType _AnnotatedEnum_NAMES_TO_VALUES;

inline constexpr AnnotatedEnum operator&(AnnotatedEnum a, AnnotatedEnum b) {
  using E = AnnotatedEnum;
  using U = std::underlying_type_t<E>;
  return static_cast<E>(static_cast<U>(a) & static_cast<U>(b));
}
#if __cplusplus >= 201402L

inline constexpr AnnotatedEnum& operator&=(AnnotatedEnum& a, AnnotatedEnum b) {
  return a = a & b;
}
#else

inline AnnotatedEnum& operator&=(AnnotatedEnum& a, AnnotatedEnum b) {
  return a = a & b;
}
#endif

inline constexpr AnnotatedEnum operator|(AnnotatedEnum a, AnnotatedEnum b) {
  using E = AnnotatedEnum;
  using U = std::underlying_type_t<E>;
  return static_cast<E>(static_cast<U>(a) | static_cast<U>(b));
}
#if __cplusplus >= 201402L

inline constexpr AnnotatedEnum& operator|=(AnnotatedEnum& a, AnnotatedEnum b) {
  return a = a | b;
}
#else

inline AnnotatedEnum& operator|=(AnnotatedEnum& a, AnnotatedEnum b) {
  return a = a | b;
}
#endif

inline constexpr AnnotatedEnum operator^(AnnotatedEnum a, AnnotatedEnum b) {
  using E = AnnotatedEnum;
  using U = std::underlying_type_t<E>;
  return static_cast<E>(static_cast<U>(a) ^ static_cast<U>(b));
}
#if __cplusplus >= 201402L

inline constexpr AnnotatedEnum& operator^=(AnnotatedEnum& a, AnnotatedEnum b) {
  return a = a ^ b;
}
#else

inline AnnotatedEnum& operator^=(AnnotatedEnum& a, AnnotatedEnum b) {
  return a = a ^ b;
}
#endif

inline constexpr AnnotatedEnum operator~(AnnotatedEnum a) {
  using E = AnnotatedEnum;
  using U = std::underlying_type_t<E>;
  return static_cast<E>(~static_cast<U>(a));
}

enum class AnnotatedEnum2 : short {
  FIELDA = 2,
  FIELDB = 4,
  FIELDC = 9
};

using _AnnotatedEnum2_EnumMapFactory = apache::thrift::detail::TEnumMapFactory<AnnotatedEnum2, AnnotatedEnum2>;
extern const _AnnotatedEnum2_EnumMapFactory::ValuesToNamesMapType _AnnotatedEnum2_VALUES_TO_NAMES;
extern const _AnnotatedEnum2_EnumMapFactory::NamesToValuesMapType _AnnotatedEnum2_NAMES_TO_VALUES;

inline constexpr AnnotatedEnum2 operator&(AnnotatedEnum2 a, AnnotatedEnum2 b) {
  using E = AnnotatedEnum2;
  using U = std::underlying_type_t<E>;
  return static_cast<E>(static_cast<U>(a) & static_cast<U>(b));
}
#if __cplusplus >= 201402L

inline constexpr AnnotatedEnum2& operator&=(AnnotatedEnum2& a, AnnotatedEnum2 b) {
  return a = a & b;
}
#else

inline AnnotatedEnum2& operator&=(AnnotatedEnum2& a, AnnotatedEnum2 b) {
  return a = a & b;
}
#endif

inline constexpr AnnotatedEnum2 operator|(AnnotatedEnum2 a, AnnotatedEnum2 b) {
  using E = AnnotatedEnum2;
  using U = std::underlying_type_t<E>;
  return static_cast<E>(static_cast<U>(a) | static_cast<U>(b));
}
#if __cplusplus >= 201402L

inline constexpr AnnotatedEnum2& operator|=(AnnotatedEnum2& a, AnnotatedEnum2 b) {
  return a = a | b;
}
#else

inline AnnotatedEnum2& operator|=(AnnotatedEnum2& a, AnnotatedEnum2 b) {
  return a = a | b;
}
#endif

inline constexpr AnnotatedEnum2 operator^(AnnotatedEnum2 a, AnnotatedEnum2 b) {
  using E = AnnotatedEnum2;
  using U = std::underlying_type_t<E>;
  return static_cast<E>(static_cast<U>(a) ^ static_cast<U>(b));
}
#if __cplusplus >= 201402L

inline constexpr AnnotatedEnum2& operator^=(AnnotatedEnum2& a, AnnotatedEnum2 b) {
  return a = a ^ b;
}
#else

inline AnnotatedEnum2& operator^=(AnnotatedEnum2& a, AnnotatedEnum2 b) {
  return a = a ^ b;
}
#endif

inline constexpr AnnotatedEnum2 operator~(AnnotatedEnum2 a) {
  using E = AnnotatedEnum2;
  using U = std::underlying_type_t<E>;
  return static_cast<E>(~static_cast<U>(a));
}

enum class MyEnumB {
  AField = 0
};

using _MyEnumB_EnumMapFactory = apache::thrift::detail::TEnumMapFactory<MyEnumB, MyEnumB>;
extern const _MyEnumB_EnumMapFactory::ValuesToNamesMapType _MyEnumB_VALUES_TO_NAMES;
extern const _MyEnumB_EnumMapFactory::NamesToValuesMapType _MyEnumB_NAMES_TO_VALUES;



}}} // some::valid::ns
namespace std {


template<> struct hash<typename  ::some::valid::ns::MyEnumA> : public apache::thrift::detail::enum_hash<typename  ::some::valid::ns::MyEnumA> {};
template<> struct equal_to<typename  ::some::valid::ns::MyEnumA> : public apache::thrift::detail::enum_equal_to<typename  ::some::valid::ns::MyEnumA> {};


template<> struct hash<typename  ::some::valid::ns::AnnotatedEnum> : public apache::thrift::detail::enum_hash<typename  ::some::valid::ns::AnnotatedEnum> {};
template<> struct equal_to<typename  ::some::valid::ns::AnnotatedEnum> : public apache::thrift::detail::enum_equal_to<typename  ::some::valid::ns::AnnotatedEnum> {};


template<> struct hash<typename  ::some::valid::ns::AnnotatedEnum2> : public apache::thrift::detail::enum_hash<typename  ::some::valid::ns::AnnotatedEnum2> {};
template<> struct equal_to<typename  ::some::valid::ns::AnnotatedEnum2> : public apache::thrift::detail::enum_equal_to<typename  ::some::valid::ns::AnnotatedEnum2> {};


template<> struct hash<typename  ::some::valid::ns::MyEnumB> : public apache::thrift::detail::enum_hash<typename  ::some::valid::ns::MyEnumB> {};
template<> struct equal_to<typename  ::some::valid::ns::MyEnumB> : public apache::thrift::detail::enum_equal_to<typename  ::some::valid::ns::MyEnumB> {};


} // std

namespace apache { namespace thrift {


template <> struct TEnumDataStorage< ::some::valid::ns::MyEnumA>;
template <> const std::size_t TEnumTraits< ::some::valid::ns::MyEnumA>::size;
template <> const folly::Range<const  ::some::valid::ns::MyEnumA*> TEnumTraits< ::some::valid::ns::MyEnumA>::values;
template <> const folly::Range<const folly::StringPiece*> TEnumTraits< ::some::valid::ns::MyEnumA>::names;
template <> const char* TEnumTraits< ::some::valid::ns::MyEnumA>::findName( ::some::valid::ns::MyEnumA value);
template <> bool TEnumTraits< ::some::valid::ns::MyEnumA>::findValue(const char* name,  ::some::valid::ns::MyEnumA* outValue);

template <> inline constexpr  ::some::valid::ns::MyEnumA TEnumTraits< ::some::valid::ns::MyEnumA>::min() {
  return  ::some::valid::ns::MyEnumA::fieldA;
}

template <> inline constexpr  ::some::valid::ns::MyEnumA TEnumTraits< ::some::valid::ns::MyEnumA>::max() {
  return  ::some::valid::ns::MyEnumA::fieldC;
}


template <> struct TEnumDataStorage< ::some::valid::ns::AnnotatedEnum>;
template <> const std::size_t TEnumTraits< ::some::valid::ns::AnnotatedEnum>::size;
template <> const folly::Range<const  ::some::valid::ns::AnnotatedEnum*> TEnumTraits< ::some::valid::ns::AnnotatedEnum>::values;
template <> const folly::Range<const folly::StringPiece*> TEnumTraits< ::some::valid::ns::AnnotatedEnum>::names;
template <> const char* TEnumTraits< ::some::valid::ns::AnnotatedEnum>::findName( ::some::valid::ns::AnnotatedEnum value);
template <> bool TEnumTraits< ::some::valid::ns::AnnotatedEnum>::findValue(const char* name,  ::some::valid::ns::AnnotatedEnum* outValue);

template <> inline constexpr  ::some::valid::ns::AnnotatedEnum TEnumTraits< ::some::valid::ns::AnnotatedEnum>::min() {
  return  ::some::valid::ns::AnnotatedEnum::FIELDA;
}

template <> inline constexpr  ::some::valid::ns::AnnotatedEnum TEnumTraits< ::some::valid::ns::AnnotatedEnum>::max() {
  return  ::some::valid::ns::AnnotatedEnum::FIELDC;
}


template <> struct TEnumDataStorage< ::some::valid::ns::AnnotatedEnum2>;
template <> const std::size_t TEnumTraits< ::some::valid::ns::AnnotatedEnum2>::size;
template <> const folly::Range<const  ::some::valid::ns::AnnotatedEnum2*> TEnumTraits< ::some::valid::ns::AnnotatedEnum2>::values;
template <> const folly::Range<const folly::StringPiece*> TEnumTraits< ::some::valid::ns::AnnotatedEnum2>::names;
template <> const char* TEnumTraits< ::some::valid::ns::AnnotatedEnum2>::findName( ::some::valid::ns::AnnotatedEnum2 value);
template <> bool TEnumTraits< ::some::valid::ns::AnnotatedEnum2>::findValue(const char* name,  ::some::valid::ns::AnnotatedEnum2* outValue);

template <> inline constexpr  ::some::valid::ns::AnnotatedEnum2 TEnumTraits< ::some::valid::ns::AnnotatedEnum2>::min() {
  return  ::some::valid::ns::AnnotatedEnum2::FIELDA;
}

template <> inline constexpr  ::some::valid::ns::AnnotatedEnum2 TEnumTraits< ::some::valid::ns::AnnotatedEnum2>::max() {
  return  ::some::valid::ns::AnnotatedEnum2::FIELDC;
}


template <> struct TEnumDataStorage< ::some::valid::ns::MyEnumB>;
template <> const std::size_t TEnumTraits< ::some::valid::ns::MyEnumB>::size;
template <> const folly::Range<const  ::some::valid::ns::MyEnumB*> TEnumTraits< ::some::valid::ns::MyEnumB>::values;
template <> const folly::Range<const folly::StringPiece*> TEnumTraits< ::some::valid::ns::MyEnumB>::names;
template <> const char* TEnumTraits< ::some::valid::ns::MyEnumB>::findName( ::some::valid::ns::MyEnumB value);
template <> bool TEnumTraits< ::some::valid::ns::MyEnumB>::findValue(const char* name,  ::some::valid::ns::MyEnumB* outValue);

template <> inline constexpr  ::some::valid::ns::MyEnumB TEnumTraits< ::some::valid::ns::MyEnumB>::min() {
  return  ::some::valid::ns::MyEnumB::AField;
}

template <> inline constexpr  ::some::valid::ns::MyEnumB TEnumTraits< ::some::valid::ns::MyEnumB>::max() {
  return  ::some::valid::ns::MyEnumB::AField;
}


}} // apache::thrift


// END declare_enums
// BEGIN struct_indirection
namespace some { namespace valid { namespace ns {
struct apache_thrift_indirection_module_IndirectionA {
  template <typename T> static auto&& get(T&& x) {
    return std::forward<T>(x).value;
  }

  template <typename T> static auto&& get(T const&& x) {
    return std::forward<T>(x).value;
  }
};

struct apache_thrift_indirection_module_IndirectionC {
  template <typename T> static auto&& get(T&& x) {
    return std::forward<T>(x).__value();
  }

  template <typename T> static auto&& get(T const&& x) {
    return std::forward<T>(x).__value();
  }
};

struct apache_thrift_indirection_module_IndirectionB {
  template <typename T> static auto&& get(T&& x) {
    return std::forward<T>(x).value;
  }

  template <typename T> static auto&& get(T const&& x) {
    return std::forward<T>(x).value;
  }
};


}}} // some::valid::ns
// END struct_indirection
// BEGIN forward_declare
namespace some { namespace valid { namespace ns {
class Empty;
class ASimpleStruct;
class MyStruct;
class SimpleUnion;
class ComplexUnion;
class AnException;
class AnotherException;
class containerStruct;
class MyIncludedStruct;
class AnnotatedStruct;
}}} // some::valid::ns
// END forward_declare
// BEGIN typedefs
namespace some { namespace valid { namespace ns {
typedef  ::a::different::ns::AStruct AStruct;
typedef int32_t simpleTypeDef;
typedef std::map<int16_t, std::string> containerTypeDef;
typedef std::vector<std::map<int16_t, std::string>> complexContainerTypeDef;
typedef std::set< ::some::valid::ns::SimpleUnion> unionTypeDef;
typedef std::vector< ::some::valid::ns::MyStruct> structTypeDef;
typedef std::vector<std::map< ::some::valid::ns::Empty,  ::some::valid::ns::MyStruct>> complexStructTypeDef;
typedef std::vector< ::some::valid::ns::complexStructTypeDef> mostComplexTypeDef;
typedef Foo IndirectionA;
typedef Baz IndirectionC;
typedef Bar IndirectionB;
typedef std::map< ::some::valid::ns::MyEnumA, std::string> HashedTypedef;
typedef CppFakeI32 CppFakeI32;
typedef folly::small_vector<int64_t, 8 /* maxInline */> FollySmallVectorI64;
typedef folly::sorted_vector_set<std::string> SortedVectorSetString;
typedef FakeMap FakeMap;
typedef std::unordered_map<std::string, containerStruct> UnorderedMapStruct;
typedef std::list<int32_t> std_list;
typedef std::deque<std::string> std_deque;
typedef folly::sorted_vector_set<std::string> folly_set;
typedef folly::sorted_vector_map<int64_t, std::string> folly_map;
typedef folly::IOBuf IOBuf;
typedef std::unique_ptr<folly::IOBuf> IOBufPtr;

}}} // some::valid::ns
// END typedefs
// BEGIN hash_and_equal_to
namespace std {

template<> struct hash<typename  ::some::valid::ns::MyIncludedStruct> {
  size_t operator()(const  ::some::valid::ns::MyIncludedStruct&) const;
};
template<> struct equal_to<typename  ::some::valid::ns::MyIncludedStruct> {
  bool operator()(const  ::some::valid::ns::MyIncludedStruct&,const  ::some::valid::ns::MyIncludedStruct&) const;
};

template<> struct hash<typename  ::some::valid::ns::AnnotatedStruct> {
  size_t operator()(const  ::some::valid::ns::AnnotatedStruct&) const;
};
template<> struct equal_to<typename  ::some::valid::ns::AnnotatedStruct> {
  bool operator()(const  ::some::valid::ns::AnnotatedStruct&,const  ::some::valid::ns::AnnotatedStruct&) const;
};

template<> struct hash<typename  ::some::valid::ns::HashedTypedef> {
  size_t operator()(const  ::some::valid::ns::HashedTypedef&) const;
};
template<> struct equal_to<typename  ::some::valid::ns::HashedTypedef> {
  bool operator()(const  ::some::valid::ns::HashedTypedef&,const  ::some::valid::ns::HashedTypedef&) const;
};
} // std
// END hash_and_equal_to
namespace some { namespace valid { namespace ns {
class Empty : private apache::thrift::detail::st::ComparisonOperators<Empty> {
 public:

  Empty() {}
  // FragileConstructor for use in initialization lists only

  Empty(apache::thrift::FragileConstructor) {}

  Empty(Empty&& other) noexcept {}

  Empty(const Empty&) = default;

  Empty& operator=(Empty&&) = default;

  Empty& operator=(const Empty&) = default;
  void __clear();

  virtual ~Empty() {}

  bool operator==(const Empty& /* rhs */) const;

  bool operator < (const Empty& rhs) const {
    (void)rhs;
    return false;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  static void translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype);
};

void swap(Empty& a, Empty& b);
extern template uint32_t Empty::read<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t Empty::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t Empty::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t Empty::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t Empty::read<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t Empty::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t Empty::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t Empty::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t Empty::read<>(apache::thrift::SimpleJSONProtocolReader*);
extern template uint32_t Empty::write<>(apache::thrift::SimpleJSONProtocolWriter*) const;
extern template uint32_t Empty::serializedSize<>(apache::thrift::SimpleJSONProtocolWriter const*) const;
extern template uint32_t Empty::serializedSizeZC<>(apache::thrift::SimpleJSONProtocolWriter const*) const;

}}} // some::valid::ns
namespace apache { namespace thrift {

template <> inline void Cpp2Ops< ::some::valid::ns::Empty>::clear( ::some::valid::ns::Empty* obj) {
  return obj->__clear();
}

template <> inline constexpr apache::thrift::protocol::TType Cpp2Ops< ::some::valid::ns::Empty>::thriftType() {
  return apache::thrift::protocol::T_STRUCT;
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::some::valid::ns::Empty>::write(Protocol* proto,  ::some::valid::ns::Empty const* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::some::valid::ns::Empty>::read(Protocol* proto,  ::some::valid::ns::Empty* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::some::valid::ns::Empty>::serializedSize(Protocol const* proto,  ::some::valid::ns::Empty const* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::some::valid::ns::Empty>::serializedSizeZC(Protocol const* proto,  ::some::valid::ns::Empty const* obj) {
  return obj->serializedSizeZC(proto);
}

}} // apache::thrift
namespace some { namespace valid { namespace ns {
class ASimpleStruct : private apache::thrift::detail::st::ComparisonOperators<ASimpleStruct> {
 public:

  ASimpleStruct() :
      boolField(0) {}
  // FragileConstructor for use in initialization lists only

  ASimpleStruct(apache::thrift::FragileConstructor, int64_t boolField__arg) :
      boolField(std::move(boolField__arg)) {
    __isset.boolField = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  ASimpleStruct(::apache::thrift::detail::argument_wrapper<1, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    ASimpleStruct(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    boolField = arg.move();
    __isset.boolField = true;
  }

  ASimpleStruct(ASimpleStruct&&) = default;

  ASimpleStruct(const ASimpleStruct&) = default;

  ASimpleStruct& operator=(ASimpleStruct&&) = default;

  ASimpleStruct& operator=(const ASimpleStruct&) = default;
  void __clear();

  virtual ~ASimpleStruct() {}

  int64_t boolField;

  struct __isset {
    void __clear() {
      boolField = false;
    }

    bool boolField = false;
  } __isset;
  bool operator==(const ASimpleStruct& rhs) const;
  bool operator < (const ASimpleStruct& rhs) const;

  int64_t get_boolField() const {
    return boolField;
  }

  int64_t& set_boolField(int64_t boolField_) {
    boolField = boolField_;
    __isset.boolField = true;
    return boolField;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  static void translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype);
};

void swap(ASimpleStruct& a, ASimpleStruct& b);
extern template uint32_t ASimpleStruct::read<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t ASimpleStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t ASimpleStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t ASimpleStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t ASimpleStruct::read<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t ASimpleStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t ASimpleStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t ASimpleStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t ASimpleStruct::read<>(apache::thrift::SimpleJSONProtocolReader*);
extern template uint32_t ASimpleStruct::write<>(apache::thrift::SimpleJSONProtocolWriter*) const;
extern template uint32_t ASimpleStruct::serializedSize<>(apache::thrift::SimpleJSONProtocolWriter const*) const;
extern template uint32_t ASimpleStruct::serializedSizeZC<>(apache::thrift::SimpleJSONProtocolWriter const*) const;

}}} // some::valid::ns
namespace apache { namespace thrift {

template <> inline void Cpp2Ops< ::some::valid::ns::ASimpleStruct>::clear( ::some::valid::ns::ASimpleStruct* obj) {
  return obj->__clear();
}

template <> inline constexpr apache::thrift::protocol::TType Cpp2Ops< ::some::valid::ns::ASimpleStruct>::thriftType() {
  return apache::thrift::protocol::T_STRUCT;
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::some::valid::ns::ASimpleStruct>::write(Protocol* proto,  ::some::valid::ns::ASimpleStruct const* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::some::valid::ns::ASimpleStruct>::read(Protocol* proto,  ::some::valid::ns::ASimpleStruct* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::some::valid::ns::ASimpleStruct>::serializedSize(Protocol const* proto,  ::some::valid::ns::ASimpleStruct const* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::some::valid::ns::ASimpleStruct>::serializedSizeZC(Protocol const* proto,  ::some::valid::ns::ASimpleStruct const* obj) {
  return obj->serializedSizeZC(proto);
}

}} // apache::thrift
namespace some { namespace valid { namespace ns {
class MyStruct : private apache::thrift::detail::st::ComparisonOperators<MyStruct> {
 public:

  MyStruct() :
      MyBoolField(0),
      MyIntField(12LL),
      MyStringField(apache::thrift::StringTraits< std::string>::fromStringLiteral("test")),
      MyMapEnumAndInt(std::initializer_list<std::pair<const  ::some::valid::ns::MyEnumA, std::string>>{{ ::some::valid::ns::MyEnumA::fieldA, apache::thrift::StringTraits< std::string>::fromStringLiteral("fieldA")},
  { ::some::valid::ns::MyEnumA::fieldC, apache::thrift::StringTraits< std::string>::fromStringLiteral("fieldC")},
  {static_cast< ::some::valid::ns::MyEnumA>(9), apache::thrift::StringTraits< std::string>::fromStringLiteral("nothing")}}) {}
  // FragileConstructor for use in initialization lists only

  MyStruct(apache::thrift::FragileConstructor, bool MyBoolField__arg, int64_t MyIntField__arg, std::string MyStringField__arg, std::string MyStringField2__arg, std::string MyBinaryField__arg, std::string MyBinaryField2__arg, std::string MyBinaryField3__arg, std::vector<std::string> MyBinaryListField4__arg, std::map< ::some::valid::ns::MyEnumA, std::string> MyMapEnumAndInt__arg) :
      MyBoolField(std::move(MyBoolField__arg)),
      MyIntField(std::move(MyIntField__arg)),
      MyStringField(std::move(MyStringField__arg)),
      MyStringField2(std::move(MyStringField2__arg)),
      MyBinaryField(std::move(MyBinaryField__arg)),
      MyBinaryField2(std::move(MyBinaryField2__arg)),
      MyBinaryField3(std::move(MyBinaryField3__arg)),
      MyBinaryListField4(std::move(MyBinaryListField4__arg)),
      MyMapEnumAndInt(std::move(MyMapEnumAndInt__arg)) {
    __isset.MyBoolField = true;
    __isset.MyIntField = true;
    __isset.MyStringField = true;
    __isset.MyStringField2 = true;
    __isset.MyBinaryField = true;
    __isset.MyBinaryField2 = true;
    __isset.MyBinaryListField4 = true;
    __isset.MyMapEnumAndInt = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  MyStruct(::apache::thrift::detail::argument_wrapper<1, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    MyStruct(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    MyBoolField = arg.move();
    __isset.MyBoolField = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  MyStruct(::apache::thrift::detail::argument_wrapper<2, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    MyStruct(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    MyIntField = arg.move();
    __isset.MyIntField = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  MyStruct(::apache::thrift::detail::argument_wrapper<3, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    MyStruct(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    MyStringField = arg.move();
    __isset.MyStringField = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  MyStruct(::apache::thrift::detail::argument_wrapper<4, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    MyStruct(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    MyStringField2 = arg.move();
    __isset.MyStringField2 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  MyStruct(::apache::thrift::detail::argument_wrapper<5, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    MyStruct(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    MyBinaryField = arg.move();
    __isset.MyBinaryField = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  MyStruct(::apache::thrift::detail::argument_wrapper<6, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    MyStruct(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    MyBinaryField2 = arg.move();
    __isset.MyBinaryField2 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  MyStruct(::apache::thrift::detail::argument_wrapper<7, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    MyStruct(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    MyBinaryField3 = arg.move();
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  MyStruct(::apache::thrift::detail::argument_wrapper<8, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    MyStruct(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    MyBinaryListField4 = arg.move();
    __isset.MyBinaryListField4 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  MyStruct(::apache::thrift::detail::argument_wrapper<9, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    MyStruct(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    MyMapEnumAndInt = arg.move();
    __isset.MyMapEnumAndInt = true;
  }

  MyStruct(MyStruct&& other) noexcept :
      MyBoolField(std::move(other.MyBoolField)),
      MyIntField(std::move(other.MyIntField)),
      MyStringField(std::move(other.MyStringField)),
      MyStringField2(std::move(other.MyStringField2)),
      MyBinaryField(std::move(other.MyBinaryField)),
      MyBinaryField2(std::move(other.MyBinaryField2)),
      MyBinaryField3(std::move(other.MyBinaryField3)),
      MyBinaryListField4(std::move(other.MyBinaryListField4)),
      MyMapEnumAndInt(std::move(other.MyMapEnumAndInt)),
      __isset(other.__isset) {}

  MyStruct(const MyStruct&) = default;

  MyStruct& operator=(MyStruct&&) = default;

  MyStruct& operator=(const MyStruct&) = default;
  void __clear();

  virtual ~MyStruct() {}

  bool MyBoolField;
  int64_t MyIntField;
  std::string MyStringField;
  std::string MyStringField2;
  std::string MyBinaryField;
  std::string MyBinaryField2;
  std::string MyBinaryField3;
  std::vector<std::string> MyBinaryListField4;
  std::map< ::some::valid::ns::MyEnumA, std::string> MyMapEnumAndInt;

  struct __isset {
    void __clear() {
      MyBoolField = false;
      MyIntField = false;
      MyStringField = false;
      MyStringField2 = false;
      MyBinaryField = false;
      MyBinaryField2 = false;
      MyBinaryListField4 = false;
      MyMapEnumAndInt = false;
    }

    bool MyBoolField = false;
    bool MyIntField = false;
    bool MyStringField = false;
    bool MyStringField2 = false;
    bool MyBinaryField = false;
    bool MyBinaryField2 = false;
    bool MyBinaryListField4 = false;
    bool MyMapEnumAndInt = false;
  } __isset;
  bool operator==(const MyStruct& rhs) const;
  bool operator < (const MyStruct& rhs) const;

  bool get_MyBoolField() const {
    return MyBoolField;
  }

  bool& set_MyBoolField(bool MyBoolField_) {
    MyBoolField = MyBoolField_;
    __isset.MyBoolField = true;
    return MyBoolField;
  }

  int64_t get_MyIntField() const {
    return MyIntField;
  }

  int64_t& set_MyIntField(int64_t MyIntField_) {
    MyIntField = MyIntField_;
    __isset.MyIntField = true;
    return MyIntField;
  }

  const std::string& get_MyStringField() const& {
    return MyStringField;
  }

  std::string get_MyStringField() && {
    return std::move(MyStringField);
  }

  template <typename T_MyStruct_MyStringField_struct_setter>
  std::string& set_MyStringField(T_MyStruct_MyStringField_struct_setter&& MyStringField_) {
    MyStringField = std::forward<T_MyStruct_MyStringField_struct_setter>(MyStringField_);
    __isset.MyStringField = true;
    return MyStringField;
  }

  const std::string& get_MyStringField2() const& {
    return MyStringField2;
  }

  std::string get_MyStringField2() && {
    return std::move(MyStringField2);
  }

  template <typename T_MyStruct_MyStringField2_struct_setter>
  std::string& set_MyStringField2(T_MyStruct_MyStringField2_struct_setter&& MyStringField2_) {
    MyStringField2 = std::forward<T_MyStruct_MyStringField2_struct_setter>(MyStringField2_);
    __isset.MyStringField2 = true;
    return MyStringField2;
  }

  const std::string& get_MyBinaryField() const& {
    return MyBinaryField;
  }

  std::string get_MyBinaryField() && {
    return std::move(MyBinaryField);
  }

  template <typename T_MyStruct_MyBinaryField_struct_setter>
  std::string& set_MyBinaryField(T_MyStruct_MyBinaryField_struct_setter&& MyBinaryField_) {
    MyBinaryField = std::forward<T_MyStruct_MyBinaryField_struct_setter>(MyBinaryField_);
    __isset.MyBinaryField = true;
    return MyBinaryField;
  }

  const std::string* get_MyBinaryField2() const& {
    return __isset.MyBinaryField2 ? std::addressof(MyBinaryField2) : nullptr;
  }

  std::string* get_MyBinaryField2() & {
    return __isset.MyBinaryField2 ? std::addressof(MyBinaryField2) : nullptr;
  }
  std::string* get_MyBinaryField2() && = delete;

  template <typename T_MyStruct_MyBinaryField2_struct_setter>
  std::string& set_MyBinaryField2(T_MyStruct_MyBinaryField2_struct_setter&& MyBinaryField2_) {
    MyBinaryField2 = std::forward<T_MyStruct_MyBinaryField2_struct_setter>(MyBinaryField2_);
    __isset.MyBinaryField2 = true;
    return MyBinaryField2;
  }

  const std::string& get_MyBinaryField3() const& {
    return MyBinaryField3;
  }

  std::string get_MyBinaryField3() && {
    return std::move(MyBinaryField3);
  }

  template <typename T_MyStruct_MyBinaryField3_struct_setter>
  std::string& set_MyBinaryField3(T_MyStruct_MyBinaryField3_struct_setter&& MyBinaryField3_) {
    MyBinaryField3 = std::forward<T_MyStruct_MyBinaryField3_struct_setter>(MyBinaryField3_);
    return MyBinaryField3;
  }
  const std::vector<std::string>& get_MyBinaryListField4() const&;
  std::vector<std::string> get_MyBinaryListField4() &&;

  template <typename T_MyStruct_MyBinaryListField4_struct_setter>
  std::vector<std::string>& set_MyBinaryListField4(T_MyStruct_MyBinaryListField4_struct_setter&& MyBinaryListField4_) {
    MyBinaryListField4 = std::forward<T_MyStruct_MyBinaryListField4_struct_setter>(MyBinaryListField4_);
    __isset.MyBinaryListField4 = true;
    return MyBinaryListField4;
  }
  const std::map< ::some::valid::ns::MyEnumA, std::string>& get_MyMapEnumAndInt() const&;
  std::map< ::some::valid::ns::MyEnumA, std::string> get_MyMapEnumAndInt() &&;

  template <typename T_MyStruct_MyMapEnumAndInt_struct_setter>
  std::map< ::some::valid::ns::MyEnumA, std::string>& set_MyMapEnumAndInt(T_MyStruct_MyMapEnumAndInt_struct_setter&& MyMapEnumAndInt_) {
    MyMapEnumAndInt = std::forward<T_MyStruct_MyMapEnumAndInt_struct_setter>(MyMapEnumAndInt_);
    __isset.MyMapEnumAndInt = true;
    return MyMapEnumAndInt;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  static void translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype);
};

void swap(MyStruct& a, MyStruct& b);
extern template uint32_t MyStruct::read<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t MyStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t MyStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t MyStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t MyStruct::read<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t MyStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t MyStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t MyStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t MyStruct::read<>(apache::thrift::SimpleJSONProtocolReader*);
extern template uint32_t MyStruct::write<>(apache::thrift::SimpleJSONProtocolWriter*) const;
extern template uint32_t MyStruct::serializedSize<>(apache::thrift::SimpleJSONProtocolWriter const*) const;
extern template uint32_t MyStruct::serializedSizeZC<>(apache::thrift::SimpleJSONProtocolWriter const*) const;

}}} // some::valid::ns
namespace apache { namespace thrift {

template <> inline void Cpp2Ops< ::some::valid::ns::MyStruct>::clear( ::some::valid::ns::MyStruct* obj) {
  return obj->__clear();
}

template <> inline constexpr apache::thrift::protocol::TType Cpp2Ops< ::some::valid::ns::MyStruct>::thriftType() {
  return apache::thrift::protocol::T_STRUCT;
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::some::valid::ns::MyStruct>::write(Protocol* proto,  ::some::valid::ns::MyStruct const* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::some::valid::ns::MyStruct>::read(Protocol* proto,  ::some::valid::ns::MyStruct* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::some::valid::ns::MyStruct>::serializedSize(Protocol const* proto,  ::some::valid::ns::MyStruct const* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::some::valid::ns::MyStruct>::serializedSizeZC(Protocol const* proto,  ::some::valid::ns::MyStruct const* obj) {
  return obj->serializedSizeZC(proto);
}

}} // apache::thrift
namespace some { namespace valid { namespace ns {
class SimpleUnion : private apache::thrift::detail::st::ComparisonOperators<SimpleUnion> {
 public:
  enum Type {
    __EMPTY__ = 0,
    intValue = 7,
    stringValue = 2,
  } ;

  SimpleUnion() :
      type_(Type::__EMPTY__) {}

  SimpleUnion(SimpleUnion&& rhs) :
      type_(Type::__EMPTY__) {
    if (this == &rhs) {return; }
    if (rhs.type_ == Type::__EMPTY__) { return; }
    switch(rhs.type_) {
      case Type::intValue:
      {
        set_intValue(std::move(rhs.value_.intValue));
        break;
      }
      case Type::stringValue:
      {
        set_stringValue(std::move(rhs.value_.stringValue));
        break;
      }
      default:
      {
        assert(false);
        break;
      }
    }
    rhs.__clear();
  }

  SimpleUnion(const SimpleUnion& rhs) :
      type_(Type::__EMPTY__) {
    if (this == &rhs) {return; }
    if (rhs.type_ == Type::__EMPTY__) { return; }
    switch(rhs.type_) {
      case Type::intValue:
      {
        set_intValue(rhs.value_.intValue);
        break;
      }
      case Type::stringValue:
      {
        set_stringValue(rhs.value_.stringValue);
        break;
      }
      default:
      {
        assert(false);
        break;
      }
    }
  }

  SimpleUnion& operator=(SimpleUnion&& rhs) {
    if (this == &rhs) {return *this; }
    __clear();
    if (rhs.type_ == Type::__EMPTY__) { return *this; }
    switch(rhs.type_) {
      case Type::intValue:
      {
        set_intValue(std::move(rhs.value_.intValue));
        break;
      }
      case Type::stringValue:
      {
        set_stringValue(std::move(rhs.value_.stringValue));
        break;
      }
      default:
      {
        assert(false);
        break;
      }
    }
    rhs.__clear();
    return *this;
  }

  SimpleUnion& operator=(const SimpleUnion& rhs) {
    if (this == &rhs) {return *this; }
    __clear();
    if (rhs.type_ == Type::__EMPTY__) { return *this; }
    switch(rhs.type_) {
      case Type::intValue:
      {
        set_intValue(rhs.value_.intValue);
        break;
      }
      case Type::stringValue:
      {
        set_stringValue(rhs.value_.stringValue);
        break;
      }
      default:
      {
        assert(false);
        break;
      }
    }
    return *this;
  }
  template <typename T__ThriftWrappedArgument__Ctor>
  SimpleUnion(::apache::thrift::detail::argument_wrapper<7, T__ThriftWrappedArgument__Ctor> arg):
    type_(Type::__EMPTY__)
  {
    set_intValue(arg.move());
  }
  template <typename T__ThriftWrappedArgument__Ctor>
  SimpleUnion(::apache::thrift::detail::argument_wrapper<2, T__ThriftWrappedArgument__Ctor> arg):
    type_(Type::__EMPTY__)
  {
    set_stringValue(arg.move());
  }
  void __clear();

  ~SimpleUnion() {
    __clear();
  }
  union storage_type {
    int64_t intValue;
    std::string stringValue;

    storage_type() {}
    ~storage_type() {}
  } ;
  bool operator==(const SimpleUnion& rhs) const;

  bool operator < (const SimpleUnion& rhs) const {
    if (type_ != rhs.type_) { return type_ < rhs.type_; }
    switch(type_) {
      case Type::intValue:
      {
        return value_.intValue < rhs.value_.intValue;
      }
      case Type::stringValue:
      {
        return value_.stringValue < rhs.value_.stringValue;
      }
      default:
      {
        return false;
      }
    }
  }

  int64_t& set_intValue(int64_t t = int64_t()) {
    __clear();
    type_ = Type::intValue;
    ::new (std::addressof(value_.intValue)) int64_t(t);
    return value_.intValue;
  }

  std::string& set_stringValue(std::string const &t) {
    __clear();
    type_ = Type::stringValue;
    ::new (std::addressof(value_.stringValue)) std::string(t);
    return value_.stringValue;
  }

  std::string& set_stringValue(std::string&& t) {
    __clear();
    type_ = Type::stringValue;
    ::new (std::addressof(value_.stringValue)) std::string(std::move(t));
    return value_.stringValue;
  }

  template<typename... T, typename = ::apache::thrift::safe_overload_t<std::string, T...>> std::string& set_stringValue(T&&... t) {
    __clear();
    type_ = Type::stringValue;
    ::new (std::addressof(value_.stringValue)) std::string(std::forward<T>(t)...);
    return value_.stringValue;
  }

  int64_t const & get_intValue() const {
    assert(type_ == Type::intValue);
    return value_.intValue;
  }

  std::string const & get_stringValue() const {
    assert(type_ == Type::stringValue);
    return value_.stringValue;
  }

  int64_t & mutable_intValue() {
    assert(type_ == Type::intValue);
    return value_.intValue;
  }

  std::string & mutable_stringValue() {
    assert(type_ == Type::stringValue);
    return value_.stringValue;
  }

  int64_t move_intValue() {
    assert(type_ == Type::intValue);
    return std::move(value_.intValue);
  }

  std::string move_stringValue() {
    assert(type_ == Type::stringValue);
    return std::move(value_.stringValue);
  }

  Type getType() const { return type_; }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
 protected:
  template <class T>
  void destruct(T &val) {
    (&val)->~T();
  }

  Type type_;
  storage_type value_;

 private:
  static void translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype);
};

void swap(SimpleUnion& a, SimpleUnion& b);
extern template uint32_t SimpleUnion::read<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t SimpleUnion::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t SimpleUnion::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t SimpleUnion::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t SimpleUnion::read<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t SimpleUnion::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t SimpleUnion::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t SimpleUnion::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t SimpleUnion::read<>(apache::thrift::SimpleJSONProtocolReader*);
extern template uint32_t SimpleUnion::write<>(apache::thrift::SimpleJSONProtocolWriter*) const;
extern template uint32_t SimpleUnion::serializedSize<>(apache::thrift::SimpleJSONProtocolWriter const*) const;
extern template uint32_t SimpleUnion::serializedSizeZC<>(apache::thrift::SimpleJSONProtocolWriter const*) const;

}}} // some::valid::ns
namespace apache { namespace thrift {

template <> inline void Cpp2Ops< ::some::valid::ns::SimpleUnion>::clear( ::some::valid::ns::SimpleUnion* obj) {
  return obj->__clear();
}

template <> inline constexpr apache::thrift::protocol::TType Cpp2Ops< ::some::valid::ns::SimpleUnion>::thriftType() {
  return apache::thrift::protocol::T_STRUCT;
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::some::valid::ns::SimpleUnion>::write(Protocol* proto,  ::some::valid::ns::SimpleUnion const* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::some::valid::ns::SimpleUnion>::read(Protocol* proto,  ::some::valid::ns::SimpleUnion* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::some::valid::ns::SimpleUnion>::serializedSize(Protocol const* proto,  ::some::valid::ns::SimpleUnion const* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::some::valid::ns::SimpleUnion>::serializedSizeZC(Protocol const* proto,  ::some::valid::ns::SimpleUnion const* obj) {
  return obj->serializedSizeZC(proto);
}

}} // apache::thrift
namespace some { namespace valid { namespace ns {
class ComplexUnion : private apache::thrift::detail::st::ComparisonOperators<ComplexUnion> {
 public:
  enum Type {
    __EMPTY__ = 0,
    intValue = 1,
    req_intValue = 101,
    opt_intValue = 201,
    stringValue = 3,
    req_stringValue = 103,
    opt_stringValue = 203,
    intValue2 = 4,
    intValue3 = 6,
    doubelValue = 7,
    boolValue = 8,
    union_list = 9,
    union_set = 10,
    union_map = 11,
    req_union_map = 111,
    opt_union_map = 211,
    enum_field = 12,
    enum_container = 13,
    a_struct = 14,
    a_set_struct = 15,
    a_union = 16,
    req_a_union = 116,
    opt_a_union = 216,
    a_union_list = 17,
    a_union_typedef = 18,
    a_union_typedef_list = 19,
    MyBinaryField = 20,
    MyBinaryField2 = 21,
    MyBinaryField3 = 22,
    MyBinaryListField4 = 23,
    ref_field = 24,
    ref_field2 = 25,
    excp_field = 26,
  } ;

  ComplexUnion() :
      type_(Type::__EMPTY__) {}

  ComplexUnion(ComplexUnion&& rhs) :
      type_(Type::__EMPTY__) {
    if (this == &rhs) {return; }
    if (rhs.type_ == Type::__EMPTY__) { return; }
    switch(rhs.type_) {
      case Type::intValue:
      {
        set_intValue(std::move(rhs.value_.intValue));
        break;
      }
      case Type::req_intValue:
      {
        set_req_intValue(std::move(rhs.value_.req_intValue));
        break;
      }
      case Type::opt_intValue:
      {
        set_opt_intValue(std::move(rhs.value_.opt_intValue));
        break;
      }
      case Type::stringValue:
      {
        set_stringValue(std::move(rhs.value_.stringValue));
        break;
      }
      case Type::req_stringValue:
      {
        set_req_stringValue(std::move(rhs.value_.req_stringValue));
        break;
      }
      case Type::opt_stringValue:
      {
        set_opt_stringValue(std::move(rhs.value_.opt_stringValue));
        break;
      }
      case Type::intValue2:
      {
        set_intValue2(std::move(rhs.value_.intValue2));
        break;
      }
      case Type::intValue3:
      {
        set_intValue3(std::move(rhs.value_.intValue3));
        break;
      }
      case Type::doubelValue:
      {
        set_doubelValue(std::move(rhs.value_.doubelValue));
        break;
      }
      case Type::boolValue:
      {
        set_boolValue(std::move(rhs.value_.boolValue));
        break;
      }
      case Type::union_list:
      {
        set_union_list(std::move(rhs.value_.union_list));
        break;
      }
      case Type::union_set:
      {
        set_union_set(std::move(rhs.value_.union_set));
        break;
      }
      case Type::union_map:
      {
        set_union_map(std::move(rhs.value_.union_map));
        break;
      }
      case Type::req_union_map:
      {
        set_req_union_map(std::move(rhs.value_.req_union_map));
        break;
      }
      case Type::opt_union_map:
      {
        set_opt_union_map(std::move(rhs.value_.opt_union_map));
        break;
      }
      case Type::enum_field:
      {
        set_enum_field(std::move(rhs.value_.enum_field));
        break;
      }
      case Type::enum_container:
      {
        set_enum_container(std::move(rhs.value_.enum_container));
        break;
      }
      case Type::a_struct:
      {
        set_a_struct(std::move(rhs.value_.a_struct));
        break;
      }
      case Type::a_set_struct:
      {
        set_a_set_struct(std::move(rhs.value_.a_set_struct));
        break;
      }
      case Type::a_union:
      {
        set_a_union(std::move(rhs.value_.a_union));
        break;
      }
      case Type::req_a_union:
      {
        set_req_a_union(std::move(rhs.value_.req_a_union));
        break;
      }
      case Type::opt_a_union:
      {
        set_opt_a_union(std::move(rhs.value_.opt_a_union));
        break;
      }
      case Type::a_union_list:
      {
        set_a_union_list(std::move(rhs.value_.a_union_list));
        break;
      }
      case Type::a_union_typedef:
      {
        set_a_union_typedef(std::move(rhs.value_.a_union_typedef));
        break;
      }
      case Type::a_union_typedef_list:
      {
        set_a_union_typedef_list(std::move(rhs.value_.a_union_typedef_list));
        break;
      }
      case Type::MyBinaryField:
      {
        set_MyBinaryField(std::move(rhs.value_.MyBinaryField));
        break;
      }
      case Type::MyBinaryField2:
      {
        set_MyBinaryField2(std::move(rhs.value_.MyBinaryField2));
        break;
      }
      case Type::MyBinaryField3:
      {
        set_MyBinaryField3(std::move(rhs.value_.MyBinaryField3));
        break;
      }
      case Type::MyBinaryListField4:
      {
        set_MyBinaryListField4(std::move(rhs.value_.MyBinaryListField4));
        break;
      }
      case Type::ref_field:
      {
        set_ref_field(std::move(*rhs.value_.ref_field));
        break;
      }
      case Type::ref_field2:
      {
        set_ref_field2(std::move(*rhs.value_.ref_field2));
        break;
      }
      case Type::excp_field:
      {
        set_excp_field(std::move(rhs.value_.excp_field));
        break;
      }
      default:
      {
        assert(false);
        break;
      }
    }
    rhs.__clear();
  }

  ComplexUnion(const ComplexUnion& rhs) :
      type_(Type::__EMPTY__) {
    if (this == &rhs) {return; }
    if (rhs.type_ == Type::__EMPTY__) { return; }
    switch(rhs.type_) {
      case Type::intValue:
      {
        set_intValue(rhs.value_.intValue);
        break;
      }
      case Type::req_intValue:
      {
        set_req_intValue(rhs.value_.req_intValue);
        break;
      }
      case Type::opt_intValue:
      {
        set_opt_intValue(rhs.value_.opt_intValue);
        break;
      }
      case Type::stringValue:
      {
        set_stringValue(rhs.value_.stringValue);
        break;
      }
      case Type::req_stringValue:
      {
        set_req_stringValue(rhs.value_.req_stringValue);
        break;
      }
      case Type::opt_stringValue:
      {
        set_opt_stringValue(rhs.value_.opt_stringValue);
        break;
      }
      case Type::intValue2:
      {
        set_intValue2(rhs.value_.intValue2);
        break;
      }
      case Type::intValue3:
      {
        set_intValue3(rhs.value_.intValue3);
        break;
      }
      case Type::doubelValue:
      {
        set_doubelValue(rhs.value_.doubelValue);
        break;
      }
      case Type::boolValue:
      {
        set_boolValue(rhs.value_.boolValue);
        break;
      }
      case Type::union_list:
      {
        set_union_list(rhs.value_.union_list);
        break;
      }
      case Type::union_set:
      {
        set_union_set(rhs.value_.union_set);
        break;
      }
      case Type::union_map:
      {
        set_union_map(rhs.value_.union_map);
        break;
      }
      case Type::req_union_map:
      {
        set_req_union_map(rhs.value_.req_union_map);
        break;
      }
      case Type::opt_union_map:
      {
        set_opt_union_map(rhs.value_.opt_union_map);
        break;
      }
      case Type::enum_field:
      {
        set_enum_field(rhs.value_.enum_field);
        break;
      }
      case Type::enum_container:
      {
        set_enum_container(rhs.value_.enum_container);
        break;
      }
      case Type::a_struct:
      {
        set_a_struct(rhs.value_.a_struct);
        break;
      }
      case Type::a_set_struct:
      {
        set_a_set_struct(rhs.value_.a_set_struct);
        break;
      }
      case Type::a_union:
      {
        set_a_union(rhs.value_.a_union);
        break;
      }
      case Type::req_a_union:
      {
        set_req_a_union(rhs.value_.req_a_union);
        break;
      }
      case Type::opt_a_union:
      {
        set_opt_a_union(rhs.value_.opt_a_union);
        break;
      }
      case Type::a_union_list:
      {
        set_a_union_list(rhs.value_.a_union_list);
        break;
      }
      case Type::a_union_typedef:
      {
        set_a_union_typedef(rhs.value_.a_union_typedef);
        break;
      }
      case Type::a_union_typedef_list:
      {
        set_a_union_typedef_list(rhs.value_.a_union_typedef_list);
        break;
      }
      case Type::MyBinaryField:
      {
        set_MyBinaryField(rhs.value_.MyBinaryField);
        break;
      }
      case Type::MyBinaryField2:
      {
        set_MyBinaryField2(rhs.value_.MyBinaryField2);
        break;
      }
      case Type::MyBinaryField3:
      {
        set_MyBinaryField3(rhs.value_.MyBinaryField3);
        break;
      }
      case Type::MyBinaryListField4:
      {
        set_MyBinaryListField4(rhs.value_.MyBinaryListField4);
        break;
      }
      case Type::ref_field:
      {
        set_ref_field(*rhs.value_.ref_field);
        break;
      }
      case Type::ref_field2:
      {
        set_ref_field2(*rhs.value_.ref_field2);
        break;
      }
      case Type::excp_field:
      {
        set_excp_field(rhs.value_.excp_field);
        break;
      }
      default:
      {
        assert(false);
        break;
      }
    }
  }

  ComplexUnion& operator=(ComplexUnion&& rhs) {
    if (this == &rhs) {return *this; }
    __clear();
    if (rhs.type_ == Type::__EMPTY__) { return *this; }
    switch(rhs.type_) {
      case Type::intValue:
      {
        set_intValue(std::move(rhs.value_.intValue));
        break;
      }
      case Type::req_intValue:
      {
        set_req_intValue(std::move(rhs.value_.req_intValue));
        break;
      }
      case Type::opt_intValue:
      {
        set_opt_intValue(std::move(rhs.value_.opt_intValue));
        break;
      }
      case Type::stringValue:
      {
        set_stringValue(std::move(rhs.value_.stringValue));
        break;
      }
      case Type::req_stringValue:
      {
        set_req_stringValue(std::move(rhs.value_.req_stringValue));
        break;
      }
      case Type::opt_stringValue:
      {
        set_opt_stringValue(std::move(rhs.value_.opt_stringValue));
        break;
      }
      case Type::intValue2:
      {
        set_intValue2(std::move(rhs.value_.intValue2));
        break;
      }
      case Type::intValue3:
      {
        set_intValue3(std::move(rhs.value_.intValue3));
        break;
      }
      case Type::doubelValue:
      {
        set_doubelValue(std::move(rhs.value_.doubelValue));
        break;
      }
      case Type::boolValue:
      {
        set_boolValue(std::move(rhs.value_.boolValue));
        break;
      }
      case Type::union_list:
      {
        set_union_list(std::move(rhs.value_.union_list));
        break;
      }
      case Type::union_set:
      {
        set_union_set(std::move(rhs.value_.union_set));
        break;
      }
      case Type::union_map:
      {
        set_union_map(std::move(rhs.value_.union_map));
        break;
      }
      case Type::req_union_map:
      {
        set_req_union_map(std::move(rhs.value_.req_union_map));
        break;
      }
      case Type::opt_union_map:
      {
        set_opt_union_map(std::move(rhs.value_.opt_union_map));
        break;
      }
      case Type::enum_field:
      {
        set_enum_field(std::move(rhs.value_.enum_field));
        break;
      }
      case Type::enum_container:
      {
        set_enum_container(std::move(rhs.value_.enum_container));
        break;
      }
      case Type::a_struct:
      {
        set_a_struct(std::move(rhs.value_.a_struct));
        break;
      }
      case Type::a_set_struct:
      {
        set_a_set_struct(std::move(rhs.value_.a_set_struct));
        break;
      }
      case Type::a_union:
      {
        set_a_union(std::move(rhs.value_.a_union));
        break;
      }
      case Type::req_a_union:
      {
        set_req_a_union(std::move(rhs.value_.req_a_union));
        break;
      }
      case Type::opt_a_union:
      {
        set_opt_a_union(std::move(rhs.value_.opt_a_union));
        break;
      }
      case Type::a_union_list:
      {
        set_a_union_list(std::move(rhs.value_.a_union_list));
        break;
      }
      case Type::a_union_typedef:
      {
        set_a_union_typedef(std::move(rhs.value_.a_union_typedef));
        break;
      }
      case Type::a_union_typedef_list:
      {
        set_a_union_typedef_list(std::move(rhs.value_.a_union_typedef_list));
        break;
      }
      case Type::MyBinaryField:
      {
        set_MyBinaryField(std::move(rhs.value_.MyBinaryField));
        break;
      }
      case Type::MyBinaryField2:
      {
        set_MyBinaryField2(std::move(rhs.value_.MyBinaryField2));
        break;
      }
      case Type::MyBinaryField3:
      {
        set_MyBinaryField3(std::move(rhs.value_.MyBinaryField3));
        break;
      }
      case Type::MyBinaryListField4:
      {
        set_MyBinaryListField4(std::move(rhs.value_.MyBinaryListField4));
        break;
      }
      case Type::ref_field:
      {
        set_ref_field(std::move(*rhs.value_.ref_field));
        break;
      }
      case Type::ref_field2:
      {
        set_ref_field2(std::move(*rhs.value_.ref_field2));
        break;
      }
      case Type::excp_field:
      {
        set_excp_field(std::move(rhs.value_.excp_field));
        break;
      }
      default:
      {
        assert(false);
        break;
      }
    }
    rhs.__clear();
    return *this;
  }

  ComplexUnion& operator=(const ComplexUnion& rhs) {
    if (this == &rhs) {return *this; }
    __clear();
    if (rhs.type_ == Type::__EMPTY__) { return *this; }
    switch(rhs.type_) {
      case Type::intValue:
      {
        set_intValue(rhs.value_.intValue);
        break;
      }
      case Type::req_intValue:
      {
        set_req_intValue(rhs.value_.req_intValue);
        break;
      }
      case Type::opt_intValue:
      {
        set_opt_intValue(rhs.value_.opt_intValue);
        break;
      }
      case Type::stringValue:
      {
        set_stringValue(rhs.value_.stringValue);
        break;
      }
      case Type::req_stringValue:
      {
        set_req_stringValue(rhs.value_.req_stringValue);
        break;
      }
      case Type::opt_stringValue:
      {
        set_opt_stringValue(rhs.value_.opt_stringValue);
        break;
      }
      case Type::intValue2:
      {
        set_intValue2(rhs.value_.intValue2);
        break;
      }
      case Type::intValue3:
      {
        set_intValue3(rhs.value_.intValue3);
        break;
      }
      case Type::doubelValue:
      {
        set_doubelValue(rhs.value_.doubelValue);
        break;
      }
      case Type::boolValue:
      {
        set_boolValue(rhs.value_.boolValue);
        break;
      }
      case Type::union_list:
      {
        set_union_list(rhs.value_.union_list);
        break;
      }
      case Type::union_set:
      {
        set_union_set(rhs.value_.union_set);
        break;
      }
      case Type::union_map:
      {
        set_union_map(rhs.value_.union_map);
        break;
      }
      case Type::req_union_map:
      {
        set_req_union_map(rhs.value_.req_union_map);
        break;
      }
      case Type::opt_union_map:
      {
        set_opt_union_map(rhs.value_.opt_union_map);
        break;
      }
      case Type::enum_field:
      {
        set_enum_field(rhs.value_.enum_field);
        break;
      }
      case Type::enum_container:
      {
        set_enum_container(rhs.value_.enum_container);
        break;
      }
      case Type::a_struct:
      {
        set_a_struct(rhs.value_.a_struct);
        break;
      }
      case Type::a_set_struct:
      {
        set_a_set_struct(rhs.value_.a_set_struct);
        break;
      }
      case Type::a_union:
      {
        set_a_union(rhs.value_.a_union);
        break;
      }
      case Type::req_a_union:
      {
        set_req_a_union(rhs.value_.req_a_union);
        break;
      }
      case Type::opt_a_union:
      {
        set_opt_a_union(rhs.value_.opt_a_union);
        break;
      }
      case Type::a_union_list:
      {
        set_a_union_list(rhs.value_.a_union_list);
        break;
      }
      case Type::a_union_typedef:
      {
        set_a_union_typedef(rhs.value_.a_union_typedef);
        break;
      }
      case Type::a_union_typedef_list:
      {
        set_a_union_typedef_list(rhs.value_.a_union_typedef_list);
        break;
      }
      case Type::MyBinaryField:
      {
        set_MyBinaryField(rhs.value_.MyBinaryField);
        break;
      }
      case Type::MyBinaryField2:
      {
        set_MyBinaryField2(rhs.value_.MyBinaryField2);
        break;
      }
      case Type::MyBinaryField3:
      {
        set_MyBinaryField3(rhs.value_.MyBinaryField3);
        break;
      }
      case Type::MyBinaryListField4:
      {
        set_MyBinaryListField4(rhs.value_.MyBinaryListField4);
        break;
      }
      case Type::ref_field:
      {
        set_ref_field(*rhs.value_.ref_field);
        break;
      }
      case Type::ref_field2:
      {
        set_ref_field2(*rhs.value_.ref_field2);
        break;
      }
      case Type::excp_field:
      {
        set_excp_field(rhs.value_.excp_field);
        break;
      }
      default:
      {
        assert(false);
        break;
      }
    }
    return *this;
  }
  template <typename T__ThriftWrappedArgument__Ctor>
  ComplexUnion(::apache::thrift::detail::argument_wrapper<1, T__ThriftWrappedArgument__Ctor> arg):
    type_(Type::__EMPTY__)
  {
    set_intValue(arg.move());
  }
  template <typename T__ThriftWrappedArgument__Ctor>
  ComplexUnion(::apache::thrift::detail::argument_wrapper<101, T__ThriftWrappedArgument__Ctor> arg):
    type_(Type::__EMPTY__)
  {
    set_req_intValue(arg.move());
  }
  template <typename T__ThriftWrappedArgument__Ctor>
  ComplexUnion(::apache::thrift::detail::argument_wrapper<201, T__ThriftWrappedArgument__Ctor> arg):
    type_(Type::__EMPTY__)
  {
    set_opt_intValue(arg.move());
  }
  template <typename T__ThriftWrappedArgument__Ctor>
  ComplexUnion(::apache::thrift::detail::argument_wrapper<3, T__ThriftWrappedArgument__Ctor> arg):
    type_(Type::__EMPTY__)
  {
    set_stringValue(arg.move());
  }
  template <typename T__ThriftWrappedArgument__Ctor>
  ComplexUnion(::apache::thrift::detail::argument_wrapper<103, T__ThriftWrappedArgument__Ctor> arg):
    type_(Type::__EMPTY__)
  {
    set_req_stringValue(arg.move());
  }
  template <typename T__ThriftWrappedArgument__Ctor>
  ComplexUnion(::apache::thrift::detail::argument_wrapper<203, T__ThriftWrappedArgument__Ctor> arg):
    type_(Type::__EMPTY__)
  {
    set_opt_stringValue(arg.move());
  }
  template <typename T__ThriftWrappedArgument__Ctor>
  ComplexUnion(::apache::thrift::detail::argument_wrapper<4, T__ThriftWrappedArgument__Ctor> arg):
    type_(Type::__EMPTY__)
  {
    set_intValue2(arg.move());
  }
  template <typename T__ThriftWrappedArgument__Ctor>
  ComplexUnion(::apache::thrift::detail::argument_wrapper<6, T__ThriftWrappedArgument__Ctor> arg):
    type_(Type::__EMPTY__)
  {
    set_intValue3(arg.move());
  }
  template <typename T__ThriftWrappedArgument__Ctor>
  ComplexUnion(::apache::thrift::detail::argument_wrapper<7, T__ThriftWrappedArgument__Ctor> arg):
    type_(Type::__EMPTY__)
  {
    set_doubelValue(arg.move());
  }
  template <typename T__ThriftWrappedArgument__Ctor>
  ComplexUnion(::apache::thrift::detail::argument_wrapper<8, T__ThriftWrappedArgument__Ctor> arg):
    type_(Type::__EMPTY__)
  {
    set_boolValue(arg.move());
  }
  template <typename T__ThriftWrappedArgument__Ctor>
  ComplexUnion(::apache::thrift::detail::argument_wrapper<9, T__ThriftWrappedArgument__Ctor> arg):
    type_(Type::__EMPTY__)
  {
    set_union_list(arg.move());
  }
  template <typename T__ThriftWrappedArgument__Ctor>
  ComplexUnion(::apache::thrift::detail::argument_wrapper<10, T__ThriftWrappedArgument__Ctor> arg):
    type_(Type::__EMPTY__)
  {
    set_union_set(arg.move());
  }
  template <typename T__ThriftWrappedArgument__Ctor>
  ComplexUnion(::apache::thrift::detail::argument_wrapper<11, T__ThriftWrappedArgument__Ctor> arg):
    type_(Type::__EMPTY__)
  {
    set_union_map(arg.move());
  }
  template <typename T__ThriftWrappedArgument__Ctor>
  ComplexUnion(::apache::thrift::detail::argument_wrapper<111, T__ThriftWrappedArgument__Ctor> arg):
    type_(Type::__EMPTY__)
  {
    set_req_union_map(arg.move());
  }
  template <typename T__ThriftWrappedArgument__Ctor>
  ComplexUnion(::apache::thrift::detail::argument_wrapper<211, T__ThriftWrappedArgument__Ctor> arg):
    type_(Type::__EMPTY__)
  {
    set_opt_union_map(arg.move());
  }
  template <typename T__ThriftWrappedArgument__Ctor>
  ComplexUnion(::apache::thrift::detail::argument_wrapper<12, T__ThriftWrappedArgument__Ctor> arg):
    type_(Type::__EMPTY__)
  {
    set_enum_field(arg.move());
  }
  template <typename T__ThriftWrappedArgument__Ctor>
  ComplexUnion(::apache::thrift::detail::argument_wrapper<13, T__ThriftWrappedArgument__Ctor> arg):
    type_(Type::__EMPTY__)
  {
    set_enum_container(arg.move());
  }
  template <typename T__ThriftWrappedArgument__Ctor>
  ComplexUnion(::apache::thrift::detail::argument_wrapper<14, T__ThriftWrappedArgument__Ctor> arg):
    type_(Type::__EMPTY__)
  {
    set_a_struct(arg.move());
  }
  template <typename T__ThriftWrappedArgument__Ctor>
  ComplexUnion(::apache::thrift::detail::argument_wrapper<15, T__ThriftWrappedArgument__Ctor> arg):
    type_(Type::__EMPTY__)
  {
    set_a_set_struct(arg.move());
  }
  template <typename T__ThriftWrappedArgument__Ctor>
  ComplexUnion(::apache::thrift::detail::argument_wrapper<16, T__ThriftWrappedArgument__Ctor> arg):
    type_(Type::__EMPTY__)
  {
    set_a_union(arg.move());
  }
  template <typename T__ThriftWrappedArgument__Ctor>
  ComplexUnion(::apache::thrift::detail::argument_wrapper<116, T__ThriftWrappedArgument__Ctor> arg):
    type_(Type::__EMPTY__)
  {
    set_req_a_union(arg.move());
  }
  template <typename T__ThriftWrappedArgument__Ctor>
  ComplexUnion(::apache::thrift::detail::argument_wrapper<216, T__ThriftWrappedArgument__Ctor> arg):
    type_(Type::__EMPTY__)
  {
    set_opt_a_union(arg.move());
  }
  template <typename T__ThriftWrappedArgument__Ctor>
  ComplexUnion(::apache::thrift::detail::argument_wrapper<17, T__ThriftWrappedArgument__Ctor> arg):
    type_(Type::__EMPTY__)
  {
    set_a_union_list(arg.move());
  }
  template <typename T__ThriftWrappedArgument__Ctor>
  ComplexUnion(::apache::thrift::detail::argument_wrapper<18, T__ThriftWrappedArgument__Ctor> arg):
    type_(Type::__EMPTY__)
  {
    set_a_union_typedef(arg.move());
  }
  template <typename T__ThriftWrappedArgument__Ctor>
  ComplexUnion(::apache::thrift::detail::argument_wrapper<19, T__ThriftWrappedArgument__Ctor> arg):
    type_(Type::__EMPTY__)
  {
    set_a_union_typedef_list(arg.move());
  }
  template <typename T__ThriftWrappedArgument__Ctor>
  ComplexUnion(::apache::thrift::detail::argument_wrapper<20, T__ThriftWrappedArgument__Ctor> arg):
    type_(Type::__EMPTY__)
  {
    set_MyBinaryField(arg.move());
  }
  template <typename T__ThriftWrappedArgument__Ctor>
  ComplexUnion(::apache::thrift::detail::argument_wrapper<21, T__ThriftWrappedArgument__Ctor> arg):
    type_(Type::__EMPTY__)
  {
    set_MyBinaryField2(arg.move());
  }
  template <typename T__ThriftWrappedArgument__Ctor>
  ComplexUnion(::apache::thrift::detail::argument_wrapper<22, T__ThriftWrappedArgument__Ctor> arg):
    type_(Type::__EMPTY__)
  {
    set_MyBinaryField3(arg.move());
  }
  template <typename T__ThriftWrappedArgument__Ctor>
  ComplexUnion(::apache::thrift::detail::argument_wrapper<23, T__ThriftWrappedArgument__Ctor> arg):
    type_(Type::__EMPTY__)
  {
    set_MyBinaryListField4(arg.move());
  }
  template <typename T__ThriftWrappedArgument__Ctor>
  ComplexUnion(::apache::thrift::detail::argument_wrapper<24, T__ThriftWrappedArgument__Ctor> arg):
    type_(Type::__EMPTY__)
  {
    set_ref_field(arg.move());
  }
  template <typename T__ThriftWrappedArgument__Ctor>
  ComplexUnion(::apache::thrift::detail::argument_wrapper<25, T__ThriftWrappedArgument__Ctor> arg):
    type_(Type::__EMPTY__)
  {
    set_ref_field2(arg.move());
  }
  template <typename T__ThriftWrappedArgument__Ctor>
  ComplexUnion(::apache::thrift::detail::argument_wrapper<26, T__ThriftWrappedArgument__Ctor> arg):
    type_(Type::__EMPTY__)
  {
    set_excp_field(arg.move());
  }
  void __clear();

  virtual ~ComplexUnion() {
    __clear();
  }

  union storage_type {
    int64_t intValue;
    int64_t req_intValue;
    int64_t opt_intValue;
    std::string stringValue;
    std::string req_stringValue;
    std::string opt_stringValue;
    int16_t intValue2;
    int32_t intValue3;
    double doubelValue;
    bool boolValue;
    std::vector<int32_t> union_list;
    std::set<int64_t> union_set;
    std::map<std::string, int32_t> union_map;
    std::map<std::string, int32_t> req_union_map;
    std::map<std::string, int32_t> opt_union_map;
     ::some::valid::ns::MyEnumA enum_field;
    std::vector< ::some::valid::ns::MyEnumA> enum_container;
     ::some::valid::ns::MyStruct a_struct;
    std::set< ::some::valid::ns::MyStruct> a_set_struct;
     ::some::valid::ns::SimpleUnion a_union;
     ::some::valid::ns::SimpleUnion req_a_union;
     ::some::valid::ns::SimpleUnion opt_a_union;
    std::vector< ::some::valid::ns::SimpleUnion> a_union_list;
     ::some::valid::ns::unionTypeDef a_union_typedef;
    std::vector< ::some::valid::ns::unionTypeDef> a_union_typedef_list;
    std::string MyBinaryField;
    std::string MyBinaryField2;
    std::string MyBinaryField3;
    std::vector<std::string> MyBinaryListField4;
    std::unique_ptr< ::some::valid::ns::MyStruct> ref_field;
    std::shared_ptr<const  ::some::valid::ns::MyStruct> ref_field2;
     ::some::valid::ns::AnException excp_field;

    storage_type() {}
    ~storage_type() {}
  } ;
  bool operator==(const ComplexUnion& rhs) const;
  bool operator < (const ComplexUnion& rhs) const;

  int64_t& set_intValue(int64_t t = int64_t()) {
    __clear();
    type_ = Type::intValue;
    ::new (std::addressof(value_.intValue)) int64_t(t);
    return value_.intValue;
  }

  int64_t& set_req_intValue(int64_t t = int64_t()) {
    __clear();
    type_ = Type::req_intValue;
    ::new (std::addressof(value_.req_intValue)) int64_t(t);
    return value_.req_intValue;
  }

  int64_t& set_opt_intValue(int64_t t = int64_t()) {
    __clear();
    type_ = Type::opt_intValue;
    ::new (std::addressof(value_.opt_intValue)) int64_t(t);
    return value_.opt_intValue;
  }

  std::string& set_stringValue(std::string const &t) {
    __clear();
    type_ = Type::stringValue;
    ::new (std::addressof(value_.stringValue)) std::string(t);
    return value_.stringValue;
  }

  std::string& set_stringValue(std::string&& t) {
    __clear();
    type_ = Type::stringValue;
    ::new (std::addressof(value_.stringValue)) std::string(std::move(t));
    return value_.stringValue;
  }

  template<typename... T, typename = ::apache::thrift::safe_overload_t<std::string, T...>> std::string& set_stringValue(T&&... t) {
    __clear();
    type_ = Type::stringValue;
    ::new (std::addressof(value_.stringValue)) std::string(std::forward<T>(t)...);
    return value_.stringValue;
  }

  std::string& set_req_stringValue(std::string const &t) {
    __clear();
    type_ = Type::req_stringValue;
    ::new (std::addressof(value_.req_stringValue)) std::string(t);
    return value_.req_stringValue;
  }

  std::string& set_req_stringValue(std::string&& t) {
    __clear();
    type_ = Type::req_stringValue;
    ::new (std::addressof(value_.req_stringValue)) std::string(std::move(t));
    return value_.req_stringValue;
  }

  template<typename... T, typename = ::apache::thrift::safe_overload_t<std::string, T...>> std::string& set_req_stringValue(T&&... t) {
    __clear();
    type_ = Type::req_stringValue;
    ::new (std::addressof(value_.req_stringValue)) std::string(std::forward<T>(t)...);
    return value_.req_stringValue;
  }

  std::string& set_opt_stringValue(std::string const &t) {
    __clear();
    type_ = Type::opt_stringValue;
    ::new (std::addressof(value_.opt_stringValue)) std::string(t);
    return value_.opt_stringValue;
  }

  std::string& set_opt_stringValue(std::string&& t) {
    __clear();
    type_ = Type::opt_stringValue;
    ::new (std::addressof(value_.opt_stringValue)) std::string(std::move(t));
    return value_.opt_stringValue;
  }

  template<typename... T, typename = ::apache::thrift::safe_overload_t<std::string, T...>> std::string& set_opt_stringValue(T&&... t) {
    __clear();
    type_ = Type::opt_stringValue;
    ::new (std::addressof(value_.opt_stringValue)) std::string(std::forward<T>(t)...);
    return value_.opt_stringValue;
  }

  int16_t& set_intValue2(int16_t t = int16_t()) {
    __clear();
    type_ = Type::intValue2;
    ::new (std::addressof(value_.intValue2)) int16_t(t);
    return value_.intValue2;
  }

  int32_t& set_intValue3(int32_t t = int32_t()) {
    __clear();
    type_ = Type::intValue3;
    ::new (std::addressof(value_.intValue3)) int32_t(t);
    return value_.intValue3;
  }

  double& set_doubelValue(double t = double()) {
    __clear();
    type_ = Type::doubelValue;
    ::new (std::addressof(value_.doubelValue)) double(t);
    return value_.doubelValue;
  }

  bool& set_boolValue(bool t = bool()) {
    __clear();
    type_ = Type::boolValue;
    ::new (std::addressof(value_.boolValue)) bool(t);
    return value_.boolValue;
  }

  std::vector<int32_t>& set_union_list(std::vector<int32_t> const &t) {
    __clear();
    type_ = Type::union_list;
    ::new (std::addressof(value_.union_list)) std::vector<int32_t>(t);
    return value_.union_list;
  }

  std::vector<int32_t>& set_union_list(std::vector<int32_t>&& t) {
    __clear();
    type_ = Type::union_list;
    ::new (std::addressof(value_.union_list)) std::vector<int32_t>(std::move(t));
    return value_.union_list;
  }

  template<typename... T, typename = ::apache::thrift::safe_overload_t<std::vector<int32_t>, T...>> std::vector<int32_t>& set_union_list(T&&... t) {
    __clear();
    type_ = Type::union_list;
    ::new (std::addressof(value_.union_list)) std::vector<int32_t>(std::forward<T>(t)...);
    return value_.union_list;
  }

  std::set<int64_t>& set_union_set(std::set<int64_t> const &t) {
    __clear();
    type_ = Type::union_set;
    ::new (std::addressof(value_.union_set)) std::set<int64_t>(t);
    return value_.union_set;
  }

  std::set<int64_t>& set_union_set(std::set<int64_t>&& t) {
    __clear();
    type_ = Type::union_set;
    ::new (std::addressof(value_.union_set)) std::set<int64_t>(std::move(t));
    return value_.union_set;
  }

  template<typename... T, typename = ::apache::thrift::safe_overload_t<std::set<int64_t>, T...>> std::set<int64_t>& set_union_set(T&&... t) {
    __clear();
    type_ = Type::union_set;
    ::new (std::addressof(value_.union_set)) std::set<int64_t>(std::forward<T>(t)...);
    return value_.union_set;
  }

  std::map<std::string, int32_t>& set_union_map(std::map<std::string, int32_t> const &t) {
    __clear();
    type_ = Type::union_map;
    ::new (std::addressof(value_.union_map)) std::map<std::string, int32_t>(t);
    return value_.union_map;
  }

  std::map<std::string, int32_t>& set_union_map(std::map<std::string, int32_t>&& t) {
    __clear();
    type_ = Type::union_map;
    ::new (std::addressof(value_.union_map)) std::map<std::string, int32_t>(std::move(t));
    return value_.union_map;
  }

  template<typename... T, typename = ::apache::thrift::safe_overload_t<std::map<std::string, int32_t>, T...>> std::map<std::string, int32_t>& set_union_map(T&&... t) {
    __clear();
    type_ = Type::union_map;
    ::new (std::addressof(value_.union_map)) std::map<std::string, int32_t>(std::forward<T>(t)...);
    return value_.union_map;
  }

  std::map<std::string, int32_t>& set_req_union_map(std::map<std::string, int32_t> const &t) {
    __clear();
    type_ = Type::req_union_map;
    ::new (std::addressof(value_.req_union_map)) std::map<std::string, int32_t>(t);
    return value_.req_union_map;
  }

  std::map<std::string, int32_t>& set_req_union_map(std::map<std::string, int32_t>&& t) {
    __clear();
    type_ = Type::req_union_map;
    ::new (std::addressof(value_.req_union_map)) std::map<std::string, int32_t>(std::move(t));
    return value_.req_union_map;
  }

  template<typename... T, typename = ::apache::thrift::safe_overload_t<std::map<std::string, int32_t>, T...>> std::map<std::string, int32_t>& set_req_union_map(T&&... t) {
    __clear();
    type_ = Type::req_union_map;
    ::new (std::addressof(value_.req_union_map)) std::map<std::string, int32_t>(std::forward<T>(t)...);
    return value_.req_union_map;
  }

  std::map<std::string, int32_t>& set_opt_union_map(std::map<std::string, int32_t> const &t) {
    __clear();
    type_ = Type::opt_union_map;
    ::new (std::addressof(value_.opt_union_map)) std::map<std::string, int32_t>(t);
    return value_.opt_union_map;
  }

  std::map<std::string, int32_t>& set_opt_union_map(std::map<std::string, int32_t>&& t) {
    __clear();
    type_ = Type::opt_union_map;
    ::new (std::addressof(value_.opt_union_map)) std::map<std::string, int32_t>(std::move(t));
    return value_.opt_union_map;
  }

  template<typename... T, typename = ::apache::thrift::safe_overload_t<std::map<std::string, int32_t>, T...>> std::map<std::string, int32_t>& set_opt_union_map(T&&... t) {
    __clear();
    type_ = Type::opt_union_map;
    ::new (std::addressof(value_.opt_union_map)) std::map<std::string, int32_t>(std::forward<T>(t)...);
    return value_.opt_union_map;
  }

   ::some::valid::ns::MyEnumA& set_enum_field( ::some::valid::ns::MyEnumA t =  ::some::valid::ns::MyEnumA()) {
    __clear();
    type_ = Type::enum_field;
    ::new (std::addressof(value_.enum_field))  ::some::valid::ns::MyEnumA(t);
    return value_.enum_field;
  }

  std::vector< ::some::valid::ns::MyEnumA>& set_enum_container(std::vector< ::some::valid::ns::MyEnumA> const &t) {
    __clear();
    type_ = Type::enum_container;
    ::new (std::addressof(value_.enum_container)) std::vector< ::some::valid::ns::MyEnumA>(t);
    return value_.enum_container;
  }

  std::vector< ::some::valid::ns::MyEnumA>& set_enum_container(std::vector< ::some::valid::ns::MyEnumA>&& t) {
    __clear();
    type_ = Type::enum_container;
    ::new (std::addressof(value_.enum_container)) std::vector< ::some::valid::ns::MyEnumA>(std::move(t));
    return value_.enum_container;
  }

  template<typename... T, typename = ::apache::thrift::safe_overload_t<std::vector< ::some::valid::ns::MyEnumA>, T...>> std::vector< ::some::valid::ns::MyEnumA>& set_enum_container(T&&... t) {
    __clear();
    type_ = Type::enum_container;
    ::new (std::addressof(value_.enum_container)) std::vector< ::some::valid::ns::MyEnumA>(std::forward<T>(t)...);
    return value_.enum_container;
  }

   ::some::valid::ns::MyStruct& set_a_struct( ::some::valid::ns::MyStruct const &t) {
    __clear();
    type_ = Type::a_struct;
    ::new (std::addressof(value_.a_struct))  ::some::valid::ns::MyStruct(t);
    return value_.a_struct;
  }

   ::some::valid::ns::MyStruct& set_a_struct( ::some::valid::ns::MyStruct&& t) {
    __clear();
    type_ = Type::a_struct;
    ::new (std::addressof(value_.a_struct))  ::some::valid::ns::MyStruct(std::move(t));
    return value_.a_struct;
  }

  template<typename... T, typename = ::apache::thrift::safe_overload_t< ::some::valid::ns::MyStruct, T...>>  ::some::valid::ns::MyStruct& set_a_struct(T&&... t) {
    __clear();
    type_ = Type::a_struct;
    ::new (std::addressof(value_.a_struct))  ::some::valid::ns::MyStruct(std::forward<T>(t)...);
    return value_.a_struct;
  }

  std::set< ::some::valid::ns::MyStruct>& set_a_set_struct(std::set< ::some::valid::ns::MyStruct> const &t) {
    __clear();
    type_ = Type::a_set_struct;
    ::new (std::addressof(value_.a_set_struct)) std::set< ::some::valid::ns::MyStruct>(t);
    return value_.a_set_struct;
  }

  std::set< ::some::valid::ns::MyStruct>& set_a_set_struct(std::set< ::some::valid::ns::MyStruct>&& t) {
    __clear();
    type_ = Type::a_set_struct;
    ::new (std::addressof(value_.a_set_struct)) std::set< ::some::valid::ns::MyStruct>(std::move(t));
    return value_.a_set_struct;
  }

  template<typename... T, typename = ::apache::thrift::safe_overload_t<std::set< ::some::valid::ns::MyStruct>, T...>> std::set< ::some::valid::ns::MyStruct>& set_a_set_struct(T&&... t) {
    __clear();
    type_ = Type::a_set_struct;
    ::new (std::addressof(value_.a_set_struct)) std::set< ::some::valid::ns::MyStruct>(std::forward<T>(t)...);
    return value_.a_set_struct;
  }

   ::some::valid::ns::SimpleUnion& set_a_union( ::some::valid::ns::SimpleUnion const &t) {
    __clear();
    type_ = Type::a_union;
    ::new (std::addressof(value_.a_union))  ::some::valid::ns::SimpleUnion(t);
    return value_.a_union;
  }

   ::some::valid::ns::SimpleUnion& set_a_union( ::some::valid::ns::SimpleUnion&& t) {
    __clear();
    type_ = Type::a_union;
    ::new (std::addressof(value_.a_union))  ::some::valid::ns::SimpleUnion(std::move(t));
    return value_.a_union;
  }

  template<typename... T, typename = ::apache::thrift::safe_overload_t< ::some::valid::ns::SimpleUnion, T...>>  ::some::valid::ns::SimpleUnion& set_a_union(T&&... t) {
    __clear();
    type_ = Type::a_union;
    ::new (std::addressof(value_.a_union))  ::some::valid::ns::SimpleUnion(std::forward<T>(t)...);
    return value_.a_union;
  }

   ::some::valid::ns::SimpleUnion& set_req_a_union( ::some::valid::ns::SimpleUnion const &t) {
    __clear();
    type_ = Type::req_a_union;
    ::new (std::addressof(value_.req_a_union))  ::some::valid::ns::SimpleUnion(t);
    return value_.req_a_union;
  }

   ::some::valid::ns::SimpleUnion& set_req_a_union( ::some::valid::ns::SimpleUnion&& t) {
    __clear();
    type_ = Type::req_a_union;
    ::new (std::addressof(value_.req_a_union))  ::some::valid::ns::SimpleUnion(std::move(t));
    return value_.req_a_union;
  }

  template<typename... T, typename = ::apache::thrift::safe_overload_t< ::some::valid::ns::SimpleUnion, T...>>  ::some::valid::ns::SimpleUnion& set_req_a_union(T&&... t) {
    __clear();
    type_ = Type::req_a_union;
    ::new (std::addressof(value_.req_a_union))  ::some::valid::ns::SimpleUnion(std::forward<T>(t)...);
    return value_.req_a_union;
  }

   ::some::valid::ns::SimpleUnion& set_opt_a_union( ::some::valid::ns::SimpleUnion const &t) {
    __clear();
    type_ = Type::opt_a_union;
    ::new (std::addressof(value_.opt_a_union))  ::some::valid::ns::SimpleUnion(t);
    return value_.opt_a_union;
  }

   ::some::valid::ns::SimpleUnion& set_opt_a_union( ::some::valid::ns::SimpleUnion&& t) {
    __clear();
    type_ = Type::opt_a_union;
    ::new (std::addressof(value_.opt_a_union))  ::some::valid::ns::SimpleUnion(std::move(t));
    return value_.opt_a_union;
  }

  template<typename... T, typename = ::apache::thrift::safe_overload_t< ::some::valid::ns::SimpleUnion, T...>>  ::some::valid::ns::SimpleUnion& set_opt_a_union(T&&... t) {
    __clear();
    type_ = Type::opt_a_union;
    ::new (std::addressof(value_.opt_a_union))  ::some::valid::ns::SimpleUnion(std::forward<T>(t)...);
    return value_.opt_a_union;
  }

  std::vector< ::some::valid::ns::SimpleUnion>& set_a_union_list(std::vector< ::some::valid::ns::SimpleUnion> const &t) {
    __clear();
    type_ = Type::a_union_list;
    ::new (std::addressof(value_.a_union_list)) std::vector< ::some::valid::ns::SimpleUnion>(t);
    return value_.a_union_list;
  }

  std::vector< ::some::valid::ns::SimpleUnion>& set_a_union_list(std::vector< ::some::valid::ns::SimpleUnion>&& t) {
    __clear();
    type_ = Type::a_union_list;
    ::new (std::addressof(value_.a_union_list)) std::vector< ::some::valid::ns::SimpleUnion>(std::move(t));
    return value_.a_union_list;
  }

  template<typename... T, typename = ::apache::thrift::safe_overload_t<std::vector< ::some::valid::ns::SimpleUnion>, T...>> std::vector< ::some::valid::ns::SimpleUnion>& set_a_union_list(T&&... t) {
    __clear();
    type_ = Type::a_union_list;
    ::new (std::addressof(value_.a_union_list)) std::vector< ::some::valid::ns::SimpleUnion>(std::forward<T>(t)...);
    return value_.a_union_list;
  }

   ::some::valid::ns::unionTypeDef& set_a_union_typedef( ::some::valid::ns::unionTypeDef const &t) {
    __clear();
    type_ = Type::a_union_typedef;
    ::new (std::addressof(value_.a_union_typedef))  ::some::valid::ns::unionTypeDef(t);
    return value_.a_union_typedef;
  }

   ::some::valid::ns::unionTypeDef& set_a_union_typedef( ::some::valid::ns::unionTypeDef&& t) {
    __clear();
    type_ = Type::a_union_typedef;
    ::new (std::addressof(value_.a_union_typedef))  ::some::valid::ns::unionTypeDef(std::move(t));
    return value_.a_union_typedef;
  }

  template<typename... T, typename = ::apache::thrift::safe_overload_t< ::some::valid::ns::unionTypeDef, T...>>  ::some::valid::ns::unionTypeDef& set_a_union_typedef(T&&... t) {
    __clear();
    type_ = Type::a_union_typedef;
    ::new (std::addressof(value_.a_union_typedef))  ::some::valid::ns::unionTypeDef(std::forward<T>(t)...);
    return value_.a_union_typedef;
  }

  std::vector< ::some::valid::ns::unionTypeDef>& set_a_union_typedef_list(std::vector< ::some::valid::ns::unionTypeDef> const &t) {
    __clear();
    type_ = Type::a_union_typedef_list;
    ::new (std::addressof(value_.a_union_typedef_list)) std::vector< ::some::valid::ns::unionTypeDef>(t);
    return value_.a_union_typedef_list;
  }

  std::vector< ::some::valid::ns::unionTypeDef>& set_a_union_typedef_list(std::vector< ::some::valid::ns::unionTypeDef>&& t) {
    __clear();
    type_ = Type::a_union_typedef_list;
    ::new (std::addressof(value_.a_union_typedef_list)) std::vector< ::some::valid::ns::unionTypeDef>(std::move(t));
    return value_.a_union_typedef_list;
  }

  template<typename... T, typename = ::apache::thrift::safe_overload_t<std::vector< ::some::valid::ns::unionTypeDef>, T...>> std::vector< ::some::valid::ns::unionTypeDef>& set_a_union_typedef_list(T&&... t) {
    __clear();
    type_ = Type::a_union_typedef_list;
    ::new (std::addressof(value_.a_union_typedef_list)) std::vector< ::some::valid::ns::unionTypeDef>(std::forward<T>(t)...);
    return value_.a_union_typedef_list;
  }

  std::string& set_MyBinaryField(std::string const &t) {
    __clear();
    type_ = Type::MyBinaryField;
    ::new (std::addressof(value_.MyBinaryField)) std::string(t);
    return value_.MyBinaryField;
  }

  std::string& set_MyBinaryField(std::string&& t) {
    __clear();
    type_ = Type::MyBinaryField;
    ::new (std::addressof(value_.MyBinaryField)) std::string(std::move(t));
    return value_.MyBinaryField;
  }

  template<typename... T, typename = ::apache::thrift::safe_overload_t<std::string, T...>> std::string& set_MyBinaryField(T&&... t) {
    __clear();
    type_ = Type::MyBinaryField;
    ::new (std::addressof(value_.MyBinaryField)) std::string(std::forward<T>(t)...);
    return value_.MyBinaryField;
  }

  std::string& set_MyBinaryField2(std::string const &t) {
    __clear();
    type_ = Type::MyBinaryField2;
    ::new (std::addressof(value_.MyBinaryField2)) std::string(t);
    return value_.MyBinaryField2;
  }

  std::string& set_MyBinaryField2(std::string&& t) {
    __clear();
    type_ = Type::MyBinaryField2;
    ::new (std::addressof(value_.MyBinaryField2)) std::string(std::move(t));
    return value_.MyBinaryField2;
  }

  template<typename... T, typename = ::apache::thrift::safe_overload_t<std::string, T...>> std::string& set_MyBinaryField2(T&&... t) {
    __clear();
    type_ = Type::MyBinaryField2;
    ::new (std::addressof(value_.MyBinaryField2)) std::string(std::forward<T>(t)...);
    return value_.MyBinaryField2;
  }

  std::string& set_MyBinaryField3(std::string const &t) {
    __clear();
    type_ = Type::MyBinaryField3;
    ::new (std::addressof(value_.MyBinaryField3)) std::string(t);
    return value_.MyBinaryField3;
  }

  std::string& set_MyBinaryField3(std::string&& t) {
    __clear();
    type_ = Type::MyBinaryField3;
    ::new (std::addressof(value_.MyBinaryField3)) std::string(std::move(t));
    return value_.MyBinaryField3;
  }

  template<typename... T, typename = ::apache::thrift::safe_overload_t<std::string, T...>> std::string& set_MyBinaryField3(T&&... t) {
    __clear();
    type_ = Type::MyBinaryField3;
    ::new (std::addressof(value_.MyBinaryField3)) std::string(std::forward<T>(t)...);
    return value_.MyBinaryField3;
  }

  std::vector<std::string>& set_MyBinaryListField4(std::vector<std::string> const &t) {
    __clear();
    type_ = Type::MyBinaryListField4;
    ::new (std::addressof(value_.MyBinaryListField4)) std::vector<std::string>(t);
    return value_.MyBinaryListField4;
  }

  std::vector<std::string>& set_MyBinaryListField4(std::vector<std::string>&& t) {
    __clear();
    type_ = Type::MyBinaryListField4;
    ::new (std::addressof(value_.MyBinaryListField4)) std::vector<std::string>(std::move(t));
    return value_.MyBinaryListField4;
  }

  template<typename... T, typename = ::apache::thrift::safe_overload_t<std::vector<std::string>, T...>> std::vector<std::string>& set_MyBinaryListField4(T&&... t) {
    __clear();
    type_ = Type::MyBinaryListField4;
    ::new (std::addressof(value_.MyBinaryListField4)) std::vector<std::string>(std::forward<T>(t)...);
    return value_.MyBinaryListField4;
  }
  std::unique_ptr< ::some::valid::ns::MyStruct>& set_ref_field( ::some::valid::ns::MyStruct const &t);
  std::unique_ptr< ::some::valid::ns::MyStruct>& set_ref_field( ::some::valid::ns::MyStruct&& t);
  template<typename... T, typename = ::apache::thrift::safe_overload_t< ::some::valid::ns::MyStruct, T...>> std::unique_ptr< ::some::valid::ns::MyStruct>& set_ref_field(T&&... t);
  std::shared_ptr<const  ::some::valid::ns::MyStruct>& set_ref_field2( ::some::valid::ns::MyStruct const &t);
  std::shared_ptr<const  ::some::valid::ns::MyStruct>& set_ref_field2( ::some::valid::ns::MyStruct&& t);
  template<typename... T, typename = ::apache::thrift::safe_overload_t< ::some::valid::ns::MyStruct, T...>> std::shared_ptr<const  ::some::valid::ns::MyStruct>& set_ref_field2(T&&... t);

   ::some::valid::ns::AnException& set_excp_field( ::some::valid::ns::AnException const &t) {
    __clear();
    type_ = Type::excp_field;
    ::new (std::addressof(value_.excp_field))  ::some::valid::ns::AnException(t);
    return value_.excp_field;
  }

   ::some::valid::ns::AnException& set_excp_field( ::some::valid::ns::AnException&& t) {
    __clear();
    type_ = Type::excp_field;
    ::new (std::addressof(value_.excp_field))  ::some::valid::ns::AnException(std::move(t));
    return value_.excp_field;
  }

  template<typename... T, typename = ::apache::thrift::safe_overload_t< ::some::valid::ns::AnException, T...>>  ::some::valid::ns::AnException& set_excp_field(T&&... t) {
    __clear();
    type_ = Type::excp_field;
    ::new (std::addressof(value_.excp_field))  ::some::valid::ns::AnException(std::forward<T>(t)...);
    return value_.excp_field;
  }

  int64_t const & get_intValue() const {
    assert(type_ == Type::intValue);
    return value_.intValue;
  }

  int64_t const & get_req_intValue() const {
    assert(type_ == Type::req_intValue);
    return value_.req_intValue;
  }

  int64_t const & get_opt_intValue() const {
    assert(type_ == Type::opt_intValue);
    return value_.opt_intValue;
  }

  std::string const & get_stringValue() const {
    assert(type_ == Type::stringValue);
    return value_.stringValue;
  }

  std::string const & get_req_stringValue() const {
    assert(type_ == Type::req_stringValue);
    return value_.req_stringValue;
  }

  std::string const & get_opt_stringValue() const {
    assert(type_ == Type::opt_stringValue);
    return value_.opt_stringValue;
  }

  int16_t const & get_intValue2() const {
    assert(type_ == Type::intValue2);
    return value_.intValue2;
  }

  int32_t const & get_intValue3() const {
    assert(type_ == Type::intValue3);
    return value_.intValue3;
  }

  double const & get_doubelValue() const {
    assert(type_ == Type::doubelValue);
    return value_.doubelValue;
  }

  bool const & get_boolValue() const {
    assert(type_ == Type::boolValue);
    return value_.boolValue;
  }

  std::vector<int32_t> const & get_union_list() const {
    assert(type_ == Type::union_list);
    return value_.union_list;
  }

  std::set<int64_t> const & get_union_set() const {
    assert(type_ == Type::union_set);
    return value_.union_set;
  }

  std::map<std::string, int32_t> const & get_union_map() const {
    assert(type_ == Type::union_map);
    return value_.union_map;
  }

  std::map<std::string, int32_t> const & get_req_union_map() const {
    assert(type_ == Type::req_union_map);
    return value_.req_union_map;
  }

  std::map<std::string, int32_t> const & get_opt_union_map() const {
    assert(type_ == Type::opt_union_map);
    return value_.opt_union_map;
  }

   ::some::valid::ns::MyEnumA const & get_enum_field() const {
    assert(type_ == Type::enum_field);
    return value_.enum_field;
  }

  std::vector< ::some::valid::ns::MyEnumA> const & get_enum_container() const {
    assert(type_ == Type::enum_container);
    return value_.enum_container;
  }

   ::some::valid::ns::MyStruct const & get_a_struct() const {
    assert(type_ == Type::a_struct);
    return value_.a_struct;
  }

  std::set< ::some::valid::ns::MyStruct> const & get_a_set_struct() const {
    assert(type_ == Type::a_set_struct);
    return value_.a_set_struct;
  }

   ::some::valid::ns::SimpleUnion const & get_a_union() const {
    assert(type_ == Type::a_union);
    return value_.a_union;
  }

   ::some::valid::ns::SimpleUnion const & get_req_a_union() const {
    assert(type_ == Type::req_a_union);
    return value_.req_a_union;
  }

   ::some::valid::ns::SimpleUnion const & get_opt_a_union() const {
    assert(type_ == Type::opt_a_union);
    return value_.opt_a_union;
  }

  std::vector< ::some::valid::ns::SimpleUnion> const & get_a_union_list() const {
    assert(type_ == Type::a_union_list);
    return value_.a_union_list;
  }

   ::some::valid::ns::unionTypeDef const & get_a_union_typedef() const {
    assert(type_ == Type::a_union_typedef);
    return value_.a_union_typedef;
  }

  std::vector< ::some::valid::ns::unionTypeDef> const & get_a_union_typedef_list() const {
    assert(type_ == Type::a_union_typedef_list);
    return value_.a_union_typedef_list;
  }

  std::string const & get_MyBinaryField() const {
    assert(type_ == Type::MyBinaryField);
    return value_.MyBinaryField;
  }

  std::string const & get_MyBinaryField2() const {
    assert(type_ == Type::MyBinaryField2);
    return value_.MyBinaryField2;
  }

  std::string const & get_MyBinaryField3() const {
    assert(type_ == Type::MyBinaryField3);
    return value_.MyBinaryField3;
  }

  std::vector<std::string> const & get_MyBinaryListField4() const {
    assert(type_ == Type::MyBinaryListField4);
    return value_.MyBinaryListField4;
  }

  std::unique_ptr< ::some::valid::ns::MyStruct> const & get_ref_field() const {
    assert(type_ == Type::ref_field);
    return value_.ref_field;
  }

  std::shared_ptr<const  ::some::valid::ns::MyStruct> const & get_ref_field2() const {
    assert(type_ == Type::ref_field2);
    return value_.ref_field2;
  }

   ::some::valid::ns::AnException const & get_excp_field() const {
    assert(type_ == Type::excp_field);
    return value_.excp_field;
  }

  int64_t & mutable_intValue() {
    assert(type_ == Type::intValue);
    return value_.intValue;
  }

  int64_t & mutable_req_intValue() {
    assert(type_ == Type::req_intValue);
    return value_.req_intValue;
  }

  int64_t & mutable_opt_intValue() {
    assert(type_ == Type::opt_intValue);
    return value_.opt_intValue;
  }

  std::string & mutable_stringValue() {
    assert(type_ == Type::stringValue);
    return value_.stringValue;
  }

  std::string & mutable_req_stringValue() {
    assert(type_ == Type::req_stringValue);
    return value_.req_stringValue;
  }

  std::string & mutable_opt_stringValue() {
    assert(type_ == Type::opt_stringValue);
    return value_.opt_stringValue;
  }

  int16_t & mutable_intValue2() {
    assert(type_ == Type::intValue2);
    return value_.intValue2;
  }

  int32_t & mutable_intValue3() {
    assert(type_ == Type::intValue3);
    return value_.intValue3;
  }

  double & mutable_doubelValue() {
    assert(type_ == Type::doubelValue);
    return value_.doubelValue;
  }

  bool & mutable_boolValue() {
    assert(type_ == Type::boolValue);
    return value_.boolValue;
  }

  std::vector<int32_t> & mutable_union_list() {
    assert(type_ == Type::union_list);
    return value_.union_list;
  }

  std::set<int64_t> & mutable_union_set() {
    assert(type_ == Type::union_set);
    return value_.union_set;
  }

  std::map<std::string, int32_t> & mutable_union_map() {
    assert(type_ == Type::union_map);
    return value_.union_map;
  }

  std::map<std::string, int32_t> & mutable_req_union_map() {
    assert(type_ == Type::req_union_map);
    return value_.req_union_map;
  }

  std::map<std::string, int32_t> & mutable_opt_union_map() {
    assert(type_ == Type::opt_union_map);
    return value_.opt_union_map;
  }

   ::some::valid::ns::MyEnumA & mutable_enum_field() {
    assert(type_ == Type::enum_field);
    return value_.enum_field;
  }

  std::vector< ::some::valid::ns::MyEnumA> & mutable_enum_container() {
    assert(type_ == Type::enum_container);
    return value_.enum_container;
  }

   ::some::valid::ns::MyStruct & mutable_a_struct() {
    assert(type_ == Type::a_struct);
    return value_.a_struct;
  }

  std::set< ::some::valid::ns::MyStruct> & mutable_a_set_struct() {
    assert(type_ == Type::a_set_struct);
    return value_.a_set_struct;
  }

   ::some::valid::ns::SimpleUnion & mutable_a_union() {
    assert(type_ == Type::a_union);
    return value_.a_union;
  }

   ::some::valid::ns::SimpleUnion & mutable_req_a_union() {
    assert(type_ == Type::req_a_union);
    return value_.req_a_union;
  }

   ::some::valid::ns::SimpleUnion & mutable_opt_a_union() {
    assert(type_ == Type::opt_a_union);
    return value_.opt_a_union;
  }

  std::vector< ::some::valid::ns::SimpleUnion> & mutable_a_union_list() {
    assert(type_ == Type::a_union_list);
    return value_.a_union_list;
  }

   ::some::valid::ns::unionTypeDef & mutable_a_union_typedef() {
    assert(type_ == Type::a_union_typedef);
    return value_.a_union_typedef;
  }

  std::vector< ::some::valid::ns::unionTypeDef> & mutable_a_union_typedef_list() {
    assert(type_ == Type::a_union_typedef_list);
    return value_.a_union_typedef_list;
  }

  std::string & mutable_MyBinaryField() {
    assert(type_ == Type::MyBinaryField);
    return value_.MyBinaryField;
  }

  std::string & mutable_MyBinaryField2() {
    assert(type_ == Type::MyBinaryField2);
    return value_.MyBinaryField2;
  }

  std::string & mutable_MyBinaryField3() {
    assert(type_ == Type::MyBinaryField3);
    return value_.MyBinaryField3;
  }

  std::vector<std::string> & mutable_MyBinaryListField4() {
    assert(type_ == Type::MyBinaryListField4);
    return value_.MyBinaryListField4;
  }

  std::unique_ptr< ::some::valid::ns::MyStruct> & mutable_ref_field() {
    assert(type_ == Type::ref_field);
    return value_.ref_field;
  }

  std::shared_ptr<const  ::some::valid::ns::MyStruct> & mutable_ref_field2() {
    assert(type_ == Type::ref_field2);
    return value_.ref_field2;
  }

   ::some::valid::ns::AnException & mutable_excp_field() {
    assert(type_ == Type::excp_field);
    return value_.excp_field;
  }

  int64_t move_intValue() {
    assert(type_ == Type::intValue);
    return std::move(value_.intValue);
  }

  int64_t move_req_intValue() {
    assert(type_ == Type::req_intValue);
    return std::move(value_.req_intValue);
  }

  int64_t move_opt_intValue() {
    assert(type_ == Type::opt_intValue);
    return std::move(value_.opt_intValue);
  }

  std::string move_stringValue() {
    assert(type_ == Type::stringValue);
    return std::move(value_.stringValue);
  }

  std::string move_req_stringValue() {
    assert(type_ == Type::req_stringValue);
    return std::move(value_.req_stringValue);
  }

  std::string move_opt_stringValue() {
    assert(type_ == Type::opt_stringValue);
    return std::move(value_.opt_stringValue);
  }

  int16_t move_intValue2() {
    assert(type_ == Type::intValue2);
    return std::move(value_.intValue2);
  }

  int32_t move_intValue3() {
    assert(type_ == Type::intValue3);
    return std::move(value_.intValue3);
  }

  double move_doubelValue() {
    assert(type_ == Type::doubelValue);
    return std::move(value_.doubelValue);
  }

  bool move_boolValue() {
    assert(type_ == Type::boolValue);
    return std::move(value_.boolValue);
  }

  std::vector<int32_t> move_union_list() {
    assert(type_ == Type::union_list);
    return std::move(value_.union_list);
  }

  std::set<int64_t> move_union_set() {
    assert(type_ == Type::union_set);
    return std::move(value_.union_set);
  }

  std::map<std::string, int32_t> move_union_map() {
    assert(type_ == Type::union_map);
    return std::move(value_.union_map);
  }

  std::map<std::string, int32_t> move_req_union_map() {
    assert(type_ == Type::req_union_map);
    return std::move(value_.req_union_map);
  }

  std::map<std::string, int32_t> move_opt_union_map() {
    assert(type_ == Type::opt_union_map);
    return std::move(value_.opt_union_map);
  }

   ::some::valid::ns::MyEnumA move_enum_field() {
    assert(type_ == Type::enum_field);
    return std::move(value_.enum_field);
  }

  std::vector< ::some::valid::ns::MyEnumA> move_enum_container() {
    assert(type_ == Type::enum_container);
    return std::move(value_.enum_container);
  }

   ::some::valid::ns::MyStruct move_a_struct() {
    assert(type_ == Type::a_struct);
    return std::move(value_.a_struct);
  }

  std::set< ::some::valid::ns::MyStruct> move_a_set_struct() {
    assert(type_ == Type::a_set_struct);
    return std::move(value_.a_set_struct);
  }

   ::some::valid::ns::SimpleUnion move_a_union() {
    assert(type_ == Type::a_union);
    return std::move(value_.a_union);
  }

   ::some::valid::ns::SimpleUnion move_req_a_union() {
    assert(type_ == Type::req_a_union);
    return std::move(value_.req_a_union);
  }

   ::some::valid::ns::SimpleUnion move_opt_a_union() {
    assert(type_ == Type::opt_a_union);
    return std::move(value_.opt_a_union);
  }

  std::vector< ::some::valid::ns::SimpleUnion> move_a_union_list() {
    assert(type_ == Type::a_union_list);
    return std::move(value_.a_union_list);
  }

   ::some::valid::ns::unionTypeDef move_a_union_typedef() {
    assert(type_ == Type::a_union_typedef);
    return std::move(value_.a_union_typedef);
  }

  std::vector< ::some::valid::ns::unionTypeDef> move_a_union_typedef_list() {
    assert(type_ == Type::a_union_typedef_list);
    return std::move(value_.a_union_typedef_list);
  }

  std::string move_MyBinaryField() {
    assert(type_ == Type::MyBinaryField);
    return std::move(value_.MyBinaryField);
  }

  std::string move_MyBinaryField2() {
    assert(type_ == Type::MyBinaryField2);
    return std::move(value_.MyBinaryField2);
  }

  std::string move_MyBinaryField3() {
    assert(type_ == Type::MyBinaryField3);
    return std::move(value_.MyBinaryField3);
  }

  std::vector<std::string> move_MyBinaryListField4() {
    assert(type_ == Type::MyBinaryListField4);
    return std::move(value_.MyBinaryListField4);
  }

  std::unique_ptr< ::some::valid::ns::MyStruct> move_ref_field() {
    assert(type_ == Type::ref_field);
    return std::move(value_.ref_field);
  }

  std::shared_ptr<const  ::some::valid::ns::MyStruct> move_ref_field2() {
    assert(type_ == Type::ref_field2);
    return std::move(value_.ref_field2);
  }

   ::some::valid::ns::AnException move_excp_field() {
    assert(type_ == Type::excp_field);
    return std::move(value_.excp_field);
  }

  Type getType() const { return type_; }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
 protected:
  template <class T>
  void destruct(T &val) {
    (&val)->~T();
  }

  Type type_;
  storage_type value_;
  // user defined code (cpp2.methods = ...)
  void foo(const std::string& bar) {}

 private:
  static void translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype);
};

void swap(ComplexUnion& a, ComplexUnion& b);
extern template uint32_t ComplexUnion::read<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t ComplexUnion::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t ComplexUnion::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t ComplexUnion::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t ComplexUnion::read<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t ComplexUnion::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t ComplexUnion::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t ComplexUnion::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t ComplexUnion::read<>(apache::thrift::SimpleJSONProtocolReader*);
extern template uint32_t ComplexUnion::write<>(apache::thrift::SimpleJSONProtocolWriter*) const;
extern template uint32_t ComplexUnion::serializedSize<>(apache::thrift::SimpleJSONProtocolWriter const*) const;
extern template uint32_t ComplexUnion::serializedSizeZC<>(apache::thrift::SimpleJSONProtocolWriter const*) const;

}}} // some::valid::ns
namespace apache { namespace thrift {

template <> inline void Cpp2Ops< ::some::valid::ns::ComplexUnion>::clear( ::some::valid::ns::ComplexUnion* obj) {
  return obj->__clear();
}

template <> inline constexpr apache::thrift::protocol::TType Cpp2Ops< ::some::valid::ns::ComplexUnion>::thriftType() {
  return apache::thrift::protocol::T_STRUCT;
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::some::valid::ns::ComplexUnion>::write(Protocol* proto,  ::some::valid::ns::ComplexUnion const* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::some::valid::ns::ComplexUnion>::read(Protocol* proto,  ::some::valid::ns::ComplexUnion* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::some::valid::ns::ComplexUnion>::serializedSize(Protocol const* proto,  ::some::valid::ns::ComplexUnion const* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::some::valid::ns::ComplexUnion>::serializedSizeZC(Protocol const* proto,  ::some::valid::ns::ComplexUnion const* obj) {
  return obj->serializedSizeZC(proto);
}

}} // apache::thrift
namespace some { namespace valid { namespace ns {
class AnException : private apache::thrift::detail::st::ComparisonOperators<AnException>, public apache::thrift::TException {
 public:

  AnException() :
      code(0),
      req_code(0),
      exception_list(std::initializer_list<int32_t>{1,
  2,
  3}),
      enum_field(static_cast< ::some::valid::ns::MyEnumA>(0)) {}

  explicit AnException(const std::string& __message) :
      message2(__message) {}

  explicit AnException(std::string&& __message) :
      message2(std::move(__message)) {}
  // FragileConstructor for use in initialization lists only

  AnException(apache::thrift::FragileConstructor, int32_t code__arg, int32_t req_code__arg, std::string message2__arg, std::string req_message__arg, std::vector<int32_t> exception_list__arg, std::set<int64_t> exception_set__arg, std::map<std::string, int32_t> exception_map__arg, std::map<std::string, int32_t> req_exception_map__arg,  ::some::valid::ns::MyEnumA enum_field__arg, std::vector< ::some::valid::ns::MyEnumA> enum_container__arg,  ::some::valid::ns::MyStruct a_struct__arg, std::set< ::some::valid::ns::MyStruct> a_set_struct__arg, std::vector< ::some::valid::ns::SimpleUnion> a_union_list__arg,  ::some::valid::ns::unionTypeDef union_typedef__arg, std::vector< ::some::valid::ns::unionTypeDef> a_union_typedef_list__arg) :
      code(std::move(code__arg)),
      req_code(std::move(req_code__arg)),
      message2(std::move(message2__arg)),
      req_message(std::move(req_message__arg)),
      exception_list(std::move(exception_list__arg)),
      exception_set(std::move(exception_set__arg)),
      exception_map(std::move(exception_map__arg)),
      req_exception_map(std::move(req_exception_map__arg)),
      enum_field(std::move(enum_field__arg)),
      enum_container(std::move(enum_container__arg)),
      a_struct(std::move(a_struct__arg)),
      a_set_struct(std::move(a_set_struct__arg)),
      a_union_list(std::move(a_union_list__arg)),
      union_typedef(std::move(union_typedef__arg)),
      a_union_typedef_list(std::move(a_union_typedef_list__arg)) {
    __isset.code = true;
    __isset.message2 = true;
    __isset.exception_list = true;
    __isset.exception_set = true;
    __isset.exception_map = true;
    __isset.enum_field = true;
    __isset.enum_container = true;
    __isset.a_struct = true;
    __isset.a_set_struct = true;
    __isset.a_union_list = true;
    __isset.union_typedef = true;
    __isset.a_union_typedef_list = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  AnException(::apache::thrift::detail::argument_wrapper<1, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    AnException(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    code = arg.move();
    __isset.code = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  AnException(::apache::thrift::detail::argument_wrapper<101, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    AnException(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    req_code = arg.move();
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  AnException(::apache::thrift::detail::argument_wrapper<2, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    AnException(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    message2 = arg.move();
    __isset.message2 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  AnException(::apache::thrift::detail::argument_wrapper<102, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    AnException(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    req_message = arg.move();
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  AnException(::apache::thrift::detail::argument_wrapper<3, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    AnException(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    exception_list = arg.move();
    __isset.exception_list = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  AnException(::apache::thrift::detail::argument_wrapper<4, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    AnException(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    exception_set = arg.move();
    __isset.exception_set = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  AnException(::apache::thrift::detail::argument_wrapper<5, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    AnException(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    exception_map = arg.move();
    __isset.exception_map = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  AnException(::apache::thrift::detail::argument_wrapper<105, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    AnException(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    req_exception_map = arg.move();
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  AnException(::apache::thrift::detail::argument_wrapper<6, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    AnException(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    enum_field = arg.move();
    __isset.enum_field = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  AnException(::apache::thrift::detail::argument_wrapper<7, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    AnException(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    enum_container = arg.move();
    __isset.enum_container = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  AnException(::apache::thrift::detail::argument_wrapper<8, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    AnException(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    a_struct = arg.move();
    __isset.a_struct = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  AnException(::apache::thrift::detail::argument_wrapper<9, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    AnException(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    a_set_struct = arg.move();
    __isset.a_set_struct = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  AnException(::apache::thrift::detail::argument_wrapper<10, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    AnException(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    a_union_list = arg.move();
    __isset.a_union_list = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  AnException(::apache::thrift::detail::argument_wrapper<11, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    AnException(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    union_typedef = arg.move();
    __isset.union_typedef = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  AnException(::apache::thrift::detail::argument_wrapper<19, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    AnException(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    a_union_typedef_list = arg.move();
    __isset.a_union_typedef_list = true;
  }

  AnException(AnException&&) = default;

  AnException(const AnException&) = default;

  AnException& operator=(AnException&&) = default;

  AnException& operator=(const AnException&) = default;
  void __clear();

  virtual ~AnException() {}

  int32_t code;
  int32_t req_code;
  std::string message2;
  std::string req_message;
  std::vector<int32_t> exception_list;
  std::set<int64_t> exception_set;
  std::map<std::string, int32_t> exception_map;
  std::map<std::string, int32_t> req_exception_map;
   ::some::valid::ns::MyEnumA enum_field;
  std::vector< ::some::valid::ns::MyEnumA> enum_container;
   ::some::valid::ns::MyStruct a_struct;
  std::set< ::some::valid::ns::MyStruct> a_set_struct;
  std::vector< ::some::valid::ns::SimpleUnion> a_union_list;
   ::some::valid::ns::unionTypeDef union_typedef;
  std::vector< ::some::valid::ns::unionTypeDef> a_union_typedef_list;

  struct __isset {
    void __clear() {
      code = false;
      message2 = false;
      exception_list = false;
      exception_set = false;
      exception_map = false;
      enum_field = false;
      enum_container = false;
      a_struct = false;
      a_set_struct = false;
      a_union_list = false;
      union_typedef = false;
      a_union_typedef_list = false;
    }

    bool code = false;
    bool message2 = false;
    bool exception_list = false;
    bool exception_set = false;
    bool exception_map = false;
    bool enum_field = false;
    bool enum_container = false;
    bool a_struct = false;
    bool a_set_struct = false;
    bool a_union_list = false;
    bool union_typedef = false;
    bool a_union_typedef_list = false;
  } __isset;
  bool operator==(const AnException& rhs) const;
  bool operator < (const AnException& rhs) const;

  int32_t get_code() const {
    return code;
  }

  int32_t& set_code(int32_t code_) {
    code = code_;
    __isset.code = true;
    return code;
  }

  int32_t get_req_code() const {
    return req_code;
  }

  int32_t& set_req_code(int32_t req_code_) {
    req_code = req_code_;
    return req_code;
  }

  const std::string& get_message2() const& {
    return message2;
  }

  std::string get_message2() && {
    return std::move(message2);
  }

  template <typename T_AnException_message2_struct_setter>
  std::string& set_message2(T_AnException_message2_struct_setter&& message2_) {
    message2 = std::forward<T_AnException_message2_struct_setter>(message2_);
    __isset.message2 = true;
    return message2;
  }

  const std::string& get_req_message() const& {
    return req_message;
  }

  std::string get_req_message() && {
    return std::move(req_message);
  }

  template <typename T_AnException_req_message_struct_setter>
  std::string& set_req_message(T_AnException_req_message_struct_setter&& req_message_) {
    req_message = std::forward<T_AnException_req_message_struct_setter>(req_message_);
    return req_message;
  }
  const std::vector<int32_t>& get_exception_list() const&;
  std::vector<int32_t> get_exception_list() &&;

  template <typename T_AnException_exception_list_struct_setter>
  std::vector<int32_t>& set_exception_list(T_AnException_exception_list_struct_setter&& exception_list_) {
    exception_list = std::forward<T_AnException_exception_list_struct_setter>(exception_list_);
    __isset.exception_list = true;
    return exception_list;
  }
  const std::set<int64_t>& get_exception_set() const&;
  std::set<int64_t> get_exception_set() &&;

  template <typename T_AnException_exception_set_struct_setter>
  std::set<int64_t>& set_exception_set(T_AnException_exception_set_struct_setter&& exception_set_) {
    exception_set = std::forward<T_AnException_exception_set_struct_setter>(exception_set_);
    __isset.exception_set = true;
    return exception_set;
  }
  const std::map<std::string, int32_t>& get_exception_map() const&;
  std::map<std::string, int32_t> get_exception_map() &&;

  template <typename T_AnException_exception_map_struct_setter>
  std::map<std::string, int32_t>& set_exception_map(T_AnException_exception_map_struct_setter&& exception_map_) {
    exception_map = std::forward<T_AnException_exception_map_struct_setter>(exception_map_);
    __isset.exception_map = true;
    return exception_map;
  }
  const std::map<std::string, int32_t>& get_req_exception_map() const&;
  std::map<std::string, int32_t> get_req_exception_map() &&;

  template <typename T_AnException_req_exception_map_struct_setter>
  std::map<std::string, int32_t>& set_req_exception_map(T_AnException_req_exception_map_struct_setter&& req_exception_map_) {
    req_exception_map = std::forward<T_AnException_req_exception_map_struct_setter>(req_exception_map_);
    return req_exception_map;
  }

   ::some::valid::ns::MyEnumA get_enum_field() const {
    return enum_field;
  }

   ::some::valid::ns::MyEnumA& set_enum_field( ::some::valid::ns::MyEnumA enum_field_) {
    enum_field = enum_field_;
    __isset.enum_field = true;
    return enum_field;
  }
  const std::vector< ::some::valid::ns::MyEnumA>& get_enum_container() const&;
  std::vector< ::some::valid::ns::MyEnumA> get_enum_container() &&;

  template <typename T_AnException_enum_container_struct_setter>
  std::vector< ::some::valid::ns::MyEnumA>& set_enum_container(T_AnException_enum_container_struct_setter&& enum_container_) {
    enum_container = std::forward<T_AnException_enum_container_struct_setter>(enum_container_);
    __isset.enum_container = true;
    return enum_container;
  }
  const  ::some::valid::ns::MyStruct& get_a_struct() const&;
   ::some::valid::ns::MyStruct get_a_struct() &&;

  template <typename T_AnException_a_struct_struct_setter>
   ::some::valid::ns::MyStruct& set_a_struct(T_AnException_a_struct_struct_setter&& a_struct_) {
    a_struct = std::forward<T_AnException_a_struct_struct_setter>(a_struct_);
    __isset.a_struct = true;
    return a_struct;
  }
  const std::set< ::some::valid::ns::MyStruct>& get_a_set_struct() const&;
  std::set< ::some::valid::ns::MyStruct> get_a_set_struct() &&;

  template <typename T_AnException_a_set_struct_struct_setter>
  std::set< ::some::valid::ns::MyStruct>& set_a_set_struct(T_AnException_a_set_struct_struct_setter&& a_set_struct_) {
    a_set_struct = std::forward<T_AnException_a_set_struct_struct_setter>(a_set_struct_);
    __isset.a_set_struct = true;
    return a_set_struct;
  }
  const std::vector< ::some::valid::ns::SimpleUnion>& get_a_union_list() const&;
  std::vector< ::some::valid::ns::SimpleUnion> get_a_union_list() &&;

  template <typename T_AnException_a_union_list_struct_setter>
  std::vector< ::some::valid::ns::SimpleUnion>& set_a_union_list(T_AnException_a_union_list_struct_setter&& a_union_list_) {
    a_union_list = std::forward<T_AnException_a_union_list_struct_setter>(a_union_list_);
    __isset.a_union_list = true;
    return a_union_list;
  }
  const  ::some::valid::ns::unionTypeDef& get_union_typedef() const&;
   ::some::valid::ns::unionTypeDef get_union_typedef() &&;

  template <typename T_AnException_union_typedef_struct_setter>
   ::some::valid::ns::unionTypeDef& set_union_typedef(T_AnException_union_typedef_struct_setter&& union_typedef_) {
    union_typedef = std::forward<T_AnException_union_typedef_struct_setter>(union_typedef_);
    __isset.union_typedef = true;
    return union_typedef;
  }
  const std::vector< ::some::valid::ns::unionTypeDef>& get_a_union_typedef_list() const&;
  std::vector< ::some::valid::ns::unionTypeDef> get_a_union_typedef_list() &&;

  template <typename T_AnException_a_union_typedef_list_struct_setter>
  std::vector< ::some::valid::ns::unionTypeDef>& set_a_union_typedef_list(T_AnException_a_union_typedef_list_struct_setter&& a_union_typedef_list_) {
    a_union_typedef_list = std::forward<T_AnException_a_union_typedef_list_struct_setter>(a_union_typedef_list_);
    __isset.a_union_typedef_list = true;
    return a_union_typedef_list;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

  virtual const char* what() const noexcept {
    return message2.c_str();
  }

 private:
  static void translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype);
};

void swap(AnException& a, AnException& b);
extern template uint32_t AnException::read<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t AnException::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t AnException::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t AnException::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t AnException::read<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t AnException::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t AnException::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t AnException::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t AnException::read<>(apache::thrift::SimpleJSONProtocolReader*);
extern template uint32_t AnException::write<>(apache::thrift::SimpleJSONProtocolWriter*) const;
extern template uint32_t AnException::serializedSize<>(apache::thrift::SimpleJSONProtocolWriter const*) const;
extern template uint32_t AnException::serializedSizeZC<>(apache::thrift::SimpleJSONProtocolWriter const*) const;

}}} // some::valid::ns
namespace apache { namespace thrift {

template <> inline void Cpp2Ops< ::some::valid::ns::AnException>::clear( ::some::valid::ns::AnException* obj) {
  return obj->__clear();
}

template <> inline constexpr apache::thrift::protocol::TType Cpp2Ops< ::some::valid::ns::AnException>::thriftType() {
  return apache::thrift::protocol::T_STRUCT;
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::some::valid::ns::AnException>::write(Protocol* proto,  ::some::valid::ns::AnException const* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::some::valid::ns::AnException>::read(Protocol* proto,  ::some::valid::ns::AnException* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::some::valid::ns::AnException>::serializedSize(Protocol const* proto,  ::some::valid::ns::AnException const* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::some::valid::ns::AnException>::serializedSizeZC(Protocol const* proto,  ::some::valid::ns::AnException const* obj) {
  return obj->serializedSizeZC(proto);
}

}} // apache::thrift
namespace some { namespace valid { namespace ns {
class AnotherException : private apache::thrift::detail::st::ComparisonOperators<AnotherException>, public apache::thrift::TException {
 public:

  AnotherException() :
      code(0),
      req_code(0) {}
  // FragileConstructor for use in initialization lists only

  AnotherException(apache::thrift::FragileConstructor, int32_t code__arg, int32_t req_code__arg, std::string message__arg) :
      code(std::move(code__arg)),
      req_code(std::move(req_code__arg)),
      message(std::move(message__arg)) {
    __isset.code = true;
    __isset.message = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  AnotherException(::apache::thrift::detail::argument_wrapper<1, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    AnotherException(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    code = arg.move();
    __isset.code = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  AnotherException(::apache::thrift::detail::argument_wrapper<101, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    AnotherException(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    req_code = arg.move();
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  AnotherException(::apache::thrift::detail::argument_wrapper<2, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    AnotherException(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    message = arg.move();
    __isset.message = true;
  }

  AnotherException(AnotherException&&) = default;

  AnotherException(const AnotherException&) = default;

  AnotherException& operator=(AnotherException&&) = default;

  AnotherException& operator=(const AnotherException&) = default;
  void __clear();
  int32_t code;
  int32_t req_code;
  std::string message;

  struct __isset {
    void __clear() {
      code = false;
      message = false;
    }

    bool code = false;
    bool message = false;
  } __isset;
  bool operator==(const AnotherException& rhs) const;

  bool operator < (const AnotherException& rhs) const {
    if (!(code == rhs.code)) {
      return code < rhs.code;
    }
    if (!(req_code == rhs.req_code)) {
      return req_code < rhs.req_code;
    }
    if (!(message == rhs.message)) {
      return message < rhs.message;
    }
    (void)rhs;
    return false;
  }

  int32_t get_code() const {
    return code;
  }

  int32_t& set_code(int32_t code_) {
    code = code_;
    __isset.code = true;
    return code;
  }

  int32_t get_req_code() const {
    return req_code;
  }

  int32_t& set_req_code(int32_t req_code_) {
    req_code = req_code_;
    return req_code;
  }

  const std::string& get_message() const& {
    return message;
  }

  std::string get_message() && {
    return std::move(message);
  }

  template <typename T_AnotherException_message_struct_setter>
  std::string& set_message(T_AnotherException_message_struct_setter&& message_) {
    message = std::forward<T_AnotherException_message_struct_setter>(message_);
    __isset.message = true;
    return message;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

  virtual const char* what() const noexcept {
    return " ::some::valid::ns::AnotherException";
  }

 private:
  static void translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype);
};

void swap(AnotherException& a, AnotherException& b);
extern template uint32_t AnotherException::read<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t AnotherException::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t AnotherException::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t AnotherException::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t AnotherException::read<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t AnotherException::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t AnotherException::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t AnotherException::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t AnotherException::read<>(apache::thrift::SimpleJSONProtocolReader*);
extern template uint32_t AnotherException::write<>(apache::thrift::SimpleJSONProtocolWriter*) const;
extern template uint32_t AnotherException::serializedSize<>(apache::thrift::SimpleJSONProtocolWriter const*) const;
extern template uint32_t AnotherException::serializedSizeZC<>(apache::thrift::SimpleJSONProtocolWriter const*) const;

}}} // some::valid::ns
namespace apache { namespace thrift {

template <> inline void Cpp2Ops< ::some::valid::ns::AnotherException>::clear( ::some::valid::ns::AnotherException* obj) {
  return obj->__clear();
}

template <> inline constexpr apache::thrift::protocol::TType Cpp2Ops< ::some::valid::ns::AnotherException>::thriftType() {
  return apache::thrift::protocol::T_STRUCT;
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::some::valid::ns::AnotherException>::write(Protocol* proto,  ::some::valid::ns::AnotherException const* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::some::valid::ns::AnotherException>::read(Protocol* proto,  ::some::valid::ns::AnotherException* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::some::valid::ns::AnotherException>::serializedSize(Protocol const* proto,  ::some::valid::ns::AnotherException const* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::some::valid::ns::AnotherException>::serializedSizeZC(Protocol const* proto,  ::some::valid::ns::AnotherException const* obj) {
  return obj->serializedSizeZC(proto);
}

}} // apache::thrift
namespace some { namespace valid { namespace ns {
class containerStruct : private apache::thrift::detail::st::ComparisonOperators<containerStruct> {
 public:

  containerStruct() :
      fieldA(0),
      req_fieldA(0),
      opt_fieldA(0),
      fieldC(std::initializer_list<int32_t>{1,
  2,
  3,
  4}),
      req_fieldC(std::initializer_list<int32_t>{1,
  2,
  3,
  4}),
      opt_fieldC(std::initializer_list<int32_t>{1,
  2,
  3,
  4}),
      fieldE(apache::thrift::StringTraits< std::string>::fromStringLiteral("somestring")),
      req_fieldE(apache::thrift::StringTraits< std::string>::fromStringLiteral("somestring")),
      opt_fieldE(apache::thrift::StringTraits< std::string>::fromStringLiteral("somestring")),
      fieldF(std::initializer_list<std::vector<int32_t>>{std::initializer_list<int32_t>{1,
  3,
  5,
  7,
  9},
  std::initializer_list<int32_t>{2,
  4,
  8,
  10,
  12}}),
      fieldI(true),
      fieldJ(std::initializer_list<std::pair<const std::string, std::vector<int32_t>>>{{apache::thrift::StringTraits< std::string>::fromStringLiteral("subfieldA"), std::initializer_list<int32_t>{1,
  4,
  8,
  12}},
  {apache::thrift::StringTraits< std::string>::fromStringLiteral("subfieldB"), std::initializer_list<int32_t>{2,
  5,
  9,
  13}}}),
      fieldN(0),
      fieldQ(static_cast< ::some::valid::ns::MyEnumA>(0)),
      fieldR( ::some::valid::ns::MyEnumA::fieldB),
      req_fieldR( ::some::valid::ns::MyEnumA::fieldB),
      opt_fieldR( ::some::valid::ns::MyEnumA::fieldB),
      fieldS( ::some::valid::ns::MyEnumA::fieldB),
      fieldU(std::initializer_list< ::some::valid::ns::MyEnumA>{ ::some::valid::ns::MyEnumA::fieldC,
   ::some::valid::ns::MyEnumA::fieldB,
   ::some::valid::ns::MyEnumA::fieldA}),
      fieldAC( ::some::valid::ns::MyEnumB::AField),
      fieldAD(static_cast< ::a::different::ns::AnEnum>(0)) {}
  // FragileConstructor for use in initialization lists only

  containerStruct(apache::thrift::FragileConstructor, bool fieldA__arg, bool req_fieldA__arg, bool opt_fieldA__arg, std::map<std::string, bool> fieldB__arg, std::map<std::string, bool> req_fieldB__arg, std::map<std::string, bool> opt_fieldB__arg, std::set<int32_t> fieldC__arg, std::set<int32_t> req_fieldC__arg, std::set<int32_t> opt_fieldC__arg, std::string fieldD__arg, std::string fieldE__arg, std::string req_fieldE__arg, std::string opt_fieldE__arg, std::vector<std::vector<int32_t>> fieldF__arg, std::map<std::string, std::map<std::string, std::map<std::string, int32_t>>> fieldG__arg, std::vector<std::set<int32_t>> fieldH__arg, bool fieldI__arg, std::map<std::string, std::vector<int32_t>> fieldJ__arg, std::vector<std::vector<std::vector<std::vector<int32_t>>>> fieldK__arg, std::set<std::set<std::set<bool>>> fieldL__arg, std::map<std::set<std::vector<int32_t>>, std::map<std::vector<std::set<std::string>>, std::string>> fieldM__arg,  ::some::valid::ns::simpleTypeDef fieldN__arg,  ::some::valid::ns::complexStructTypeDef fieldO__arg, std::vector< ::some::valid::ns::mostComplexTypeDef> fieldP__arg,  ::some::valid::ns::MyEnumA fieldQ__arg,  ::some::valid::ns::MyEnumA fieldR__arg,  ::some::valid::ns::MyEnumA req_fieldR__arg,  ::some::valid::ns::MyEnumA opt_fieldR__arg,  ::some::valid::ns::MyEnumA fieldS__arg, std::vector< ::some::valid::ns::MyEnumA> fieldT__arg, std::vector< ::some::valid::ns::MyEnumA> fieldU__arg,  ::some::valid::ns::MyStruct fieldV__arg,  ::some::valid::ns::MyStruct req_fieldV__arg,  ::some::valid::ns::MyStruct opt_fieldV__arg, std::set< ::some::valid::ns::MyStruct> fieldW__arg,  ::some::valid::ns::ComplexUnion fieldX__arg,  ::some::valid::ns::ComplexUnion req_fieldX__arg,  ::some::valid::ns::ComplexUnion opt_fieldX__arg, std::vector< ::some::valid::ns::ComplexUnion> fieldY__arg,  ::some::valid::ns::unionTypeDef fieldZ__arg, std::vector< ::some::valid::ns::unionTypeDef> fieldAA__arg, std::map< ::some::valid::ns::IndirectionB,  ::some::valid::ns::IndirectionC> fieldAB__arg,  ::some::valid::ns::MyEnumB fieldAC__arg,  ::a::different::ns::AnEnum fieldAD__arg, std::map<std::string, int32_t> fieldAE__arg) :
      fieldA(std::move(fieldA__arg)),
      req_fieldA(std::move(req_fieldA__arg)),
      opt_fieldA(std::move(opt_fieldA__arg)),
      fieldB(std::move(fieldB__arg)),
      req_fieldB(std::move(req_fieldB__arg)),
      opt_fieldB(std::move(opt_fieldB__arg)),
      fieldC(std::move(fieldC__arg)),
      req_fieldC(std::move(req_fieldC__arg)),
      opt_fieldC(std::move(opt_fieldC__arg)),
      fieldD(std::move(fieldD__arg)),
      fieldE(std::move(fieldE__arg)),
      req_fieldE(std::move(req_fieldE__arg)),
      opt_fieldE(std::move(opt_fieldE__arg)),
      fieldF(std::move(fieldF__arg)),
      fieldG(std::move(fieldG__arg)),
      fieldH(std::move(fieldH__arg)),
      fieldI(std::move(fieldI__arg)),
      fieldJ(std::move(fieldJ__arg)),
      fieldK(std::move(fieldK__arg)),
      fieldL(std::move(fieldL__arg)),
      fieldM(std::move(fieldM__arg)),
      fieldN(std::move(fieldN__arg)),
      fieldO(std::move(fieldO__arg)),
      fieldP(std::move(fieldP__arg)),
      fieldQ(std::move(fieldQ__arg)),
      fieldR(std::move(fieldR__arg)),
      req_fieldR(std::move(req_fieldR__arg)),
      opt_fieldR(std::move(opt_fieldR__arg)),
      fieldS(std::move(fieldS__arg)),
      fieldT(std::move(fieldT__arg)),
      fieldU(std::move(fieldU__arg)),
      fieldV(std::move(fieldV__arg)),
      req_fieldV(std::move(req_fieldV__arg)),
      opt_fieldV(std::move(opt_fieldV__arg)),
      fieldW(std::move(fieldW__arg)),
      fieldX(std::move(fieldX__arg)),
      req_fieldX(std::move(req_fieldX__arg)),
      opt_fieldX(std::move(opt_fieldX__arg)),
      fieldY(std::move(fieldY__arg)),
      fieldZ(std::move(fieldZ__arg)),
      fieldAA(std::move(fieldAA__arg)),
      fieldAB(std::move(fieldAB__arg)),
      fieldAC(std::move(fieldAC__arg)),
      fieldAD(std::move(fieldAD__arg)),
      fieldAE(std::move(fieldAE__arg)) {
    __isset.fieldA = true;
    __isset.opt_fieldA = true;
    __isset.fieldB = true;
    __isset.opt_fieldB = true;
    __isset.fieldC = true;
    __isset.opt_fieldC = true;
    __isset.fieldD = true;
    __isset.fieldE = true;
    __isset.opt_fieldE = true;
    __isset.fieldF = true;
    __isset.fieldG = true;
    __isset.fieldH = true;
    __isset.fieldI = true;
    __isset.fieldJ = true;
    __isset.fieldK = true;
    __isset.fieldL = true;
    __isset.fieldM = true;
    __isset.fieldN = true;
    __isset.fieldO = true;
    __isset.fieldP = true;
    __isset.fieldQ = true;
    __isset.fieldR = true;
    __isset.opt_fieldR = true;
    __isset.fieldS = true;
    __isset.fieldT = true;
    __isset.fieldU = true;
    __isset.fieldV = true;
    __isset.opt_fieldV = true;
    __isset.fieldW = true;
    __isset.fieldX = true;
    __isset.opt_fieldX = true;
    __isset.fieldY = true;
    __isset.fieldZ = true;
    __isset.fieldAA = true;
    __isset.fieldAB = true;
    __isset.fieldAC = true;
    __isset.fieldAD = true;
    __isset.fieldAE = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  containerStruct(::apache::thrift::detail::argument_wrapper<1, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    containerStruct(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    fieldA = arg.move();
    __isset.fieldA = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  containerStruct(::apache::thrift::detail::argument_wrapper<101, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    containerStruct(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    req_fieldA = arg.move();
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  containerStruct(::apache::thrift::detail::argument_wrapper<201, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    containerStruct(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    opt_fieldA = arg.move();
    __isset.opt_fieldA = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  containerStruct(::apache::thrift::detail::argument_wrapper<2, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    containerStruct(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    fieldB = arg.move();
    __isset.fieldB = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  containerStruct(::apache::thrift::detail::argument_wrapper<102, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    containerStruct(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    req_fieldB = arg.move();
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  containerStruct(::apache::thrift::detail::argument_wrapper<202, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    containerStruct(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    opt_fieldB = arg.move();
    __isset.opt_fieldB = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  containerStruct(::apache::thrift::detail::argument_wrapper<3, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    containerStruct(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    fieldC = arg.move();
    __isset.fieldC = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  containerStruct(::apache::thrift::detail::argument_wrapper<103, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    containerStruct(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    req_fieldC = arg.move();
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  containerStruct(::apache::thrift::detail::argument_wrapper<203, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    containerStruct(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    opt_fieldC = arg.move();
    __isset.opt_fieldC = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  containerStruct(::apache::thrift::detail::argument_wrapper<4, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    containerStruct(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    fieldD = arg.move();
    __isset.fieldD = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  containerStruct(::apache::thrift::detail::argument_wrapper<5, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    containerStruct(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    fieldE = arg.move();
    __isset.fieldE = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  containerStruct(::apache::thrift::detail::argument_wrapper<105, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    containerStruct(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    req_fieldE = arg.move();
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  containerStruct(::apache::thrift::detail::argument_wrapper<205, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    containerStruct(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    opt_fieldE = arg.move();
    __isset.opt_fieldE = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  containerStruct(::apache::thrift::detail::argument_wrapper<6, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    containerStruct(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    fieldF = arg.move();
    __isset.fieldF = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  containerStruct(::apache::thrift::detail::argument_wrapper<7, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    containerStruct(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    fieldG = arg.move();
    __isset.fieldG = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  containerStruct(::apache::thrift::detail::argument_wrapper<8, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    containerStruct(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    fieldH = arg.move();
    __isset.fieldH = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  containerStruct(::apache::thrift::detail::argument_wrapper<9, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    containerStruct(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    fieldI = arg.move();
    __isset.fieldI = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  containerStruct(::apache::thrift::detail::argument_wrapper<10, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    containerStruct(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    fieldJ = arg.move();
    __isset.fieldJ = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  containerStruct(::apache::thrift::detail::argument_wrapper<11, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    containerStruct(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    fieldK = arg.move();
    __isset.fieldK = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  containerStruct(::apache::thrift::detail::argument_wrapper<12, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    containerStruct(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    fieldL = arg.move();
    __isset.fieldL = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  containerStruct(::apache::thrift::detail::argument_wrapper<13, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    containerStruct(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    fieldM = arg.move();
    __isset.fieldM = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  containerStruct(::apache::thrift::detail::argument_wrapper<14, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    containerStruct(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    fieldN = arg.move();
    __isset.fieldN = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  containerStruct(::apache::thrift::detail::argument_wrapper<15, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    containerStruct(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    fieldO = arg.move();
    __isset.fieldO = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  containerStruct(::apache::thrift::detail::argument_wrapper<16, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    containerStruct(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    fieldP = arg.move();
    __isset.fieldP = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  containerStruct(::apache::thrift::detail::argument_wrapper<17, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    containerStruct(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    fieldQ = arg.move();
    __isset.fieldQ = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  containerStruct(::apache::thrift::detail::argument_wrapper<18, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    containerStruct(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    fieldR = arg.move();
    __isset.fieldR = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  containerStruct(::apache::thrift::detail::argument_wrapper<118, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    containerStruct(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    req_fieldR = arg.move();
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  containerStruct(::apache::thrift::detail::argument_wrapper<218, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    containerStruct(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    opt_fieldR = arg.move();
    __isset.opt_fieldR = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  containerStruct(::apache::thrift::detail::argument_wrapper<19, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    containerStruct(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    fieldS = arg.move();
    __isset.fieldS = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  containerStruct(::apache::thrift::detail::argument_wrapper<21, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    containerStruct(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    fieldT = arg.move();
    __isset.fieldT = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  containerStruct(::apache::thrift::detail::argument_wrapper<22, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    containerStruct(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    fieldU = arg.move();
    __isset.fieldU = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  containerStruct(::apache::thrift::detail::argument_wrapper<23, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    containerStruct(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    fieldV = arg.move();
    __isset.fieldV = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  containerStruct(::apache::thrift::detail::argument_wrapper<123, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    containerStruct(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    req_fieldV = arg.move();
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  containerStruct(::apache::thrift::detail::argument_wrapper<223, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    containerStruct(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    opt_fieldV = arg.move();
    __isset.opt_fieldV = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  containerStruct(::apache::thrift::detail::argument_wrapper<24, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    containerStruct(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    fieldW = arg.move();
    __isset.fieldW = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  containerStruct(::apache::thrift::detail::argument_wrapper<25, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    containerStruct(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    fieldX = arg.move();
    __isset.fieldX = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  containerStruct(::apache::thrift::detail::argument_wrapper<125, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    containerStruct(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    req_fieldX = arg.move();
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  containerStruct(::apache::thrift::detail::argument_wrapper<225, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    containerStruct(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    opt_fieldX = arg.move();
    __isset.opt_fieldX = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  containerStruct(::apache::thrift::detail::argument_wrapper<26, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    containerStruct(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    fieldY = arg.move();
    __isset.fieldY = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  containerStruct(::apache::thrift::detail::argument_wrapper<27, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    containerStruct(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    fieldZ = arg.move();
    __isset.fieldZ = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  containerStruct(::apache::thrift::detail::argument_wrapper<28, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    containerStruct(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    fieldAA = arg.move();
    __isset.fieldAA = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  containerStruct(::apache::thrift::detail::argument_wrapper<29, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    containerStruct(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    fieldAB = arg.move();
    __isset.fieldAB = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  containerStruct(::apache::thrift::detail::argument_wrapper<30, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    containerStruct(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    fieldAC = arg.move();
    __isset.fieldAC = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  containerStruct(::apache::thrift::detail::argument_wrapper<31, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    containerStruct(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    fieldAD = arg.move();
    __isset.fieldAD = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  containerStruct(::apache::thrift::detail::argument_wrapper<32, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    containerStruct(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    fieldAE = arg.move();
    __isset.fieldAE = true;
  }

  containerStruct(containerStruct&&) = default;

  containerStruct& operator=(containerStruct&&) = default;
  void __clear();

  virtual ~containerStruct() {}

  bool fieldA;
  bool req_fieldA;
  bool opt_fieldA;
  std::map<std::string, bool> fieldB;
  std::map<std::string, bool> req_fieldB;
  std::map<std::string, bool> opt_fieldB;
  std::set<int32_t> fieldC;
  std::set<int32_t> req_fieldC;
  std::set<int32_t> opt_fieldC;
  std::string fieldD;
  std::string fieldE;
  std::string req_fieldE;
  std::string opt_fieldE;
  std::vector<std::vector<int32_t>> fieldF;
  std::map<std::string, std::map<std::string, std::map<std::string, int32_t>>> fieldG;
  std::vector<std::set<int32_t>> fieldH;
  bool fieldI;
  std::map<std::string, std::vector<int32_t>> fieldJ;
  std::vector<std::vector<std::vector<std::vector<int32_t>>>> fieldK;
  std::set<std::set<std::set<bool>>> fieldL;
  std::map<std::set<std::vector<int32_t>>, std::map<std::vector<std::set<std::string>>, std::string>> fieldM;
   ::some::valid::ns::simpleTypeDef fieldN;
   ::some::valid::ns::complexStructTypeDef fieldO;
  std::vector< ::some::valid::ns::mostComplexTypeDef> fieldP;
   ::some::valid::ns::MyEnumA fieldQ;
   ::some::valid::ns::MyEnumA fieldR;
   ::some::valid::ns::MyEnumA req_fieldR;
   ::some::valid::ns::MyEnumA opt_fieldR;
   ::some::valid::ns::MyEnumA fieldS;
  std::vector< ::some::valid::ns::MyEnumA> fieldT;
  std::vector< ::some::valid::ns::MyEnumA> fieldU;
   ::some::valid::ns::MyStruct fieldV;
   ::some::valid::ns::MyStruct req_fieldV;
   ::some::valid::ns::MyStruct opt_fieldV;
  std::set< ::some::valid::ns::MyStruct> fieldW;
   ::some::valid::ns::ComplexUnion fieldX;
   ::some::valid::ns::ComplexUnion req_fieldX;
   ::some::valid::ns::ComplexUnion opt_fieldX;
  std::vector< ::some::valid::ns::ComplexUnion> fieldY;
   ::some::valid::ns::unionTypeDef fieldZ;
  std::vector< ::some::valid::ns::unionTypeDef> fieldAA;
  std::map< ::some::valid::ns::IndirectionB,  ::some::valid::ns::IndirectionC> fieldAB;
   ::some::valid::ns::MyEnumB fieldAC;
   ::a::different::ns::AnEnum fieldAD;
  std::map<std::string, int32_t> fieldAE;

  struct __isset {
    void __clear() {
      fieldA = false;
      opt_fieldA = false;
      fieldB = false;
      opt_fieldB = false;
      fieldC = false;
      opt_fieldC = false;
      fieldD = false;
      fieldE = false;
      opt_fieldE = false;
      fieldF = false;
      fieldG = false;
      fieldH = false;
      fieldI = false;
      fieldJ = false;
      fieldK = false;
      fieldL = false;
      fieldM = false;
      fieldN = false;
      fieldO = false;
      fieldP = false;
      fieldQ = false;
      fieldR = false;
      opt_fieldR = false;
      fieldS = false;
      fieldT = false;
      fieldU = false;
      fieldV = false;
      opt_fieldV = false;
      fieldW = false;
      fieldX = false;
      opt_fieldX = false;
      fieldY = false;
      fieldZ = false;
      fieldAA = false;
      fieldAB = false;
      fieldAC = false;
      fieldAD = false;
      fieldAE = false;
    }

    bool fieldA = false;
    bool opt_fieldA = false;
    bool fieldB = false;
    bool opt_fieldB = false;
    bool fieldC = false;
    bool opt_fieldC = false;
    bool fieldD = false;
    bool fieldE = false;
    bool opt_fieldE = false;
    bool fieldF = false;
    bool fieldG = false;
    bool fieldH = false;
    bool fieldI = false;
    bool fieldJ = false;
    bool fieldK = false;
    bool fieldL = false;
    bool fieldM = false;
    bool fieldN = false;
    bool fieldO = false;
    bool fieldP = false;
    bool fieldQ = false;
    bool fieldR = false;
    bool opt_fieldR = false;
    bool fieldS = false;
    bool fieldT = false;
    bool fieldU = false;
    bool fieldV = false;
    bool opt_fieldV = false;
    bool fieldW = false;
    bool fieldX = false;
    bool opt_fieldX = false;
    bool fieldY = false;
    bool fieldZ = false;
    bool fieldAA = false;
    bool fieldAB = false;
    bool fieldAC = false;
    bool fieldAD = false;
    bool fieldAE = false;
  } __isset;
  bool operator==(const containerStruct& rhs) const;
  bool operator < (const containerStruct& rhs) const;

  bool get_fieldA() const {
    return fieldA;
  }

  bool& set_fieldA(bool fieldA_) {
    fieldA = fieldA_;
    __isset.fieldA = true;
    return fieldA;
  }

  bool get_req_fieldA() const {
    return req_fieldA;
  }

  bool& set_req_fieldA(bool req_fieldA_) {
    req_fieldA = req_fieldA_;
    return req_fieldA;
  }

  const bool* get_opt_fieldA() const& {
    return __isset.opt_fieldA ? std::addressof(opt_fieldA) : nullptr;
  }

  bool* get_opt_fieldA() & {
    return __isset.opt_fieldA ? std::addressof(opt_fieldA) : nullptr;
  }
  bool* get_opt_fieldA() && = delete;

  bool& set_opt_fieldA(bool opt_fieldA_) {
    opt_fieldA = opt_fieldA_;
    __isset.opt_fieldA = true;
    return opt_fieldA;
  }
  const std::map<std::string, bool>& get_fieldB() const&;
  std::map<std::string, bool> get_fieldB() &&;

  template <typename T_containerStruct_fieldB_struct_setter>
  std::map<std::string, bool>& set_fieldB(T_containerStruct_fieldB_struct_setter&& fieldB_) {
    fieldB = std::forward<T_containerStruct_fieldB_struct_setter>(fieldB_);
    __isset.fieldB = true;
    return fieldB;
  }
  const std::map<std::string, bool>& get_req_fieldB() const&;
  std::map<std::string, bool> get_req_fieldB() &&;

  template <typename T_containerStruct_req_fieldB_struct_setter>
  std::map<std::string, bool>& set_req_fieldB(T_containerStruct_req_fieldB_struct_setter&& req_fieldB_) {
    req_fieldB = std::forward<T_containerStruct_req_fieldB_struct_setter>(req_fieldB_);
    return req_fieldB;
  }
  const std::map<std::string, bool>* get_opt_fieldB() const&;
  std::map<std::string, bool>* get_opt_fieldB() &;
  std::map<std::string, bool>* get_opt_fieldB() && = delete;

  template <typename T_containerStruct_opt_fieldB_struct_setter>
  std::map<std::string, bool>& set_opt_fieldB(T_containerStruct_opt_fieldB_struct_setter&& opt_fieldB_) {
    opt_fieldB = std::forward<T_containerStruct_opt_fieldB_struct_setter>(opt_fieldB_);
    __isset.opt_fieldB = true;
    return opt_fieldB;
  }
  const std::set<int32_t>& get_fieldC() const&;
  std::set<int32_t> get_fieldC() &&;

  template <typename T_containerStruct_fieldC_struct_setter>
  std::set<int32_t>& set_fieldC(T_containerStruct_fieldC_struct_setter&& fieldC_) {
    fieldC = std::forward<T_containerStruct_fieldC_struct_setter>(fieldC_);
    __isset.fieldC = true;
    return fieldC;
  }
  const std::set<int32_t>& get_req_fieldC() const&;
  std::set<int32_t> get_req_fieldC() &&;

  template <typename T_containerStruct_req_fieldC_struct_setter>
  std::set<int32_t>& set_req_fieldC(T_containerStruct_req_fieldC_struct_setter&& req_fieldC_) {
    req_fieldC = std::forward<T_containerStruct_req_fieldC_struct_setter>(req_fieldC_);
    return req_fieldC;
  }
  const std::set<int32_t>* get_opt_fieldC() const&;
  std::set<int32_t>* get_opt_fieldC() &;
  std::set<int32_t>* get_opt_fieldC() && = delete;

  template <typename T_containerStruct_opt_fieldC_struct_setter>
  std::set<int32_t>& set_opt_fieldC(T_containerStruct_opt_fieldC_struct_setter&& opt_fieldC_) {
    opt_fieldC = std::forward<T_containerStruct_opt_fieldC_struct_setter>(opt_fieldC_);
    __isset.opt_fieldC = true;
    return opt_fieldC;
  }

  const std::string& get_fieldD() const& {
    return fieldD;
  }

  std::string get_fieldD() && {
    return std::move(fieldD);
  }

  template <typename T_containerStruct_fieldD_struct_setter>
  std::string& set_fieldD(T_containerStruct_fieldD_struct_setter&& fieldD_) {
    fieldD = std::forward<T_containerStruct_fieldD_struct_setter>(fieldD_);
    __isset.fieldD = true;
    return fieldD;
  }

  const std::string& get_fieldE() const& {
    return fieldE;
  }

  std::string get_fieldE() && {
    return std::move(fieldE);
  }

  template <typename T_containerStruct_fieldE_struct_setter>
  std::string& set_fieldE(T_containerStruct_fieldE_struct_setter&& fieldE_) {
    fieldE = std::forward<T_containerStruct_fieldE_struct_setter>(fieldE_);
    __isset.fieldE = true;
    return fieldE;
  }

  const std::string& get_req_fieldE() const& {
    return req_fieldE;
  }

  std::string get_req_fieldE() && {
    return std::move(req_fieldE);
  }

  template <typename T_containerStruct_req_fieldE_struct_setter>
  std::string& set_req_fieldE(T_containerStruct_req_fieldE_struct_setter&& req_fieldE_) {
    req_fieldE = std::forward<T_containerStruct_req_fieldE_struct_setter>(req_fieldE_);
    return req_fieldE;
  }

  const std::string* get_opt_fieldE() const& {
    return __isset.opt_fieldE ? std::addressof(opt_fieldE) : nullptr;
  }

  std::string* get_opt_fieldE() & {
    return __isset.opt_fieldE ? std::addressof(opt_fieldE) : nullptr;
  }
  std::string* get_opt_fieldE() && = delete;

  template <typename T_containerStruct_opt_fieldE_struct_setter>
  std::string& set_opt_fieldE(T_containerStruct_opt_fieldE_struct_setter&& opt_fieldE_) {
    opt_fieldE = std::forward<T_containerStruct_opt_fieldE_struct_setter>(opt_fieldE_);
    __isset.opt_fieldE = true;
    return opt_fieldE;
  }
  const std::vector<std::vector<int32_t>>& get_fieldF() const&;
  std::vector<std::vector<int32_t>> get_fieldF() &&;

  template <typename T_containerStruct_fieldF_struct_setter>
  std::vector<std::vector<int32_t>>& set_fieldF(T_containerStruct_fieldF_struct_setter&& fieldF_) {
    fieldF = std::forward<T_containerStruct_fieldF_struct_setter>(fieldF_);
    __isset.fieldF = true;
    return fieldF;
  }
  const std::map<std::string, std::map<std::string, std::map<std::string, int32_t>>>& get_fieldG() const&;
  std::map<std::string, std::map<std::string, std::map<std::string, int32_t>>> get_fieldG() &&;

  template <typename T_containerStruct_fieldG_struct_setter>
  std::map<std::string, std::map<std::string, std::map<std::string, int32_t>>>& set_fieldG(T_containerStruct_fieldG_struct_setter&& fieldG_) {
    fieldG = std::forward<T_containerStruct_fieldG_struct_setter>(fieldG_);
    __isset.fieldG = true;
    return fieldG;
  }
  const std::vector<std::set<int32_t>>& get_fieldH() const&;
  std::vector<std::set<int32_t>> get_fieldH() &&;

  template <typename T_containerStruct_fieldH_struct_setter>
  std::vector<std::set<int32_t>>& set_fieldH(T_containerStruct_fieldH_struct_setter&& fieldH_) {
    fieldH = std::forward<T_containerStruct_fieldH_struct_setter>(fieldH_);
    __isset.fieldH = true;
    return fieldH;
  }

  bool get_fieldI() const {
    return fieldI;
  }

  bool& set_fieldI(bool fieldI_) {
    fieldI = fieldI_;
    __isset.fieldI = true;
    return fieldI;
  }
  const std::map<std::string, std::vector<int32_t>>& get_fieldJ() const&;
  std::map<std::string, std::vector<int32_t>> get_fieldJ() &&;

  template <typename T_containerStruct_fieldJ_struct_setter>
  std::map<std::string, std::vector<int32_t>>& set_fieldJ(T_containerStruct_fieldJ_struct_setter&& fieldJ_) {
    fieldJ = std::forward<T_containerStruct_fieldJ_struct_setter>(fieldJ_);
    __isset.fieldJ = true;
    return fieldJ;
  }
  const std::vector<std::vector<std::vector<std::vector<int32_t>>>>& get_fieldK() const&;
  std::vector<std::vector<std::vector<std::vector<int32_t>>>> get_fieldK() &&;

  template <typename T_containerStruct_fieldK_struct_setter>
  std::vector<std::vector<std::vector<std::vector<int32_t>>>>& set_fieldK(T_containerStruct_fieldK_struct_setter&& fieldK_) {
    fieldK = std::forward<T_containerStruct_fieldK_struct_setter>(fieldK_);
    __isset.fieldK = true;
    return fieldK;
  }
  const std::set<std::set<std::set<bool>>>& get_fieldL() const&;
  std::set<std::set<std::set<bool>>> get_fieldL() &&;

  template <typename T_containerStruct_fieldL_struct_setter>
  std::set<std::set<std::set<bool>>>& set_fieldL(T_containerStruct_fieldL_struct_setter&& fieldL_) {
    fieldL = std::forward<T_containerStruct_fieldL_struct_setter>(fieldL_);
    __isset.fieldL = true;
    return fieldL;
  }
  const std::map<std::set<std::vector<int32_t>>, std::map<std::vector<std::set<std::string>>, std::string>>& get_fieldM() const&;
  std::map<std::set<std::vector<int32_t>>, std::map<std::vector<std::set<std::string>>, std::string>> get_fieldM() &&;

  template <typename T_containerStruct_fieldM_struct_setter>
  std::map<std::set<std::vector<int32_t>>, std::map<std::vector<std::set<std::string>>, std::string>>& set_fieldM(T_containerStruct_fieldM_struct_setter&& fieldM_) {
    fieldM = std::forward<T_containerStruct_fieldM_struct_setter>(fieldM_);
    __isset.fieldM = true;
    return fieldM;
  }

   ::some::valid::ns::simpleTypeDef get_fieldN() const {
    return fieldN;
  }

   ::some::valid::ns::simpleTypeDef& set_fieldN( ::some::valid::ns::simpleTypeDef fieldN_) {
    fieldN = fieldN_;
    __isset.fieldN = true;
    return fieldN;
  }
  const  ::some::valid::ns::complexStructTypeDef& get_fieldO() const&;
   ::some::valid::ns::complexStructTypeDef get_fieldO() &&;

  template <typename T_containerStruct_fieldO_struct_setter>
   ::some::valid::ns::complexStructTypeDef& set_fieldO(T_containerStruct_fieldO_struct_setter&& fieldO_) {
    fieldO = std::forward<T_containerStruct_fieldO_struct_setter>(fieldO_);
    __isset.fieldO = true;
    return fieldO;
  }
  const std::vector< ::some::valid::ns::mostComplexTypeDef>& get_fieldP() const&;
  std::vector< ::some::valid::ns::mostComplexTypeDef> get_fieldP() &&;

  template <typename T_containerStruct_fieldP_struct_setter>
  std::vector< ::some::valid::ns::mostComplexTypeDef>& set_fieldP(T_containerStruct_fieldP_struct_setter&& fieldP_) {
    fieldP = std::forward<T_containerStruct_fieldP_struct_setter>(fieldP_);
    __isset.fieldP = true;
    return fieldP;
  }

   ::some::valid::ns::MyEnumA get_fieldQ() const {
    return fieldQ;
  }

   ::some::valid::ns::MyEnumA& set_fieldQ( ::some::valid::ns::MyEnumA fieldQ_) {
    fieldQ = fieldQ_;
    __isset.fieldQ = true;
    return fieldQ;
  }

   ::some::valid::ns::MyEnumA get_fieldR() const {
    return fieldR;
  }

   ::some::valid::ns::MyEnumA& set_fieldR( ::some::valid::ns::MyEnumA fieldR_) {
    fieldR = fieldR_;
    __isset.fieldR = true;
    return fieldR;
  }

   ::some::valid::ns::MyEnumA get_req_fieldR() const {
    return req_fieldR;
  }

   ::some::valid::ns::MyEnumA& set_req_fieldR( ::some::valid::ns::MyEnumA req_fieldR_) {
    req_fieldR = req_fieldR_;
    return req_fieldR;
  }

  const  ::some::valid::ns::MyEnumA* get_opt_fieldR() const& {
    return __isset.opt_fieldR ? std::addressof(opt_fieldR) : nullptr;
  }

   ::some::valid::ns::MyEnumA* get_opt_fieldR() & {
    return __isset.opt_fieldR ? std::addressof(opt_fieldR) : nullptr;
  }
   ::some::valid::ns::MyEnumA* get_opt_fieldR() && = delete;

   ::some::valid::ns::MyEnumA& set_opt_fieldR( ::some::valid::ns::MyEnumA opt_fieldR_) {
    opt_fieldR = opt_fieldR_;
    __isset.opt_fieldR = true;
    return opt_fieldR;
  }

   ::some::valid::ns::MyEnumA get_fieldS() const {
    return fieldS;
  }

   ::some::valid::ns::MyEnumA& set_fieldS( ::some::valid::ns::MyEnumA fieldS_) {
    fieldS = fieldS_;
    __isset.fieldS = true;
    return fieldS;
  }
  const std::vector< ::some::valid::ns::MyEnumA>& get_fieldT() const&;
  std::vector< ::some::valid::ns::MyEnumA> get_fieldT() &&;

  template <typename T_containerStruct_fieldT_struct_setter>
  std::vector< ::some::valid::ns::MyEnumA>& set_fieldT(T_containerStruct_fieldT_struct_setter&& fieldT_) {
    fieldT = std::forward<T_containerStruct_fieldT_struct_setter>(fieldT_);
    __isset.fieldT = true;
    return fieldT;
  }
  const std::vector< ::some::valid::ns::MyEnumA>& get_fieldU() const&;
  std::vector< ::some::valid::ns::MyEnumA> get_fieldU() &&;

  template <typename T_containerStruct_fieldU_struct_setter>
  std::vector< ::some::valid::ns::MyEnumA>& set_fieldU(T_containerStruct_fieldU_struct_setter&& fieldU_) {
    fieldU = std::forward<T_containerStruct_fieldU_struct_setter>(fieldU_);
    __isset.fieldU = true;
    return fieldU;
  }
  const  ::some::valid::ns::MyStruct& get_fieldV() const&;
   ::some::valid::ns::MyStruct get_fieldV() &&;

  template <typename T_containerStruct_fieldV_struct_setter>
   ::some::valid::ns::MyStruct& set_fieldV(T_containerStruct_fieldV_struct_setter&& fieldV_) {
    fieldV = std::forward<T_containerStruct_fieldV_struct_setter>(fieldV_);
    __isset.fieldV = true;
    return fieldV;
  }
  const  ::some::valid::ns::MyStruct& get_req_fieldV() const&;
   ::some::valid::ns::MyStruct get_req_fieldV() &&;

  template <typename T_containerStruct_req_fieldV_struct_setter>
   ::some::valid::ns::MyStruct& set_req_fieldV(T_containerStruct_req_fieldV_struct_setter&& req_fieldV_) {
    req_fieldV = std::forward<T_containerStruct_req_fieldV_struct_setter>(req_fieldV_);
    return req_fieldV;
  }
  const  ::some::valid::ns::MyStruct* get_opt_fieldV() const&;
   ::some::valid::ns::MyStruct* get_opt_fieldV() &;
   ::some::valid::ns::MyStruct* get_opt_fieldV() && = delete;

  template <typename T_containerStruct_opt_fieldV_struct_setter>
   ::some::valid::ns::MyStruct& set_opt_fieldV(T_containerStruct_opt_fieldV_struct_setter&& opt_fieldV_) {
    opt_fieldV = std::forward<T_containerStruct_opt_fieldV_struct_setter>(opt_fieldV_);
    __isset.opt_fieldV = true;
    return opt_fieldV;
  }
  const std::set< ::some::valid::ns::MyStruct>& get_fieldW() const&;
  std::set< ::some::valid::ns::MyStruct> get_fieldW() &&;

  template <typename T_containerStruct_fieldW_struct_setter>
  std::set< ::some::valid::ns::MyStruct>& set_fieldW(T_containerStruct_fieldW_struct_setter&& fieldW_) {
    fieldW = std::forward<T_containerStruct_fieldW_struct_setter>(fieldW_);
    __isset.fieldW = true;
    return fieldW;
  }
  const  ::some::valid::ns::ComplexUnion& get_fieldX() const&;
   ::some::valid::ns::ComplexUnion get_fieldX() &&;

  template <typename T_containerStruct_fieldX_struct_setter>
   ::some::valid::ns::ComplexUnion& set_fieldX(T_containerStruct_fieldX_struct_setter&& fieldX_) {
    fieldX = std::forward<T_containerStruct_fieldX_struct_setter>(fieldX_);
    __isset.fieldX = true;
    return fieldX;
  }
  const  ::some::valid::ns::ComplexUnion& get_req_fieldX() const&;
   ::some::valid::ns::ComplexUnion get_req_fieldX() &&;

  template <typename T_containerStruct_req_fieldX_struct_setter>
   ::some::valid::ns::ComplexUnion& set_req_fieldX(T_containerStruct_req_fieldX_struct_setter&& req_fieldX_) {
    req_fieldX = std::forward<T_containerStruct_req_fieldX_struct_setter>(req_fieldX_);
    return req_fieldX;
  }
  const  ::some::valid::ns::ComplexUnion* get_opt_fieldX() const&;
   ::some::valid::ns::ComplexUnion* get_opt_fieldX() &;
   ::some::valid::ns::ComplexUnion* get_opt_fieldX() && = delete;

  template <typename T_containerStruct_opt_fieldX_struct_setter>
   ::some::valid::ns::ComplexUnion& set_opt_fieldX(T_containerStruct_opt_fieldX_struct_setter&& opt_fieldX_) {
    opt_fieldX = std::forward<T_containerStruct_opt_fieldX_struct_setter>(opt_fieldX_);
    __isset.opt_fieldX = true;
    return opt_fieldX;
  }
  const std::vector< ::some::valid::ns::ComplexUnion>& get_fieldY() const&;
  std::vector< ::some::valid::ns::ComplexUnion> get_fieldY() &&;

  template <typename T_containerStruct_fieldY_struct_setter>
  std::vector< ::some::valid::ns::ComplexUnion>& set_fieldY(T_containerStruct_fieldY_struct_setter&& fieldY_) {
    fieldY = std::forward<T_containerStruct_fieldY_struct_setter>(fieldY_);
    __isset.fieldY = true;
    return fieldY;
  }
  const  ::some::valid::ns::unionTypeDef& get_fieldZ() const&;
   ::some::valid::ns::unionTypeDef get_fieldZ() &&;

  template <typename T_containerStruct_fieldZ_struct_setter>
   ::some::valid::ns::unionTypeDef& set_fieldZ(T_containerStruct_fieldZ_struct_setter&& fieldZ_) {
    fieldZ = std::forward<T_containerStruct_fieldZ_struct_setter>(fieldZ_);
    __isset.fieldZ = true;
    return fieldZ;
  }
  const std::vector< ::some::valid::ns::unionTypeDef>& get_fieldAA() const&;
  std::vector< ::some::valid::ns::unionTypeDef> get_fieldAA() &&;

  template <typename T_containerStruct_fieldAA_struct_setter>
  std::vector< ::some::valid::ns::unionTypeDef>& set_fieldAA(T_containerStruct_fieldAA_struct_setter&& fieldAA_) {
    fieldAA = std::forward<T_containerStruct_fieldAA_struct_setter>(fieldAA_);
    __isset.fieldAA = true;
    return fieldAA;
  }
  const std::map< ::some::valid::ns::IndirectionB,  ::some::valid::ns::IndirectionC>& get_fieldAB() const&;
  std::map< ::some::valid::ns::IndirectionB,  ::some::valid::ns::IndirectionC> get_fieldAB() &&;

  template <typename T_containerStruct_fieldAB_struct_setter>
  std::map< ::some::valid::ns::IndirectionB,  ::some::valid::ns::IndirectionC>& set_fieldAB(T_containerStruct_fieldAB_struct_setter&& fieldAB_) {
    fieldAB = std::forward<T_containerStruct_fieldAB_struct_setter>(fieldAB_);
    __isset.fieldAB = true;
    return fieldAB;
  }

   ::some::valid::ns::MyEnumB get_fieldAC() const {
    return fieldAC;
  }

   ::some::valid::ns::MyEnumB& set_fieldAC( ::some::valid::ns::MyEnumB fieldAC_) {
    fieldAC = fieldAC_;
    __isset.fieldAC = true;
    return fieldAC;
  }

   ::a::different::ns::AnEnum get_fieldAD() const {
    return fieldAD;
  }

   ::a::different::ns::AnEnum& set_fieldAD( ::a::different::ns::AnEnum fieldAD_) {
    fieldAD = fieldAD_;
    __isset.fieldAD = true;
    return fieldAD;
  }
  const std::map<std::string, int32_t>& get_fieldAE() const&;
  std::map<std::string, int32_t> get_fieldAE() &&;

  template <typename T_containerStruct_fieldAE_struct_setter>
  std::map<std::string, int32_t>& set_fieldAE(T_containerStruct_fieldAE_struct_setter&& fieldAE_) {
    fieldAE = std::forward<T_containerStruct_fieldAE_struct_setter>(fieldAE_);
    __isset.fieldAE = true;
    return fieldAE;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
  // user defined code (cpp2.methods = ...)
  void foo(const std::string& bar) {}

 private:
  static void translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype);
};

void swap(containerStruct& a, containerStruct& b);
extern template uint32_t containerStruct::read<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t containerStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t containerStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t containerStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t containerStruct::read<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t containerStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t containerStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t containerStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t containerStruct::read<>(apache::thrift::SimpleJSONProtocolReader*);
extern template uint32_t containerStruct::write<>(apache::thrift::SimpleJSONProtocolWriter*) const;
extern template uint32_t containerStruct::serializedSize<>(apache::thrift::SimpleJSONProtocolWriter const*) const;
extern template uint32_t containerStruct::serializedSizeZC<>(apache::thrift::SimpleJSONProtocolWriter const*) const;

}}} // some::valid::ns
namespace apache { namespace thrift {

template <> inline void Cpp2Ops< ::some::valid::ns::containerStruct>::clear( ::some::valid::ns::containerStruct* obj) {
  return obj->__clear();
}

template <> inline constexpr apache::thrift::protocol::TType Cpp2Ops< ::some::valid::ns::containerStruct>::thriftType() {
  return apache::thrift::protocol::T_STRUCT;
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::some::valid::ns::containerStruct>::write(Protocol* proto,  ::some::valid::ns::containerStruct const* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::some::valid::ns::containerStruct>::read(Protocol* proto,  ::some::valid::ns::containerStruct* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::some::valid::ns::containerStruct>::serializedSize(Protocol const* proto,  ::some::valid::ns::containerStruct const* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::some::valid::ns::containerStruct>::serializedSizeZC(Protocol const* proto,  ::some::valid::ns::containerStruct const* obj) {
  return obj->serializedSizeZC(proto);
}

}} // apache::thrift
namespace some { namespace valid { namespace ns {
class MyIncludedStruct : private apache::thrift::detail::st::ComparisonOperators<MyIncludedStruct> {
 public:

  MyIncludedStruct() :
      MyIncludedInt(42LL) {}
  // FragileConstructor for use in initialization lists only

  MyIncludedStruct(apache::thrift::FragileConstructor,  ::a::different::ns::IncludedInt64 MyIncludedInt__arg,  ::some::valid::ns::AStruct MyIncludedStruct__arg, std::unique_ptr< ::some::valid::ns::AStruct> ARefField__arg,  ::some::valid::ns::AStruct ARequiredField__arg) :
      MyIncludedInt(std::move(MyIncludedInt__arg)),
      MyIncludedStruct(std::move(MyIncludedStruct__arg)),
      ARefField(std::move(ARefField__arg)),
      ARequiredField(std::move(ARequiredField__arg)) {
    __isset.MyIncludedInt = true;
    __isset.MyIncludedStruct = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  MyIncludedStruct(::apache::thrift::detail::argument_wrapper<1, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    MyIncludedStruct(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    MyIncludedInt = arg.move();
    __isset.MyIncludedInt = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  MyIncludedStruct(::apache::thrift::detail::argument_wrapper<2, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    MyIncludedStruct(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    MyIncludedStruct = arg.move();
    __isset.MyIncludedStruct = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  MyIncludedStruct(::apache::thrift::detail::argument_wrapper<3, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    MyIncludedStruct(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    ARefField = std::make_unique<folly::_t<std::decay<T__ThriftWrappedArgument__Ctor>>>(arg.move());
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  MyIncludedStruct(::apache::thrift::detail::argument_wrapper<4, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    MyIncludedStruct(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    ARequiredField = arg.move();
  }

  MyIncludedStruct(MyIncludedStruct&&) = default;
  MyIncludedStruct(const MyIncludedStruct& src);

  MyIncludedStruct& operator=(MyIncludedStruct&&) = default;
  MyIncludedStruct& operator=(const MyIncludedStruct& src);
  void __clear();

  virtual ~MyIncludedStruct() {}

   ::a::different::ns::IncludedInt64 MyIncludedInt;
   ::some::valid::ns::AStruct MyIncludedStruct;
  std::unique_ptr< ::some::valid::ns::AStruct> ARefField;
   ::some::valid::ns::AStruct ARequiredField;

  struct __isset {
    void __clear() {
      MyIncludedInt = false;
      MyIncludedStruct = false;
    }

    bool MyIncludedInt = false;
    bool MyIncludedStruct = false;
  } __isset;
  bool operator==(const MyIncludedStruct& rhs) const;
  bool operator < (const MyIncludedStruct& rhs) const;

   ::a::different::ns::IncludedInt64 get_MyIncludedInt() const {
    return MyIncludedInt;
  }

   ::a::different::ns::IncludedInt64& set_MyIncludedInt( ::a::different::ns::IncludedInt64 MyIncludedInt_) {
    MyIncludedInt = MyIncludedInt_;
    __isset.MyIncludedInt = true;
    return MyIncludedInt;
  }
  const  ::some::valid::ns::AStruct& get_MyIncludedStruct() const&;
   ::some::valid::ns::AStruct get_MyIncludedStruct() &&;

  template <typename T_MyIncludedStruct_MyIncludedStruct_struct_setter>
   ::some::valid::ns::AStruct& set_MyIncludedStruct(T_MyIncludedStruct_MyIncludedStruct_struct_setter&& MyIncludedStruct_) {
    MyIncludedStruct = std::forward<T_MyIncludedStruct_MyIncludedStruct_struct_setter>(MyIncludedStruct_);
    __isset.MyIncludedStruct = true;
    return MyIncludedStruct;
  }
  const  ::some::valid::ns::AStruct& get_ARequiredField() const&;
   ::some::valid::ns::AStruct get_ARequiredField() &&;

  template <typename T_MyIncludedStruct_ARequiredField_struct_setter>
   ::some::valid::ns::AStruct& set_ARequiredField(T_MyIncludedStruct_ARequiredField_struct_setter&& ARequiredField_) {
    ARequiredField = std::forward<T_MyIncludedStruct_ARequiredField_struct_setter>(ARequiredField_);
    return ARequiredField;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  static void translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype);
};

void swap(MyIncludedStruct& a, MyIncludedStruct& b);
extern template uint32_t MyIncludedStruct::read<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t MyIncludedStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t MyIncludedStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t MyIncludedStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t MyIncludedStruct::read<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t MyIncludedStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t MyIncludedStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t MyIncludedStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t MyIncludedStruct::read<>(apache::thrift::SimpleJSONProtocolReader*);
extern template uint32_t MyIncludedStruct::write<>(apache::thrift::SimpleJSONProtocolWriter*) const;
extern template uint32_t MyIncludedStruct::serializedSize<>(apache::thrift::SimpleJSONProtocolWriter const*) const;
extern template uint32_t MyIncludedStruct::serializedSizeZC<>(apache::thrift::SimpleJSONProtocolWriter const*) const;

}}} // some::valid::ns
namespace apache { namespace thrift {

template <> inline void Cpp2Ops< ::some::valid::ns::MyIncludedStruct>::clear( ::some::valid::ns::MyIncludedStruct* obj) {
  return obj->__clear();
}

template <> inline constexpr apache::thrift::protocol::TType Cpp2Ops< ::some::valid::ns::MyIncludedStruct>::thriftType() {
  return apache::thrift::protocol::T_STRUCT;
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::some::valid::ns::MyIncludedStruct>::write(Protocol* proto,  ::some::valid::ns::MyIncludedStruct const* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::some::valid::ns::MyIncludedStruct>::read(Protocol* proto,  ::some::valid::ns::MyIncludedStruct* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::some::valid::ns::MyIncludedStruct>::serializedSize(Protocol const* proto,  ::some::valid::ns::MyIncludedStruct const* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::some::valid::ns::MyIncludedStruct>::serializedSizeZC(Protocol const* proto,  ::some::valid::ns::MyIncludedStruct const* obj) {
  return obj->serializedSizeZC(proto);
}

}} // apache::thrift
namespace some { namespace valid { namespace ns {
class AnnotatedStruct : private apache::thrift::detail::st::ComparisonOperators<AnnotatedStruct> {
 public:

  AnnotatedStruct() :
      container_with_ref(std::make_unique<std::map<int32_t, std::vector<std::string>>>()),
      req_container_with_ref(std::make_unique<std::vector<std::string>>()),
      opt_container_with_ref(std::make_unique<std::set<int32_t>>()),
      ref_type_const(std::make_shared<std::map<int32_t, std::vector<std::string>>>()),
      req_ref_type_unique(std::make_unique<std::vector<std::string>>()),
      opt_ref_type_shared(std::make_shared<std::set<int32_t>>()),
      base_type(0),
      indirection_a(0),
      iobuf_type_val(apache::thrift::StringTraits< folly::IOBuf>::fromStringLiteral("value")),
      iobuf_ptr_val(apache::thrift::StringTraits< std::unique_ptr<folly::IOBuf>>::fromStringLiteral("value2")),
      struct_struct( ::some::valid::ns::containerStruct(::apache::thrift::detail::wrap_argument<4>(apache::thrift::StringTraits< std::string>::fromStringLiteral("some string")), ::apache::thrift::detail::wrap_argument<9>(false))) {}
  // FragileConstructor for use in initialization lists only

  AnnotatedStruct(apache::thrift::FragileConstructor,  ::some::valid::ns::containerStruct no_annotation__arg, std::unique_ptr< ::some::valid::ns::containerStruct> cpp_unique_ref__arg, std::unique_ptr< ::some::valid::ns::containerStruct> cpp2_unique_ref__arg, std::unique_ptr<std::map<int32_t, std::vector<std::string>>> container_with_ref__arg, std::unique_ptr< ::some::valid::ns::containerStruct> req_cpp_unique_ref__arg, std::unique_ptr< ::some::valid::ns::containerStruct> req_cpp2_unique_ref__arg, std::unique_ptr<std::vector<std::string>> req_container_with_ref__arg, std::unique_ptr< ::some::valid::ns::containerStruct> opt_cpp_unique_ref__arg, std::unique_ptr< ::some::valid::ns::containerStruct> opt_cpp2_unique_ref__arg, std::unique_ptr<std::set<int32_t>> opt_container_with_ref__arg, std::unique_ptr< ::some::valid::ns::containerStruct> ref_type_unique__arg, std::shared_ptr< ::some::valid::ns::containerStruct> ref_type_shared__arg, std::shared_ptr<const std::map<int32_t, std::vector<std::string>>> ref_type_const__arg, std::shared_ptr< ::some::valid::ns::containerStruct> req_ref_type_shared__arg, std::shared_ptr<const  ::some::valid::ns::containerStruct> req_ref_type_const__arg, std::unique_ptr<std::vector<std::string>> req_ref_type_unique__arg, std::shared_ptr<const  ::some::valid::ns::containerStruct> opt_ref_type_const__arg, std::unique_ptr< ::some::valid::ns::containerStruct> opt_ref_type_unique__arg, std::shared_ptr<std::set<int32_t>> opt_ref_type_shared__arg,  ::some::valid::ns::CppFakeI32 base_type__arg,  ::some::valid::ns::FollySmallVectorI64 list_type__arg,  ::some::valid::ns::SortedVectorSetString set_type__arg,  ::some::valid::ns::FakeMap map_type__arg,  ::some::valid::ns::UnorderedMapStruct map_struct_type__arg,  ::some::valid::ns::IOBuf iobuf_type__arg,  ::some::valid::ns::IOBufPtr iobuf_ptr__arg, std::list<int32_t> list_i32_template__arg, std::deque<std::string> list_string_template__arg, folly::sorted_vector_set<std::string> set_template__arg, folly::sorted_vector_map<int64_t, std::string> map_template__arg,  ::some::valid::ns::std_list typedef_list_template__arg,  ::some::valid::ns::std_deque typedef_deque_template__arg,  ::some::valid::ns::folly_set typedef_set_template__arg,  ::some::valid::ns::folly_map typedef_map_template__arg,  ::some::valid::ns::IndirectionA indirection_a__arg, std::vector< ::some::valid::ns::IndirectionB> indirection_b__arg, std::set< ::some::valid::ns::IndirectionC> indirection_c__arg,  ::some::valid::ns::IOBuf iobuf_type_val__arg,  ::some::valid::ns::IOBufPtr iobuf_ptr_val__arg,  ::some::valid::ns::containerStruct struct_struct__arg) :
      no_annotation(std::move(no_annotation__arg)),
      cpp_unique_ref(std::move(cpp_unique_ref__arg)),
      cpp2_unique_ref(std::move(cpp2_unique_ref__arg)),
      container_with_ref(std::move(container_with_ref__arg)),
      req_cpp_unique_ref(std::move(req_cpp_unique_ref__arg)),
      req_cpp2_unique_ref(std::move(req_cpp2_unique_ref__arg)),
      req_container_with_ref(std::move(req_container_with_ref__arg)),
      opt_cpp_unique_ref(std::move(opt_cpp_unique_ref__arg)),
      opt_cpp2_unique_ref(std::move(opt_cpp2_unique_ref__arg)),
      opt_container_with_ref(std::move(opt_container_with_ref__arg)),
      ref_type_unique(std::move(ref_type_unique__arg)),
      ref_type_shared(std::move(ref_type_shared__arg)),
      ref_type_const(std::move(ref_type_const__arg)),
      req_ref_type_shared(std::move(req_ref_type_shared__arg)),
      req_ref_type_const(std::move(req_ref_type_const__arg)),
      req_ref_type_unique(std::move(req_ref_type_unique__arg)),
      opt_ref_type_const(std::move(opt_ref_type_const__arg)),
      opt_ref_type_unique(std::move(opt_ref_type_unique__arg)),
      opt_ref_type_shared(std::move(opt_ref_type_shared__arg)),
      base_type(std::move(base_type__arg)),
      list_type(std::move(list_type__arg)),
      set_type(std::move(set_type__arg)),
      map_type(std::move(map_type__arg)),
      map_struct_type(std::move(map_struct_type__arg)),
      iobuf_type(std::move(iobuf_type__arg)),
      iobuf_ptr(std::move(iobuf_ptr__arg)),
      list_i32_template(std::move(list_i32_template__arg)),
      list_string_template(std::move(list_string_template__arg)),
      set_template(std::move(set_template__arg)),
      map_template(std::move(map_template__arg)),
      typedef_list_template(std::move(typedef_list_template__arg)),
      typedef_deque_template(std::move(typedef_deque_template__arg)),
      typedef_set_template(std::move(typedef_set_template__arg)),
      typedef_map_template(std::move(typedef_map_template__arg)),
      indirection_a(std::move(indirection_a__arg)),
      indirection_b(std::move(indirection_b__arg)),
      indirection_c(std::move(indirection_c__arg)),
      iobuf_type_val(std::move(iobuf_type_val__arg)),
      iobuf_ptr_val(std::move(iobuf_ptr_val__arg)),
      struct_struct(std::move(struct_struct__arg)) {
    __isset.no_annotation = true;
    __isset.base_type = true;
    __isset.list_type = true;
    __isset.set_type = true;
    __isset.map_type = true;
    __isset.map_struct_type = true;
    __isset.iobuf_type = true;
    __isset.iobuf_ptr = true;
    __isset.list_i32_template = true;
    __isset.list_string_template = true;
    __isset.set_template = true;
    __isset.map_template = true;
    __isset.typedef_list_template = true;
    __isset.typedef_deque_template = true;
    __isset.typedef_set_template = true;
    __isset.typedef_map_template = true;
    __isset.indirection_a = true;
    __isset.indirection_b = true;
    __isset.indirection_c = true;
    __isset.iobuf_type_val = true;
    __isset.iobuf_ptr_val = true;
    __isset.struct_struct = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  AnnotatedStruct(::apache::thrift::detail::argument_wrapper<1, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    AnnotatedStruct(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    no_annotation = arg.move();
    __isset.no_annotation = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  AnnotatedStruct(::apache::thrift::detail::argument_wrapper<2, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    AnnotatedStruct(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    cpp_unique_ref = std::make_unique<folly::_t<std::decay<T__ThriftWrappedArgument__Ctor>>>(arg.move());
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  AnnotatedStruct(::apache::thrift::detail::argument_wrapper<3, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    AnnotatedStruct(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    cpp2_unique_ref = std::make_unique<folly::_t<std::decay<T__ThriftWrappedArgument__Ctor>>>(arg.move());
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  AnnotatedStruct(::apache::thrift::detail::argument_wrapper<4, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    AnnotatedStruct(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    container_with_ref = std::make_unique<folly::_t<std::decay<T__ThriftWrappedArgument__Ctor>>>(arg.move());
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  AnnotatedStruct(::apache::thrift::detail::argument_wrapper<5, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    AnnotatedStruct(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    req_cpp_unique_ref = std::make_unique<folly::_t<std::decay<T__ThriftWrappedArgument__Ctor>>>(arg.move());
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  AnnotatedStruct(::apache::thrift::detail::argument_wrapper<6, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    AnnotatedStruct(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    req_cpp2_unique_ref = std::make_unique<folly::_t<std::decay<T__ThriftWrappedArgument__Ctor>>>(arg.move());
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  AnnotatedStruct(::apache::thrift::detail::argument_wrapper<7, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    AnnotatedStruct(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    req_container_with_ref = std::make_unique<folly::_t<std::decay<T__ThriftWrappedArgument__Ctor>>>(arg.move());
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  AnnotatedStruct(::apache::thrift::detail::argument_wrapper<8, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    AnnotatedStruct(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    opt_cpp_unique_ref = std::make_unique<folly::_t<std::decay<T__ThriftWrappedArgument__Ctor>>>(arg.move());
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  AnnotatedStruct(::apache::thrift::detail::argument_wrapper<9, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    AnnotatedStruct(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    opt_cpp2_unique_ref = std::make_unique<folly::_t<std::decay<T__ThriftWrappedArgument__Ctor>>>(arg.move());
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  AnnotatedStruct(::apache::thrift::detail::argument_wrapper<10, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    AnnotatedStruct(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    opt_container_with_ref = std::make_unique<folly::_t<std::decay<T__ThriftWrappedArgument__Ctor>>>(arg.move());
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  AnnotatedStruct(::apache::thrift::detail::argument_wrapper<11, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    AnnotatedStruct(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    ref_type_unique = std::make_unique<folly::_t<std::decay<T__ThriftWrappedArgument__Ctor>>>(arg.move());
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  AnnotatedStruct(::apache::thrift::detail::argument_wrapper<12, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    AnnotatedStruct(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    ref_type_shared = std::make_shared<folly::_t<std::decay<T__ThriftWrappedArgument__Ctor>>>(arg.move());
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  AnnotatedStruct(::apache::thrift::detail::argument_wrapper<13, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    AnnotatedStruct(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    ref_type_const = std::make_shared<folly::_t<std::decay<T__ThriftWrappedArgument__Ctor>>>(arg.move());
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  AnnotatedStruct(::apache::thrift::detail::argument_wrapper<14, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    AnnotatedStruct(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    req_ref_type_shared = std::make_shared<folly::_t<std::decay<T__ThriftWrappedArgument__Ctor>>>(arg.move());
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  AnnotatedStruct(::apache::thrift::detail::argument_wrapper<15, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    AnnotatedStruct(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    req_ref_type_const = std::make_shared<folly::_t<std::decay<T__ThriftWrappedArgument__Ctor>>>(arg.move());
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  AnnotatedStruct(::apache::thrift::detail::argument_wrapper<16, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    AnnotatedStruct(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    req_ref_type_unique = std::make_unique<folly::_t<std::decay<T__ThriftWrappedArgument__Ctor>>>(arg.move());
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  AnnotatedStruct(::apache::thrift::detail::argument_wrapper<17, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    AnnotatedStruct(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    opt_ref_type_const = std::make_shared<folly::_t<std::decay<T__ThriftWrappedArgument__Ctor>>>(arg.move());
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  AnnotatedStruct(::apache::thrift::detail::argument_wrapper<18, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    AnnotatedStruct(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    opt_ref_type_unique = std::make_unique<folly::_t<std::decay<T__ThriftWrappedArgument__Ctor>>>(arg.move());
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  AnnotatedStruct(::apache::thrift::detail::argument_wrapper<19, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    AnnotatedStruct(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    opt_ref_type_shared = std::make_shared<folly::_t<std::decay<T__ThriftWrappedArgument__Ctor>>>(arg.move());
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  AnnotatedStruct(::apache::thrift::detail::argument_wrapper<20, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    AnnotatedStruct(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    base_type = arg.move();
    __isset.base_type = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  AnnotatedStruct(::apache::thrift::detail::argument_wrapper<21, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    AnnotatedStruct(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    list_type = arg.move();
    __isset.list_type = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  AnnotatedStruct(::apache::thrift::detail::argument_wrapper<22, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    AnnotatedStruct(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    set_type = arg.move();
    __isset.set_type = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  AnnotatedStruct(::apache::thrift::detail::argument_wrapper<23, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    AnnotatedStruct(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    map_type = arg.move();
    __isset.map_type = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  AnnotatedStruct(::apache::thrift::detail::argument_wrapper<24, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    AnnotatedStruct(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    map_struct_type = arg.move();
    __isset.map_struct_type = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  AnnotatedStruct(::apache::thrift::detail::argument_wrapper<25, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    AnnotatedStruct(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    iobuf_type = arg.move();
    __isset.iobuf_type = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  AnnotatedStruct(::apache::thrift::detail::argument_wrapper<26, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    AnnotatedStruct(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    iobuf_ptr = arg.move();
    __isset.iobuf_ptr = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  AnnotatedStruct(::apache::thrift::detail::argument_wrapper<27, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    AnnotatedStruct(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    list_i32_template = arg.move();
    __isset.list_i32_template = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  AnnotatedStruct(::apache::thrift::detail::argument_wrapper<28, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    AnnotatedStruct(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    list_string_template = arg.move();
    __isset.list_string_template = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  AnnotatedStruct(::apache::thrift::detail::argument_wrapper<29, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    AnnotatedStruct(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    set_template = arg.move();
    __isset.set_template = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  AnnotatedStruct(::apache::thrift::detail::argument_wrapper<30, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    AnnotatedStruct(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    map_template = arg.move();
    __isset.map_template = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  AnnotatedStruct(::apache::thrift::detail::argument_wrapper<31, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    AnnotatedStruct(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    typedef_list_template = arg.move();
    __isset.typedef_list_template = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  AnnotatedStruct(::apache::thrift::detail::argument_wrapper<32, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    AnnotatedStruct(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    typedef_deque_template = arg.move();
    __isset.typedef_deque_template = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  AnnotatedStruct(::apache::thrift::detail::argument_wrapper<33, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    AnnotatedStruct(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    typedef_set_template = arg.move();
    __isset.typedef_set_template = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  AnnotatedStruct(::apache::thrift::detail::argument_wrapper<34, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    AnnotatedStruct(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    typedef_map_template = arg.move();
    __isset.typedef_map_template = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  AnnotatedStruct(::apache::thrift::detail::argument_wrapper<35, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    AnnotatedStruct(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    indirection_a = arg.move();
    __isset.indirection_a = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  AnnotatedStruct(::apache::thrift::detail::argument_wrapper<36, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    AnnotatedStruct(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    indirection_b = arg.move();
    __isset.indirection_b = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  AnnotatedStruct(::apache::thrift::detail::argument_wrapper<37, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    AnnotatedStruct(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    indirection_c = arg.move();
    __isset.indirection_c = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  AnnotatedStruct(::apache::thrift::detail::argument_wrapper<38, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    AnnotatedStruct(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    iobuf_type_val = arg.move();
    __isset.iobuf_type_val = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  AnnotatedStruct(::apache::thrift::detail::argument_wrapper<39, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    AnnotatedStruct(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    iobuf_ptr_val = arg.move();
    __isset.iobuf_ptr_val = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  AnnotatedStruct(::apache::thrift::detail::argument_wrapper<40, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    AnnotatedStruct(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    struct_struct = arg.move();
    __isset.struct_struct = true;
  }

  AnnotatedStruct(AnnotatedStruct&& other) noexcept :
      no_annotation(std::move(other.no_annotation)),
      cpp_unique_ref(std::move(other.cpp_unique_ref)),
      cpp2_unique_ref(std::move(other.cpp2_unique_ref)),
      container_with_ref(std::move(other.container_with_ref)),
      req_cpp_unique_ref(std::move(other.req_cpp_unique_ref)),
      req_cpp2_unique_ref(std::move(other.req_cpp2_unique_ref)),
      req_container_with_ref(std::move(other.req_container_with_ref)),
      opt_cpp_unique_ref(std::move(other.opt_cpp_unique_ref)),
      opt_cpp2_unique_ref(std::move(other.opt_cpp2_unique_ref)),
      opt_container_with_ref(std::move(other.opt_container_with_ref)),
      ref_type_unique(std::move(other.ref_type_unique)),
      ref_type_shared(std::move(other.ref_type_shared)),
      ref_type_const(std::move(other.ref_type_const)),
      req_ref_type_shared(std::move(other.req_ref_type_shared)),
      req_ref_type_const(std::move(other.req_ref_type_const)),
      req_ref_type_unique(std::move(other.req_ref_type_unique)),
      opt_ref_type_const(std::move(other.opt_ref_type_const)),
      opt_ref_type_unique(std::move(other.opt_ref_type_unique)),
      opt_ref_type_shared(std::move(other.opt_ref_type_shared)),
      base_type(std::move(other.base_type)),
      list_type(std::move(other.list_type)),
      set_type(std::move(other.set_type)),
      map_type(std::move(other.map_type)),
      map_struct_type(std::move(other.map_struct_type)),
      iobuf_type(std::move(other.iobuf_type)),
      iobuf_ptr(std::move(other.iobuf_ptr)),
      list_i32_template(std::move(other.list_i32_template)),
      list_string_template(std::move(other.list_string_template)),
      set_template(std::move(other.set_template)),
      map_template(std::move(other.map_template)),
      typedef_list_template(std::move(other.typedef_list_template)),
      typedef_deque_template(std::move(other.typedef_deque_template)),
      typedef_set_template(std::move(other.typedef_set_template)),
      typedef_map_template(std::move(other.typedef_map_template)),
      indirection_a(std::move(other.indirection_a)),
      indirection_b(std::move(other.indirection_b)),
      indirection_c(std::move(other.indirection_c)),
      iobuf_type_val(std::move(other.iobuf_type_val)),
      iobuf_ptr_val(std::move(other.iobuf_ptr_val)),
      struct_struct(std::move(other.struct_struct)),
      __isset(other.__isset) {}

  AnnotatedStruct& operator=(AnnotatedStruct&&) = default;
  void __clear();
   ::some::valid::ns::containerStruct no_annotation;
  std::unique_ptr< ::some::valid::ns::containerStruct> cpp_unique_ref;
  std::unique_ptr< ::some::valid::ns::containerStruct> cpp2_unique_ref;
  std::unique_ptr<std::map<int32_t, std::vector<std::string>>> container_with_ref;
  std::unique_ptr< ::some::valid::ns::containerStruct> req_cpp_unique_ref;
  std::unique_ptr< ::some::valid::ns::containerStruct> req_cpp2_unique_ref;
  std::unique_ptr<std::vector<std::string>> req_container_with_ref;
  std::unique_ptr< ::some::valid::ns::containerStruct> opt_cpp_unique_ref;
  std::unique_ptr< ::some::valid::ns::containerStruct> opt_cpp2_unique_ref;
  std::unique_ptr<std::set<int32_t>> opt_container_with_ref;
  std::unique_ptr< ::some::valid::ns::containerStruct> ref_type_unique;
  std::shared_ptr< ::some::valid::ns::containerStruct> ref_type_shared;
  std::shared_ptr<const std::map<int32_t, std::vector<std::string>>> ref_type_const;
  std::shared_ptr< ::some::valid::ns::containerStruct> req_ref_type_shared;
  std::shared_ptr<const  ::some::valid::ns::containerStruct> req_ref_type_const;
  std::unique_ptr<std::vector<std::string>> req_ref_type_unique;
  std::shared_ptr<const  ::some::valid::ns::containerStruct> opt_ref_type_const;
  std::unique_ptr< ::some::valid::ns::containerStruct> opt_ref_type_unique;
  std::shared_ptr<std::set<int32_t>> opt_ref_type_shared;
   ::some::valid::ns::CppFakeI32 base_type;
   ::some::valid::ns::FollySmallVectorI64 list_type;
   ::some::valid::ns::SortedVectorSetString set_type;
   ::some::valid::ns::FakeMap map_type;
   ::some::valid::ns::UnorderedMapStruct map_struct_type;
   ::some::valid::ns::IOBuf iobuf_type;
   ::some::valid::ns::IOBufPtr iobuf_ptr;
  std::list<int32_t> list_i32_template;
  std::deque<std::string> list_string_template;
  folly::sorted_vector_set<std::string> set_template;
  folly::sorted_vector_map<int64_t, std::string> map_template;
   ::some::valid::ns::std_list typedef_list_template;
   ::some::valid::ns::std_deque typedef_deque_template;
   ::some::valid::ns::folly_set typedef_set_template;
   ::some::valid::ns::folly_map typedef_map_template;
   ::some::valid::ns::IndirectionA indirection_a;
  std::vector< ::some::valid::ns::IndirectionB> indirection_b;
  std::set< ::some::valid::ns::IndirectionC> indirection_c;
   ::some::valid::ns::IOBuf iobuf_type_val;
   ::some::valid::ns::IOBufPtr iobuf_ptr_val;
   ::some::valid::ns::containerStruct struct_struct;

  struct __isset {
    void __clear() {
      no_annotation = false;
      base_type = false;
      list_type = false;
      set_type = false;
      map_type = false;
      map_struct_type = false;
      iobuf_type = false;
      iobuf_ptr = false;
      list_i32_template = false;
      list_string_template = false;
      set_template = false;
      map_template = false;
      typedef_list_template = false;
      typedef_deque_template = false;
      typedef_set_template = false;
      typedef_map_template = false;
      indirection_a = false;
      indirection_b = false;
      indirection_c = false;
      iobuf_type_val = false;
      iobuf_ptr_val = false;
      struct_struct = false;
    }

    bool no_annotation = false;
    bool base_type = false;
    bool list_type = false;
    bool set_type = false;
    bool map_type = false;
    bool map_struct_type = false;
    bool iobuf_type = false;
    bool iobuf_ptr = false;
    bool list_i32_template = false;
    bool list_string_template = false;
    bool set_template = false;
    bool map_template = false;
    bool typedef_list_template = false;
    bool typedef_deque_template = false;
    bool typedef_set_template = false;
    bool typedef_map_template = false;
    bool indirection_a = false;
    bool indirection_b = false;
    bool indirection_c = false;
    bool iobuf_type_val = false;
    bool iobuf_ptr_val = false;
    bool struct_struct = false;
  } __isset;
  bool operator==(const AnnotatedStruct& rhs) const;
  bool operator < (const AnnotatedStruct& rhs) const;
  const  ::some::valid::ns::containerStruct& get_no_annotation() const&;
   ::some::valid::ns::containerStruct get_no_annotation() &&;

  template <typename T_AnnotatedStruct_no_annotation_struct_setter>
   ::some::valid::ns::containerStruct& set_no_annotation(T_AnnotatedStruct_no_annotation_struct_setter&& no_annotation_) {
    no_annotation = std::forward<T_AnnotatedStruct_no_annotation_struct_setter>(no_annotation_);
    __isset.no_annotation = true;
    return no_annotation;
  }

   ::some::valid::ns::CppFakeI32 get_base_type() const {
    return base_type;
  }

   ::some::valid::ns::CppFakeI32& set_base_type( ::some::valid::ns::CppFakeI32 base_type_) {
    base_type = base_type_;
    __isset.base_type = true;
    return base_type;
  }
  const  ::some::valid::ns::FollySmallVectorI64& get_list_type() const&;
   ::some::valid::ns::FollySmallVectorI64 get_list_type() &&;

  template <typename T_AnnotatedStruct_list_type_struct_setter>
   ::some::valid::ns::FollySmallVectorI64& set_list_type(T_AnnotatedStruct_list_type_struct_setter&& list_type_) {
    list_type = std::forward<T_AnnotatedStruct_list_type_struct_setter>(list_type_);
    __isset.list_type = true;
    return list_type;
  }
  const  ::some::valid::ns::SortedVectorSetString& get_set_type() const&;
   ::some::valid::ns::SortedVectorSetString get_set_type() &&;

  template <typename T_AnnotatedStruct_set_type_struct_setter>
   ::some::valid::ns::SortedVectorSetString& set_set_type(T_AnnotatedStruct_set_type_struct_setter&& set_type_) {
    set_type = std::forward<T_AnnotatedStruct_set_type_struct_setter>(set_type_);
    __isset.set_type = true;
    return set_type;
  }
  const  ::some::valid::ns::FakeMap& get_map_type() const&;
   ::some::valid::ns::FakeMap get_map_type() &&;

  template <typename T_AnnotatedStruct_map_type_struct_setter>
   ::some::valid::ns::FakeMap& set_map_type(T_AnnotatedStruct_map_type_struct_setter&& map_type_) {
    map_type = std::forward<T_AnnotatedStruct_map_type_struct_setter>(map_type_);
    __isset.map_type = true;
    return map_type;
  }
  const  ::some::valid::ns::UnorderedMapStruct& get_map_struct_type() const&;
   ::some::valid::ns::UnorderedMapStruct get_map_struct_type() &&;

  template <typename T_AnnotatedStruct_map_struct_type_struct_setter>
   ::some::valid::ns::UnorderedMapStruct& set_map_struct_type(T_AnnotatedStruct_map_struct_type_struct_setter&& map_struct_type_) {
    map_struct_type = std::forward<T_AnnotatedStruct_map_struct_type_struct_setter>(map_struct_type_);
    __isset.map_struct_type = true;
    return map_struct_type;
  }

  const  ::some::valid::ns::IOBuf& get_iobuf_type() const& {
    return iobuf_type;
  }

   ::some::valid::ns::IOBuf get_iobuf_type() && {
    return std::move(iobuf_type);
  }

  template <typename T_AnnotatedStruct_iobuf_type_struct_setter>
   ::some::valid::ns::IOBuf& set_iobuf_type(T_AnnotatedStruct_iobuf_type_struct_setter&& iobuf_type_) {
    iobuf_type = std::forward<T_AnnotatedStruct_iobuf_type_struct_setter>(iobuf_type_);
    __isset.iobuf_type = true;
    return iobuf_type;
  }

  const  ::some::valid::ns::IOBufPtr& get_iobuf_ptr() const& {
    return iobuf_ptr;
  }

   ::some::valid::ns::IOBufPtr get_iobuf_ptr() && {
    return std::move(iobuf_ptr);
  }

  template <typename T_AnnotatedStruct_iobuf_ptr_struct_setter>
   ::some::valid::ns::IOBufPtr& set_iobuf_ptr(T_AnnotatedStruct_iobuf_ptr_struct_setter&& iobuf_ptr_) {
    iobuf_ptr = std::forward<T_AnnotatedStruct_iobuf_ptr_struct_setter>(iobuf_ptr_);
    __isset.iobuf_ptr = true;
    return iobuf_ptr;
  }
  const std::list<int32_t>& get_list_i32_template() const&;
  std::list<int32_t> get_list_i32_template() &&;

  template <typename T_AnnotatedStruct_list_i32_template_struct_setter>
  std::list<int32_t>& set_list_i32_template(T_AnnotatedStruct_list_i32_template_struct_setter&& list_i32_template_) {
    list_i32_template = std::forward<T_AnnotatedStruct_list_i32_template_struct_setter>(list_i32_template_);
    __isset.list_i32_template = true;
    return list_i32_template;
  }
  const std::deque<std::string>& get_list_string_template() const&;
  std::deque<std::string> get_list_string_template() &&;

  template <typename T_AnnotatedStruct_list_string_template_struct_setter>
  std::deque<std::string>& set_list_string_template(T_AnnotatedStruct_list_string_template_struct_setter&& list_string_template_) {
    list_string_template = std::forward<T_AnnotatedStruct_list_string_template_struct_setter>(list_string_template_);
    __isset.list_string_template = true;
    return list_string_template;
  }
  const folly::sorted_vector_set<std::string>& get_set_template() const&;
  folly::sorted_vector_set<std::string> get_set_template() &&;

  template <typename T_AnnotatedStruct_set_template_struct_setter>
  folly::sorted_vector_set<std::string>& set_set_template(T_AnnotatedStruct_set_template_struct_setter&& set_template_) {
    set_template = std::forward<T_AnnotatedStruct_set_template_struct_setter>(set_template_);
    __isset.set_template = true;
    return set_template;
  }
  const folly::sorted_vector_map<int64_t, std::string>& get_map_template() const&;
  folly::sorted_vector_map<int64_t, std::string> get_map_template() &&;

  template <typename T_AnnotatedStruct_map_template_struct_setter>
  folly::sorted_vector_map<int64_t, std::string>& set_map_template(T_AnnotatedStruct_map_template_struct_setter&& map_template_) {
    map_template = std::forward<T_AnnotatedStruct_map_template_struct_setter>(map_template_);
    __isset.map_template = true;
    return map_template;
  }
  const  ::some::valid::ns::std_list& get_typedef_list_template() const&;
   ::some::valid::ns::std_list get_typedef_list_template() &&;

  template <typename T_AnnotatedStruct_typedef_list_template_struct_setter>
   ::some::valid::ns::std_list& set_typedef_list_template(T_AnnotatedStruct_typedef_list_template_struct_setter&& typedef_list_template_) {
    typedef_list_template = std::forward<T_AnnotatedStruct_typedef_list_template_struct_setter>(typedef_list_template_);
    __isset.typedef_list_template = true;
    return typedef_list_template;
  }
  const  ::some::valid::ns::std_deque& get_typedef_deque_template() const&;
   ::some::valid::ns::std_deque get_typedef_deque_template() &&;

  template <typename T_AnnotatedStruct_typedef_deque_template_struct_setter>
   ::some::valid::ns::std_deque& set_typedef_deque_template(T_AnnotatedStruct_typedef_deque_template_struct_setter&& typedef_deque_template_) {
    typedef_deque_template = std::forward<T_AnnotatedStruct_typedef_deque_template_struct_setter>(typedef_deque_template_);
    __isset.typedef_deque_template = true;
    return typedef_deque_template;
  }
  const  ::some::valid::ns::folly_set& get_typedef_set_template() const&;
   ::some::valid::ns::folly_set get_typedef_set_template() &&;

  template <typename T_AnnotatedStruct_typedef_set_template_struct_setter>
   ::some::valid::ns::folly_set& set_typedef_set_template(T_AnnotatedStruct_typedef_set_template_struct_setter&& typedef_set_template_) {
    typedef_set_template = std::forward<T_AnnotatedStruct_typedef_set_template_struct_setter>(typedef_set_template_);
    __isset.typedef_set_template = true;
    return typedef_set_template;
  }
  const  ::some::valid::ns::folly_map& get_typedef_map_template() const&;
   ::some::valid::ns::folly_map get_typedef_map_template() &&;

  template <typename T_AnnotatedStruct_typedef_map_template_struct_setter>
   ::some::valid::ns::folly_map& set_typedef_map_template(T_AnnotatedStruct_typedef_map_template_struct_setter&& typedef_map_template_) {
    typedef_map_template = std::forward<T_AnnotatedStruct_typedef_map_template_struct_setter>(typedef_map_template_);
    __isset.typedef_map_template = true;
    return typedef_map_template;
  }

   ::some::valid::ns::IndirectionA get_indirection_a() const {
    return indirection_a;
  }

   ::some::valid::ns::IndirectionA& set_indirection_a( ::some::valid::ns::IndirectionA indirection_a_) {
    indirection_a = indirection_a_;
    __isset.indirection_a = true;
    return indirection_a;
  }
  const std::vector< ::some::valid::ns::IndirectionB>& get_indirection_b() const&;
  std::vector< ::some::valid::ns::IndirectionB> get_indirection_b() &&;

  template <typename T_AnnotatedStruct_indirection_b_struct_setter>
  std::vector< ::some::valid::ns::IndirectionB>& set_indirection_b(T_AnnotatedStruct_indirection_b_struct_setter&& indirection_b_) {
    indirection_b = std::forward<T_AnnotatedStruct_indirection_b_struct_setter>(indirection_b_);
    __isset.indirection_b = true;
    return indirection_b;
  }
  const std::set< ::some::valid::ns::IndirectionC>& get_indirection_c() const&;
  std::set< ::some::valid::ns::IndirectionC> get_indirection_c() &&;

  template <typename T_AnnotatedStruct_indirection_c_struct_setter>
  std::set< ::some::valid::ns::IndirectionC>& set_indirection_c(T_AnnotatedStruct_indirection_c_struct_setter&& indirection_c_) {
    indirection_c = std::forward<T_AnnotatedStruct_indirection_c_struct_setter>(indirection_c_);
    __isset.indirection_c = true;
    return indirection_c;
  }

  const  ::some::valid::ns::IOBuf& get_iobuf_type_val() const& {
    return iobuf_type_val;
  }

   ::some::valid::ns::IOBuf get_iobuf_type_val() && {
    return std::move(iobuf_type_val);
  }

  template <typename T_AnnotatedStruct_iobuf_type_val_struct_setter>
   ::some::valid::ns::IOBuf& set_iobuf_type_val(T_AnnotatedStruct_iobuf_type_val_struct_setter&& iobuf_type_val_) {
    iobuf_type_val = std::forward<T_AnnotatedStruct_iobuf_type_val_struct_setter>(iobuf_type_val_);
    __isset.iobuf_type_val = true;
    return iobuf_type_val;
  }

  const  ::some::valid::ns::IOBufPtr& get_iobuf_ptr_val() const& {
    return iobuf_ptr_val;
  }

   ::some::valid::ns::IOBufPtr get_iobuf_ptr_val() && {
    return std::move(iobuf_ptr_val);
  }

  template <typename T_AnnotatedStruct_iobuf_ptr_val_struct_setter>
   ::some::valid::ns::IOBufPtr& set_iobuf_ptr_val(T_AnnotatedStruct_iobuf_ptr_val_struct_setter&& iobuf_ptr_val_) {
    iobuf_ptr_val = std::forward<T_AnnotatedStruct_iobuf_ptr_val_struct_setter>(iobuf_ptr_val_);
    __isset.iobuf_ptr_val = true;
    return iobuf_ptr_val;
  }
  const  ::some::valid::ns::containerStruct& get_struct_struct() const&;
   ::some::valid::ns::containerStruct get_struct_struct() &&;

  template <typename T_AnnotatedStruct_struct_struct_struct_setter>
   ::some::valid::ns::containerStruct& set_struct_struct(T_AnnotatedStruct_struct_struct_struct_setter&& struct_struct_) {
    struct_struct = std::forward<T_AnnotatedStruct_struct_struct_struct_setter>(struct_struct_);
    __isset.struct_struct = true;
    return struct_struct;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
  // user defined code (cpp2.methods = ...)
  void foo(const std::string& bar) {}

 private:
  static void translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype);
};

void swap(AnnotatedStruct& a, AnnotatedStruct& b);
extern template uint32_t AnnotatedStruct::read<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t AnnotatedStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t AnnotatedStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t AnnotatedStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t AnnotatedStruct::read<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t AnnotatedStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t AnnotatedStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t AnnotatedStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t AnnotatedStruct::read<>(apache::thrift::SimpleJSONProtocolReader*);
extern template uint32_t AnnotatedStruct::write<>(apache::thrift::SimpleJSONProtocolWriter*) const;
extern template uint32_t AnnotatedStruct::serializedSize<>(apache::thrift::SimpleJSONProtocolWriter const*) const;
extern template uint32_t AnnotatedStruct::serializedSizeZC<>(apache::thrift::SimpleJSONProtocolWriter const*) const;

}}} // some::valid::ns
namespace apache { namespace thrift {

template <> inline void Cpp2Ops< ::some::valid::ns::AnnotatedStruct>::clear( ::some::valid::ns::AnnotatedStruct* obj) {
  return obj->__clear();
}

template <> inline constexpr apache::thrift::protocol::TType Cpp2Ops< ::some::valid::ns::AnnotatedStruct>::thriftType() {
  return apache::thrift::protocol::T_STRUCT;
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::some::valid::ns::AnnotatedStruct>::write(Protocol* proto,  ::some::valid::ns::AnnotatedStruct const* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::some::valid::ns::AnnotatedStruct>::read(Protocol* proto,  ::some::valid::ns::AnnotatedStruct* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::some::valid::ns::AnnotatedStruct>::serializedSize(Protocol const* proto,  ::some::valid::ns::AnnotatedStruct const* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::some::valid::ns::AnnotatedStruct>::serializedSizeZC(Protocol const* proto,  ::some::valid::ns::AnnotatedStruct const* obj) {
  return obj->serializedSizeZC(proto);
}

}} // apache::thrift

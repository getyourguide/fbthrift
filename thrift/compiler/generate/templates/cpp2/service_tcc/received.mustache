<%!

  Copyright 2016 Facebook, Inc.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

%><%#service:functions%><%#function:returnType%>
template <typename Protocol_>
void <%service:name%>AsyncClient::<%function:name%>T(Protocol_* prot, bool useSync, apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback<%function:comma%><% > service_common/function_param_list_const%>) {
  auto header = std::make_shared<apache::thrift::transport::THeader>(apache::thrift::transport::THeader::ALLOW_BIG_FRAMES);
  header->setProtocolId(getChannel()->getProtocolId());
  header->setHeaders(rpcOptions.releaseWriteHeaders());
  connectionContext_->setRequestHeader(header.get());
  std::unique_ptr<apache::thrift::ContextStack> ctx = this->getContextStack(this->getServiceName(), "<%service:name%>.<%function:name%>", connectionContext_.get());
  <%service:name%>_<%function:name%>_pargs args;
<%#function:args%><%#field:type%><%#type:stream?%><%#type:streamElemType%>
  // channel generates a stream going to the server
  assert(false && "not implemented yet");
  yarpl::Reference<yarpl::flowable::Flowable<folly::IOBufQueue>> untyped_flowable 
    = <%field:name%>->map([](<% > types/type %> /* elem */) {
      folly::IOBufQueue queue(folly::IOBufQueue::cacheChainLength());
      return queue;
    });
  /*
    // TODO: custom map operator wanted, so we don't re-create prot every iteration on every call to the mapping lambda
		<%field:name%>->map([](<% > types/type %> elem) {
      Protocol_ map_prot;
			using Result = <% > types/type %>;
			folly::IOBufQueue queue(folly::IOBufQueue::cacheChainLength());
			size_t bufSize = apache::thrift::Cpp2Ops<Result>::serializedSizeZC(&map_prot, &elem);
			map_prot.setOutput(&queue, bufSize);
			apache::thrift::Cpp2Ops<Result>::write(&map_prot, &elem);
			return queue;
		});
  */
  // TODO: hook up the outgoing stream of IOBufQueue
  // this->getChannel()->getStreamContext()->createOutgoingStream(untyped_flowable, this->getProtoSeqId());
  (void) untyped_flowable;
<%/type:streamElemType%><%/type:stream?%><%/field:type%><%/function:args%>
<%#function:args_without_streams%><%#field:type%>
<%^type:resolves_to_complex_return?%>
  args.get<<%field:index%>>().value = &<%field:name%>;
<%/type:resolves_to_complex_return?%>
<%#type:resolves_to_complex_return?%>
  args.get<<%field:index%>>().value = const_cast<<% > types/type%>*>(&<%field:name%>);
<%/type:resolves_to_complex_return?%>
<%/field:type%><%/function:args_without_streams%>
<%^service:frozen2?%>
  auto sizer = [&](Protocol_* p) { return args.serializedSizeZC(p); };
  auto writer = [&](Protocol_* p) { args.write(p); };
<%/service:frozen2?%>
<%#service:frozen2?%>
  auto sizer = [&](Protocol_* p) { return ::apache::thrift::detail::serializedResponseBodySizeZC(p, &args); };
  auto writer = [&](Protocol_* p) { ::apache::thrift::detail::serializeResponseBody(p, &args); };
<%/service:frozen2?%>
<%#function:oneway?%>
  apache::thrift::clientSendT<Protocol_>(prot, rpcOptions, std::move(callback), std::move(ctx), header, channel_.get(), "<%function:name%>", writer, sizer, true, useSync);
<%/function:oneway?%>
<%^function:oneway?%>
  apache::thrift::clientSendT<Protocol_>(prot, rpcOptions, std::move(callback), std::move(ctx), header, channel_.get(), "<%function:name%>", writer, sizer, false, useSync);
<%/function:oneway?%>
  connectionContext_->setRequestHeader(nullptr);
}

<%^function:oneway?%>
template <typename Protocol_>
<%#type:void?%>
folly::exception_wrapper <%service:name%>AsyncClient::recv_wrapped_<%function:name%>T(Protocol_* prot, ::apache::thrift::ClientReceiveState& state) {
<%/type:void?%>
<%#type:stream?%>
// returning a stream should probably be closer to returning a void or a future; for now this'll just be a stub
// folly::exception_wrapper <%service:name%>AsyncClient::recv_wrapped_<%function:name%>T(Protocol_* prot, ::apache::thrift::ClientReceiveState& state) {
folly::exception_wrapper <%service:name%>AsyncClient::recv_wrapped_<%function:name%>T(Protocol_* prot, <% > types/type%>& /*_return*/, ::apache::thrift::ClientReceiveState& state) {
<%/type:stream?%>
<%^type:void?%>
<%^type:stream?%>
folly::exception_wrapper <%service:name%>AsyncClient::recv_wrapped_<%function:name%>T(Protocol_* prot, <% > types/type%>& _return, ::apache::thrift::ClientReceiveState& state) {
<%/type:stream?%>
<%/type:void?%>
  if (state.isException()) {
    return std::move(state.exception());
  }
  prot->setInput(state.buf());
  auto guard = folly::makeGuard([&] {prot->setInput(nullptr);});
  apache::thrift::ContextStack* ctx = state.ctx();
  std::string _fname;
  int32_t protoSeqId = 0;
  apache::thrift::MessageType mtype;
  ctx->preRead();
  folly::exception_wrapper interior_ew;
  auto caught_ew = folly::try_and_catch<std::exception, apache::thrift::TException, apache::thrift::protocol::TProtocolException>([&]() {
    prot->readMessageBegin(_fname, mtype, protoSeqId);
    if (mtype == apache::thrift::T_EXCEPTION) {
      apache::thrift::TApplicationException x;
<%^service:frozen2?%>
      x.read(prot);
<%/service:frozen2?%>
<%#service:frozen2?%>
      ::apache::thrift::detail::deserializeExceptionBody(prot, &x);
<%/service:frozen2?%>
      prot->readMessageEnd();
      interior_ew = folly::make_exception_wrapper<apache::thrift::TApplicationException>(x);
      return; // from try_and_catch
    }
    if (mtype != apache::thrift::T_REPLY) {
      prot->skip(apache::thrift::protocol::T_STRUCT);
      prot->readMessageEnd();
      interior_ew = folly::make_exception_wrapper<apache::thrift::TApplicationException>(apache::thrift::TApplicationException::TApplicationExceptionType::INVALID_MESSAGE_TYPE);
      return; // from try_and_catch
    }
    if (_fname.compare("<%function:name%>") != 0) {
      prot->skip(apache::thrift::protocol::T_STRUCT);
      prot->readMessageEnd();
      interior_ew = folly::make_exception_wrapper<apache::thrift::TApplicationException>(apache::thrift::TApplicationException::TApplicationExceptionType::WRONG_METHOD_NAME);
      return; // from try_and_catch
    }
    ::apache::thrift::SerializedMessage smsg;
    smsg.protocolType = prot->protocolType();
    smsg.buffer = state.buf();
    ctx->onReadData(smsg);
    <%service:name%>_<%function:name%>_presult result;
<%#type:stream?%>
  assert(false); // we're a stream
<%/type:stream?%>
<%^type:stream?%>
<%^type:void?%>
    result.get<0>().value = &_return;
<%/type:void?%>
<%/type:stream?%>
<%^service:frozen2?%>
    result.read(prot);
<%/service:frozen2?%>
<%#service:frozen2?%>
    ::apache::thrift::detail::deserializeRequestBody(prot, &result);
<%/service:frozen2?%>
    prot->readMessageEnd();
    ctx->postRead(state.header(), state.buf()->length());
<%^type:void?%>
    if (result.getIsSet(0)) {
      // _return pointer has been filled
      return; // from try_and_catch
    }
<%/type:void?%>
<%#function:exceptions%>
    if (result.getIsSet(<%#type:void?%><%field:index%><%/type:void?%><%^type:void?%><%field:index_plus_one%><%/type:void?%>)) {
      interior_ew = folly::make_exception_wrapper<<%#field:type%><% > common/type_namespace_cpp2%><%type:name%><%/field:type%>>(result.get<<%#type:void?%><%field:index%><%/type:void?%><%^type:void?%><%field:index_plus_one%><%/type:void?%>>().ref());
      return; // from try_and_catch
    }
<%/function:exceptions%>
<%^type:void?%>
    else {
      interior_ew = folly::make_exception_wrapper<apache::thrift::TApplicationException>(apache::thrift::TApplicationException::TApplicationExceptionType::MISSING_RESULT, "failed: unknown result");
      return; // from try_and_catch
    }
<%/type:void?%>
  }
  );
  auto ew = interior_ew ? std::move(interior_ew) : std::move(caught_ew);
  if (ew) {
    ctx->handlerErrorWrapped(ew);
  }
  return ew;
}

template <typename Protocol_>
<%^type:resolves_to_complex_return?%>
<% > types/type%> <%service:name%>AsyncClient::recv_<%function:name%>T(Protocol_* prot, ::apache::thrift::ClientReceiveState& state) {
<%#type:void?%>
  auto ew = recv_wrapped_<%function:name%>T(prot, state);
<%/type:void?%>
<%^type:void?%>
  <% > types/type%> _return;
  auto ew = recv_wrapped_<%function:name%>T(prot, _return, state);
<%/type:void?%>
<%/type:resolves_to_complex_return?%>
<%#type:resolves_to_complex_return?%>
void <%service:name%>AsyncClient::recv_<%function:name%>T(Protocol_* prot, <% > types/type%>& _return, ::apache::thrift::ClientReceiveState& state) {
  auto ew = recv_wrapped_<%function:name%>T(prot, _return, state);
<%/type:resolves_to_complex_return?%>
  if (ew) {
    ew.throw_exception();
  }
<%^type:resolves_to_complex_return?%><%^type:void?%>
  return _return;
<%/type:void?%><%/type:resolves_to_complex_return?%>
}

<%/function:oneway?%>
<%/function:returnType%><%/service:functions%>
